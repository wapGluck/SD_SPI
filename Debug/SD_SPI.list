
SD_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002570  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  0800267c  0800267c  0001267c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002c30  08002c30  00012c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002c34  08002c34  00012c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08002c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002348  20000024  08002c5c  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000236c  08002c5c  0002236c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016150  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003047  00000000  00000000  0003619d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007635  00000000  00000000  000391e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000800  00000000  00000000  00040820  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a70  00000000  00000000  00041020  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004f7b  00000000  00000000  00041a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000284e  00000000  00000000  00046a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00049259  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001568  00000000  00000000  000492d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002664 	.word	0x08002664

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002664 	.word	0x08002664

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f88c 	bl	8000280 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f842 	bl	8000200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f002 f930 	bl	8002410 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000026c 	.word	0x2000026c

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001de:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001ea:	041b      	lsls	r3, r3, #16
 80001ec:	0c1b      	lsrs	r3, r3, #16
 80001ee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f8:	60d3      	str	r3, [r2, #12]
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000202:	b530      	push	{r4, r5, lr}
 8000204:	68dc      	ldr	r4, [r3, #12]
 8000206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000210:	2b04      	cmp	r3, #4
 8000212:	bf28      	it	cs
 8000214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021c:	bf98      	it	ls
 800021e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	fa05 f303 	lsl.w	r3, r5, r3
 8000224:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000228:	bf88      	it	hi
 800022a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022c:	4019      	ands	r1, r3
 800022e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000230:	fa05 f404 	lsl.w	r4, r5, r4
 8000234:	3c01      	subs	r4, #1
 8000236:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000238:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	ea42 0201 	orr.w	r2, r2, r1
 800023e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	bfaf      	iteee	ge
 8000244:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	4b06      	ldrlt	r3, [pc, #24]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
 800024a:	f000 000f 	andlt.w	r0, r0, #15
 800024e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	bfa5      	ittet	ge
 8000252:	b2d2      	uxtbge	r2, r2
 8000254:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800025e:	bd30      	pop	{r4, r5, pc}
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	e000ed14 	.word	0xe000ed14

08000268 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000268:	2301      	movs	r3, #1
 800026a:	0942      	lsrs	r2, r0, #5
 800026c:	f000 001f 	and.w	r0, r0, #31
 8000270:	fa03 f000 	lsl.w	r0, r3, r0
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_NVIC_EnableIRQ+0x14>)
 8000276:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800027a:	4770      	bx	lr
 800027c:	e000e100 	.word	0xe000e100

08000280 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000280:	3801      	subs	r0, #1
 8000282:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000286:	d20a      	bcs.n	800029e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000294:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000296:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800029e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ae:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	bf0c      	ite	eq
 80002b4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002b8:	f022 0204 	bicne.w	r2, r2, #4
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	4770      	bx	lr
 80002c0:	e000e010 	.word	0xe000e010

080002c4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002c4:	4770      	bx	lr

080002c6 <HAL_SYSTICK_IRQHandler>:
{
 80002c6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002c8:	f7ff fffc 	bl	80002c4 <HAL_SYSTICK_Callback>
 80002cc:	bd08      	pop	{r3, pc}
	...

080002d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002d4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002d6:	4616      	mov	r6, r2
 80002d8:	4b65      	ldr	r3, [pc, #404]	; (8000470 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002da:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000480 <HAL_GPIO_Init+0x1b0>
 80002de:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000484 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002e2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002e8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ec:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d17f      	bne.n	80003f4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002f4:	684d      	ldr	r5, [r1, #4]
 80002f6:	2d12      	cmp	r5, #18
 80002f8:	f000 80af 	beq.w	800045a <HAL_GPIO_Init+0x18a>
 80002fc:	f200 8088 	bhi.w	8000410 <HAL_GPIO_Init+0x140>
 8000300:	2d02      	cmp	r5, #2
 8000302:	f000 80a7 	beq.w	8000454 <HAL_GPIO_Init+0x184>
 8000306:	d87c      	bhi.n	8000402 <HAL_GPIO_Init+0x132>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 808e 	beq.w	800042a <HAL_GPIO_Init+0x15a>
 800030e:	2d01      	cmp	r5, #1
 8000310:	f000 809e 	beq.w	8000450 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000314:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000318:	2cff      	cmp	r4, #255	; 0xff
 800031a:	bf93      	iteet	ls
 800031c:	4682      	movls	sl, r0
 800031e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000322:	3d08      	subhi	r5, #8
 8000324:	f8d0 b000 	ldrls.w	fp, [r0]
 8000328:	bf92      	itee	ls
 800032a:	00b5      	lslls	r5, r6, #2
 800032c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000330:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000332:	fa09 f805 	lsl.w	r8, r9, r5
 8000336:	ea2b 0808 	bic.w	r8, fp, r8
 800033a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800033e:	bf88      	it	hi
 8000340:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000344:	ea48 0505 	orr.w	r5, r8, r5
 8000348:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800034c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000350:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000354:	d04e      	beq.n	80003f4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	4d47      	ldr	r5, [pc, #284]	; (8000474 <HAL_GPIO_Init+0x1a4>)
 8000358:	4f46      	ldr	r7, [pc, #280]	; (8000474 <HAL_GPIO_Init+0x1a4>)
 800035a:	69ad      	ldr	r5, [r5, #24]
 800035c:	f026 0803 	bic.w	r8, r6, #3
 8000360:	f045 0501 	orr.w	r5, r5, #1
 8000364:	61bd      	str	r5, [r7, #24]
 8000366:	69bd      	ldr	r5, [r7, #24]
 8000368:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800036c:	f005 0501 	and.w	r5, r5, #1
 8000370:	9501      	str	r5, [sp, #4]
 8000372:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000376:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800037a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800037c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000380:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000384:	fa09 f90b 	lsl.w	r9, r9, fp
 8000388:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800038c:	4d3a      	ldr	r5, [pc, #232]	; (8000478 <HAL_GPIO_Init+0x1a8>)
 800038e:	42a8      	cmp	r0, r5
 8000390:	d068      	beq.n	8000464 <HAL_GPIO_Init+0x194>
 8000392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000396:	42a8      	cmp	r0, r5
 8000398:	d066      	beq.n	8000468 <HAL_GPIO_Init+0x198>
 800039a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d064      	beq.n	800046c <HAL_GPIO_Init+0x19c>
 80003a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a6:	42a8      	cmp	r0, r5
 80003a8:	bf0c      	ite	eq
 80003aa:	2503      	moveq	r5, #3
 80003ac:	2504      	movne	r5, #4
 80003ae:	fa05 f50b 	lsl.w	r5, r5, fp
 80003b2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003b6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003ba:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003bc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003c0:	bf14      	ite	ne
 80003c2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003c4:	43a5      	biceq	r5, r4
 80003c6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003c8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ca:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003ce:	bf14      	ite	ne
 80003d0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003d2:	43a5      	biceq	r5, r4
 80003d4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003d8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003dc:	bf14      	ite	ne
 80003de:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003e0:	43a5      	biceq	r5, r4
 80003e2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003e4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003e6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003ea:	bf14      	ite	ne
 80003ec:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003ee:	ea25 0404 	biceq.w	r4, r5, r4
 80003f2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003f4:	3601      	adds	r6, #1
 80003f6:	2e10      	cmp	r6, #16
 80003f8:	f47f af73 	bne.w	80002e2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003fc:	b003      	add	sp, #12
 80003fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000402:	2d03      	cmp	r5, #3
 8000404:	d022      	beq.n	800044c <HAL_GPIO_Init+0x17c>
 8000406:	2d11      	cmp	r5, #17
 8000408:	d184      	bne.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800040a:	68ca      	ldr	r2, [r1, #12]
 800040c:	3204      	adds	r2, #4
          break;
 800040e:	e781      	b.n	8000314 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000410:	4f1a      	ldr	r7, [pc, #104]	; (800047c <HAL_GPIO_Init+0x1ac>)
 8000412:	42bd      	cmp	r5, r7
 8000414:	d009      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000416:	d812      	bhi.n	800043e <HAL_GPIO_Init+0x16e>
 8000418:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000488 <HAL_GPIO_Init+0x1b8>
 800041c:	454d      	cmp	r5, r9
 800041e:	d004      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000420:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000424:	454d      	cmp	r5, r9
 8000426:	f47f af75 	bne.w	8000314 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800042a:	688a      	ldr	r2, [r1, #8]
 800042c:	b1c2      	cbz	r2, 8000460 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800042e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000430:	bf0c      	ite	eq
 8000432:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000436:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800043a:	2208      	movs	r2, #8
 800043c:	e76a      	b.n	8000314 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800043e:	4575      	cmp	r5, lr
 8000440:	d0f3      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000442:	4565      	cmp	r5, ip
 8000444:	d0f1      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000446:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800048c <HAL_GPIO_Init+0x1bc>
 800044a:	e7eb      	b.n	8000424 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800044c:	2200      	movs	r2, #0
 800044e:	e761      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000450:	68ca      	ldr	r2, [r1, #12]
          break;
 8000452:	e75f      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000454:	68ca      	ldr	r2, [r1, #12]
 8000456:	3208      	adds	r2, #8
          break;
 8000458:	e75c      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800045a:	68ca      	ldr	r2, [r1, #12]
 800045c:	320c      	adds	r2, #12
          break;
 800045e:	e759      	b.n	8000314 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000460:	2204      	movs	r2, #4
 8000462:	e757      	b.n	8000314 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000464:	2500      	movs	r5, #0
 8000466:	e7a2      	b.n	80003ae <HAL_GPIO_Init+0xde>
 8000468:	2501      	movs	r5, #1
 800046a:	e7a0      	b.n	80003ae <HAL_GPIO_Init+0xde>
 800046c:	2502      	movs	r5, #2
 800046e:	e79e      	b.n	80003ae <HAL_GPIO_Init+0xde>
 8000470:	40010400 	.word	0x40010400
 8000474:	40021000 	.word	0x40021000
 8000478:	40010800 	.word	0x40010800
 800047c:	10210000 	.word	0x10210000
 8000480:	10310000 	.word	0x10310000
 8000484:	10320000 	.word	0x10320000
 8000488:	10110000 	.word	0x10110000
 800048c:	10220000 	.word	0x10220000

08000490 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000490:	b10a      	cbz	r2, 8000496 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000492:	6101      	str	r1, [r0, #16]
 8000494:	4770      	bx	lr
 8000496:	0409      	lsls	r1, r1, #16
 8000498:	e7fb      	b.n	8000492 <HAL_GPIO_WritePin+0x2>

0800049a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800049a:	4770      	bx	lr

0800049c <HAL_GPIO_EXTI_IRQHandler>:
{
 800049c:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800049e:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80004a0:	6959      	ldr	r1, [r3, #20]
 80004a2:	4201      	tst	r1, r0
 80004a4:	d002      	beq.n	80004ac <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80004a6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80004a8:	f7ff fff7 	bl	800049a <HAL_GPIO_EXTI_Callback>
 80004ac:	bd08      	pop	{r3, pc}
 80004ae:	bf00      	nop
 80004b0:	40010400 	.word	0x40010400

080004b4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004b4:	6803      	ldr	r3, [r0, #0]
{
 80004b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ba:	07db      	lsls	r3, r3, #31
{
 80004bc:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004be:	d410      	bmi.n	80004e2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004c0:	682b      	ldr	r3, [r5, #0]
 80004c2:	079f      	lsls	r7, r3, #30
 80004c4:	d45e      	bmi.n	8000584 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004c6:	682b      	ldr	r3, [r5, #0]
 80004c8:	0719      	lsls	r1, r3, #28
 80004ca:	f100 8095 	bmi.w	80005f8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004ce:	682b      	ldr	r3, [r5, #0]
 80004d0:	075a      	lsls	r2, r3, #29
 80004d2:	f100 80bf 	bmi.w	8000654 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004d6:	69ea      	ldr	r2, [r5, #28]
 80004d8:	2a00      	cmp	r2, #0
 80004da:	f040 812d 	bne.w	8000738 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004de:	2000      	movs	r0, #0
 80004e0:	e014      	b.n	800050c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004e2:	4c90      	ldr	r4, [pc, #576]	; (8000724 <HAL_RCC_OscConfig+0x270>)
 80004e4:	6863      	ldr	r3, [r4, #4]
 80004e6:	f003 030c 	and.w	r3, r3, #12
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	d007      	beq.n	80004fe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004ee:	6863      	ldr	r3, [r4, #4]
 80004f0:	f003 030c 	and.w	r3, r3, #12
 80004f4:	2b08      	cmp	r3, #8
 80004f6:	d10c      	bne.n	8000512 <HAL_RCC_OscConfig+0x5e>
 80004f8:	6863      	ldr	r3, [r4, #4]
 80004fa:	03de      	lsls	r6, r3, #15
 80004fc:	d509      	bpl.n	8000512 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004fe:	6823      	ldr	r3, [r4, #0]
 8000500:	039c      	lsls	r4, r3, #14
 8000502:	d5dd      	bpl.n	80004c0 <HAL_RCC_OscConfig+0xc>
 8000504:	686b      	ldr	r3, [r5, #4]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1da      	bne.n	80004c0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800050a:	2001      	movs	r0, #1
}
 800050c:	b002      	add	sp, #8
 800050e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000512:	686b      	ldr	r3, [r5, #4]
 8000514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000518:	d110      	bne.n	800053c <HAL_RCC_OscConfig+0x88>
 800051a:	6823      	ldr	r3, [r4, #0]
 800051c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000520:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000522:	f7ff fe55 	bl	80001d0 <HAL_GetTick>
 8000526:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000528:	6823      	ldr	r3, [r4, #0]
 800052a:	0398      	lsls	r0, r3, #14
 800052c:	d4c8      	bmi.n	80004c0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800052e:	f7ff fe4f 	bl	80001d0 <HAL_GetTick>
 8000532:	1b80      	subs	r0, r0, r6
 8000534:	2864      	cmp	r0, #100	; 0x64
 8000536:	d9f7      	bls.n	8000528 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000538:	2003      	movs	r0, #3
 800053a:	e7e7      	b.n	800050c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800053c:	b99b      	cbnz	r3, 8000566 <HAL_RCC_OscConfig+0xb2>
 800053e:	6823      	ldr	r3, [r4, #0]
 8000540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000544:	6023      	str	r3, [r4, #0]
 8000546:	6823      	ldr	r3, [r4, #0]
 8000548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800054c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800054e:	f7ff fe3f 	bl	80001d0 <HAL_GetTick>
 8000552:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000554:	6823      	ldr	r3, [r4, #0]
 8000556:	0399      	lsls	r1, r3, #14
 8000558:	d5b2      	bpl.n	80004c0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800055a:	f7ff fe39 	bl	80001d0 <HAL_GetTick>
 800055e:	1b80      	subs	r0, r0, r6
 8000560:	2864      	cmp	r0, #100	; 0x64
 8000562:	d9f7      	bls.n	8000554 <HAL_RCC_OscConfig+0xa0>
 8000564:	e7e8      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000566:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800056a:	6823      	ldr	r3, [r4, #0]
 800056c:	d103      	bne.n	8000576 <HAL_RCC_OscConfig+0xc2>
 800056e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000572:	6023      	str	r3, [r4, #0]
 8000574:	e7d1      	b.n	800051a <HAL_RCC_OscConfig+0x66>
 8000576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800057a:	6023      	str	r3, [r4, #0]
 800057c:	6823      	ldr	r3, [r4, #0]
 800057e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000582:	e7cd      	b.n	8000520 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000584:	4c67      	ldr	r4, [pc, #412]	; (8000724 <HAL_RCC_OscConfig+0x270>)
 8000586:	6863      	ldr	r3, [r4, #4]
 8000588:	f013 0f0c 	tst.w	r3, #12
 800058c:	d007      	beq.n	800059e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800058e:	6863      	ldr	r3, [r4, #4]
 8000590:	f003 030c 	and.w	r3, r3, #12
 8000594:	2b08      	cmp	r3, #8
 8000596:	d110      	bne.n	80005ba <HAL_RCC_OscConfig+0x106>
 8000598:	6863      	ldr	r3, [r4, #4]
 800059a:	03da      	lsls	r2, r3, #15
 800059c:	d40d      	bmi.n	80005ba <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	079b      	lsls	r3, r3, #30
 80005a2:	d502      	bpl.n	80005aa <HAL_RCC_OscConfig+0xf6>
 80005a4:	692b      	ldr	r3, [r5, #16]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d1af      	bne.n	800050a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	696a      	ldr	r2, [r5, #20]
 80005ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005b2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005b6:	6023      	str	r3, [r4, #0]
 80005b8:	e785      	b.n	80004c6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005ba:	692a      	ldr	r2, [r5, #16]
 80005bc:	4b5a      	ldr	r3, [pc, #360]	; (8000728 <HAL_RCC_OscConfig+0x274>)
 80005be:	b16a      	cbz	r2, 80005dc <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80005c0:	2201      	movs	r2, #1
 80005c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005c4:	f7ff fe04 	bl	80001d0 <HAL_GetTick>
 80005c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005ca:	6823      	ldr	r3, [r4, #0]
 80005cc:	079f      	lsls	r7, r3, #30
 80005ce:	d4ec      	bmi.n	80005aa <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005d0:	f7ff fdfe 	bl	80001d0 <HAL_GetTick>
 80005d4:	1b80      	subs	r0, r0, r6
 80005d6:	2802      	cmp	r0, #2
 80005d8:	d9f7      	bls.n	80005ca <HAL_RCC_OscConfig+0x116>
 80005da:	e7ad      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005de:	f7ff fdf7 	bl	80001d0 <HAL_GetTick>
 80005e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005e4:	6823      	ldr	r3, [r4, #0]
 80005e6:	0798      	lsls	r0, r3, #30
 80005e8:	f57f af6d 	bpl.w	80004c6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005ec:	f7ff fdf0 	bl	80001d0 <HAL_GetTick>
 80005f0:	1b80      	subs	r0, r0, r6
 80005f2:	2802      	cmp	r0, #2
 80005f4:	d9f6      	bls.n	80005e4 <HAL_RCC_OscConfig+0x130>
 80005f6:	e79f      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005f8:	69aa      	ldr	r2, [r5, #24]
 80005fa:	4c4a      	ldr	r4, [pc, #296]	; (8000724 <HAL_RCC_OscConfig+0x270>)
 80005fc:	4b4b      	ldr	r3, [pc, #300]	; (800072c <HAL_RCC_OscConfig+0x278>)
 80005fe:	b1da      	cbz	r2, 8000638 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000600:	2201      	movs	r2, #1
 8000602:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000604:	f7ff fde4 	bl	80001d0 <HAL_GetTick>
 8000608:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800060a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800060c:	079b      	lsls	r3, r3, #30
 800060e:	d50d      	bpl.n	800062c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000610:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000614:	4b46      	ldr	r3, [pc, #280]	; (8000730 <HAL_RCC_OscConfig+0x27c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	fbb3 f3f2 	udiv	r3, r3, r2
 800061c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800061e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000620:	9b01      	ldr	r3, [sp, #4]
 8000622:	1e5a      	subs	r2, r3, #1
 8000624:	9201      	str	r2, [sp, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1f9      	bne.n	800061e <HAL_RCC_OscConfig+0x16a>
 800062a:	e750      	b.n	80004ce <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800062c:	f7ff fdd0 	bl	80001d0 <HAL_GetTick>
 8000630:	1b80      	subs	r0, r0, r6
 8000632:	2802      	cmp	r0, #2
 8000634:	d9e9      	bls.n	800060a <HAL_RCC_OscConfig+0x156>
 8000636:	e77f      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000638:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800063a:	f7ff fdc9 	bl	80001d0 <HAL_GetTick>
 800063e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000642:	079f      	lsls	r7, r3, #30
 8000644:	f57f af43 	bpl.w	80004ce <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000648:	f7ff fdc2 	bl	80001d0 <HAL_GetTick>
 800064c:	1b80      	subs	r0, r0, r6
 800064e:	2802      	cmp	r0, #2
 8000650:	d9f6      	bls.n	8000640 <HAL_RCC_OscConfig+0x18c>
 8000652:	e771      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000654:	4c33      	ldr	r4, [pc, #204]	; (8000724 <HAL_RCC_OscConfig+0x270>)
 8000656:	69e3      	ldr	r3, [r4, #28]
 8000658:	00d8      	lsls	r0, r3, #3
 800065a:	d424      	bmi.n	80006a6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800065c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	69e3      	ldr	r3, [r4, #28]
 8000660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000664:	61e3      	str	r3, [r4, #28]
 8000666:	69e3      	ldr	r3, [r4, #28]
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000670:	4e30      	ldr	r6, [pc, #192]	; (8000734 <HAL_RCC_OscConfig+0x280>)
 8000672:	6833      	ldr	r3, [r6, #0]
 8000674:	05d9      	lsls	r1, r3, #23
 8000676:	d518      	bpl.n	80006aa <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000678:	68eb      	ldr	r3, [r5, #12]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d126      	bne.n	80006cc <HAL_RCC_OscConfig+0x218>
 800067e:	6a23      	ldr	r3, [r4, #32]
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000686:	f7ff fda3 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800068a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800068e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000690:	6a23      	ldr	r3, [r4, #32]
 8000692:	079b      	lsls	r3, r3, #30
 8000694:	d53f      	bpl.n	8000716 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000696:	2f00      	cmp	r7, #0
 8000698:	f43f af1d 	beq.w	80004d6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800069c:	69e3      	ldr	r3, [r4, #28]
 800069e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80006a2:	61e3      	str	r3, [r4, #28]
 80006a4:	e717      	b.n	80004d6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80006a6:	2700      	movs	r7, #0
 80006a8:	e7e2      	b.n	8000670 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006aa:	6833      	ldr	r3, [r6, #0]
 80006ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006b2:	f7ff fd8d 	bl	80001d0 <HAL_GetTick>
 80006b6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006b8:	6833      	ldr	r3, [r6, #0]
 80006ba:	05da      	lsls	r2, r3, #23
 80006bc:	d4dc      	bmi.n	8000678 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006be:	f7ff fd87 	bl	80001d0 <HAL_GetTick>
 80006c2:	eba0 0008 	sub.w	r0, r0, r8
 80006c6:	2864      	cmp	r0, #100	; 0x64
 80006c8:	d9f6      	bls.n	80006b8 <HAL_RCC_OscConfig+0x204>
 80006ca:	e735      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006cc:	b9ab      	cbnz	r3, 80006fa <HAL_RCC_OscConfig+0x246>
 80006ce:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006d0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006d4:	f023 0301 	bic.w	r3, r3, #1
 80006d8:	6223      	str	r3, [r4, #32]
 80006da:	6a23      	ldr	r3, [r4, #32]
 80006dc:	f023 0304 	bic.w	r3, r3, #4
 80006e0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006e2:	f7ff fd75 	bl	80001d0 <HAL_GetTick>
 80006e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006e8:	6a23      	ldr	r3, [r4, #32]
 80006ea:	0798      	lsls	r0, r3, #30
 80006ec:	d5d3      	bpl.n	8000696 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006ee:	f7ff fd6f 	bl	80001d0 <HAL_GetTick>
 80006f2:	1b80      	subs	r0, r0, r6
 80006f4:	4540      	cmp	r0, r8
 80006f6:	d9f7      	bls.n	80006e8 <HAL_RCC_OscConfig+0x234>
 80006f8:	e71e      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006fa:	2b05      	cmp	r3, #5
 80006fc:	6a23      	ldr	r3, [r4, #32]
 80006fe:	d103      	bne.n	8000708 <HAL_RCC_OscConfig+0x254>
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6223      	str	r3, [r4, #32]
 8000706:	e7ba      	b.n	800067e <HAL_RCC_OscConfig+0x1ca>
 8000708:	f023 0301 	bic.w	r3, r3, #1
 800070c:	6223      	str	r3, [r4, #32]
 800070e:	6a23      	ldr	r3, [r4, #32]
 8000710:	f023 0304 	bic.w	r3, r3, #4
 8000714:	e7b6      	b.n	8000684 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000716:	f7ff fd5b 	bl	80001d0 <HAL_GetTick>
 800071a:	eba0 0008 	sub.w	r0, r0, r8
 800071e:	42b0      	cmp	r0, r6
 8000720:	d9b6      	bls.n	8000690 <HAL_RCC_OscConfig+0x1dc>
 8000722:	e709      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
 8000724:	40021000 	.word	0x40021000
 8000728:	42420000 	.word	0x42420000
 800072c:	42420480 	.word	0x42420480
 8000730:	20000008 	.word	0x20000008
 8000734:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000738:	4c22      	ldr	r4, [pc, #136]	; (80007c4 <HAL_RCC_OscConfig+0x310>)
 800073a:	6863      	ldr	r3, [r4, #4]
 800073c:	f003 030c 	and.w	r3, r3, #12
 8000740:	2b08      	cmp	r3, #8
 8000742:	f43f aee2 	beq.w	800050a <HAL_RCC_OscConfig+0x56>
 8000746:	2300      	movs	r3, #0
 8000748:	4e1f      	ldr	r6, [pc, #124]	; (80007c8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800074a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800074c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800074e:	d12b      	bne.n	80007a8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000750:	f7ff fd3e 	bl	80001d0 <HAL_GetTick>
 8000754:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000756:	6823      	ldr	r3, [r4, #0]
 8000758:	0199      	lsls	r1, r3, #6
 800075a:	d41f      	bmi.n	800079c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800075c:	6a2b      	ldr	r3, [r5, #32]
 800075e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000762:	d105      	bne.n	8000770 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000764:	6862      	ldr	r2, [r4, #4]
 8000766:	68a9      	ldr	r1, [r5, #8]
 8000768:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800076c:	430a      	orrs	r2, r1
 800076e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000770:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000772:	6862      	ldr	r2, [r4, #4]
 8000774:	430b      	orrs	r3, r1
 8000776:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800077a:	4313      	orrs	r3, r2
 800077c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800077e:	2301      	movs	r3, #1
 8000780:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000782:	f7ff fd25 	bl	80001d0 <HAL_GetTick>
 8000786:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000788:	6823      	ldr	r3, [r4, #0]
 800078a:	019a      	lsls	r2, r3, #6
 800078c:	f53f aea7 	bmi.w	80004de <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000790:	f7ff fd1e 	bl	80001d0 <HAL_GetTick>
 8000794:	1b40      	subs	r0, r0, r5
 8000796:	2802      	cmp	r0, #2
 8000798:	d9f6      	bls.n	8000788 <HAL_RCC_OscConfig+0x2d4>
 800079a:	e6cd      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800079c:	f7ff fd18 	bl	80001d0 <HAL_GetTick>
 80007a0:	1bc0      	subs	r0, r0, r7
 80007a2:	2802      	cmp	r0, #2
 80007a4:	d9d7      	bls.n	8000756 <HAL_RCC_OscConfig+0x2a2>
 80007a6:	e6c7      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80007a8:	f7ff fd12 	bl	80001d0 <HAL_GetTick>
 80007ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007ae:	6823      	ldr	r3, [r4, #0]
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	f57f ae94 	bpl.w	80004de <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007b6:	f7ff fd0b 	bl	80001d0 <HAL_GetTick>
 80007ba:	1b40      	subs	r0, r0, r5
 80007bc:	2802      	cmp	r0, #2
 80007be:	d9f6      	bls.n	80007ae <HAL_RCC_OscConfig+0x2fa>
 80007c0:	e6ba      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	42420060 	.word	0x42420060

080007cc <HAL_RCC_GetSysClockFreq>:
{
 80007cc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007ce:	4b19      	ldr	r3, [pc, #100]	; (8000834 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007d0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007d2:	ac02      	add	r4, sp, #8
 80007d4:	f103 0510 	add.w	r5, r3, #16
 80007d8:	4622      	mov	r2, r4
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	6859      	ldr	r1, [r3, #4]
 80007de:	3308      	adds	r3, #8
 80007e0:	c203      	stmia	r2!, {r0, r1}
 80007e2:	42ab      	cmp	r3, r5
 80007e4:	4614      	mov	r4, r2
 80007e6:	d1f7      	bne.n	80007d8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007e8:	2301      	movs	r3, #1
 80007ea:	f88d 3004 	strb.w	r3, [sp, #4]
 80007ee:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007f0:	4911      	ldr	r1, [pc, #68]	; (8000838 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007f2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007f6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007f8:	f003 020c 	and.w	r2, r3, #12
 80007fc:	2a08      	cmp	r2, #8
 80007fe:	d117      	bne.n	8000830 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000800:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000804:	a806      	add	r0, sp, #24
 8000806:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000808:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800080a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800080e:	d50c      	bpl.n	800082a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000810:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000814:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000818:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800081a:	aa06      	add	r2, sp, #24
 800081c:	4413      	add	r3, r2
 800081e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000822:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000826:	b007      	add	sp, #28
 8000828:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <HAL_RCC_GetSysClockFreq+0x74>)
 800082c:	4350      	muls	r0, r2
 800082e:	e7fa      	b.n	8000826 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000832:	e7f8      	b.n	8000826 <HAL_RCC_GetSysClockFreq+0x5a>
 8000834:	0800267c 	.word	0x0800267c
 8000838:	40021000 	.word	0x40021000
 800083c:	007a1200 	.word	0x007a1200
 8000840:	003d0900 	.word	0x003d0900

08000844 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000844:	4a4d      	ldr	r2, [pc, #308]	; (800097c <HAL_RCC_ClockConfig+0x138>)
{
 8000846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800084a:	6813      	ldr	r3, [r2, #0]
{
 800084c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	428b      	cmp	r3, r1
{
 8000854:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000856:	d328      	bcc.n	80008aa <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000858:	682a      	ldr	r2, [r5, #0]
 800085a:	0791      	lsls	r1, r2, #30
 800085c:	d432      	bmi.n	80008c4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800085e:	07d2      	lsls	r2, r2, #31
 8000860:	d438      	bmi.n	80008d4 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000862:	4a46      	ldr	r2, [pc, #280]	; (800097c <HAL_RCC_ClockConfig+0x138>)
 8000864:	6813      	ldr	r3, [r2, #0]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	429e      	cmp	r6, r3
 800086c:	d373      	bcc.n	8000956 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800086e:	682a      	ldr	r2, [r5, #0]
 8000870:	4c43      	ldr	r4, [pc, #268]	; (8000980 <HAL_RCC_ClockConfig+0x13c>)
 8000872:	f012 0f04 	tst.w	r2, #4
 8000876:	d179      	bne.n	800096c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000878:	0713      	lsls	r3, r2, #28
 800087a:	d506      	bpl.n	800088a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800087c:	6863      	ldr	r3, [r4, #4]
 800087e:	692a      	ldr	r2, [r5, #16]
 8000880:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000884:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000888:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800088a:	f7ff ff9f 	bl	80007cc <HAL_RCC_GetSysClockFreq>
 800088e:	6863      	ldr	r3, [r4, #4]
 8000890:	4a3c      	ldr	r2, [pc, #240]	; (8000984 <HAL_RCC_ClockConfig+0x140>)
 8000892:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000896:	5cd3      	ldrb	r3, [r2, r3]
 8000898:	40d8      	lsrs	r0, r3
 800089a:	4b3b      	ldr	r3, [pc, #236]	; (8000988 <HAL_RCC_ClockConfig+0x144>)
 800089c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fc54 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80008a4:	2000      	movs	r0, #0
}
 80008a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008aa:	6813      	ldr	r3, [r2, #0]
 80008ac:	f023 0307 	bic.w	r3, r3, #7
 80008b0:	430b      	orrs	r3, r1
 80008b2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008b4:	6813      	ldr	r3, [r2, #0]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	4299      	cmp	r1, r3
 80008bc:	d0cc      	beq.n	8000858 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008be:	2001      	movs	r0, #1
 80008c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008c4:	492e      	ldr	r1, [pc, #184]	; (8000980 <HAL_RCC_ClockConfig+0x13c>)
 80008c6:	68a8      	ldr	r0, [r5, #8]
 80008c8:	684b      	ldr	r3, [r1, #4]
 80008ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008ce:	4303      	orrs	r3, r0
 80008d0:	604b      	str	r3, [r1, #4]
 80008d2:	e7c4      	b.n	800085e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008d4:	686a      	ldr	r2, [r5, #4]
 80008d6:	4c2a      	ldr	r4, [pc, #168]	; (8000980 <HAL_RCC_ClockConfig+0x13c>)
 80008d8:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008da:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008dc:	d11c      	bne.n	8000918 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008e2:	d0ec      	beq.n	80008be <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008e4:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008e6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008ea:	f023 0303 	bic.w	r3, r3, #3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008f2:	f7ff fc6d 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008f6:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008f8:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d114      	bne.n	8000928 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008fe:	6863      	ldr	r3, [r4, #4]
 8000900:	f003 030c 	and.w	r3, r3, #12
 8000904:	2b04      	cmp	r3, #4
 8000906:	d0ac      	beq.n	8000862 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000908:	f7ff fc62 	bl	80001d0 <HAL_GetTick>
 800090c:	1bc0      	subs	r0, r0, r7
 800090e:	4540      	cmp	r0, r8
 8000910:	d9f5      	bls.n	80008fe <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000912:	2003      	movs	r0, #3
 8000914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000918:	2a02      	cmp	r2, #2
 800091a:	d102      	bne.n	8000922 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800091c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000920:	e7df      	b.n	80008e2 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000922:	f013 0f02 	tst.w	r3, #2
 8000926:	e7dc      	b.n	80008e2 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000928:	2b02      	cmp	r3, #2
 800092a:	d10f      	bne.n	800094c <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800092c:	6863      	ldr	r3, [r4, #4]
 800092e:	f003 030c 	and.w	r3, r3, #12
 8000932:	2b08      	cmp	r3, #8
 8000934:	d095      	beq.n	8000862 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000936:	f7ff fc4b 	bl	80001d0 <HAL_GetTick>
 800093a:	1bc0      	subs	r0, r0, r7
 800093c:	4540      	cmp	r0, r8
 800093e:	d9f5      	bls.n	800092c <HAL_RCC_ClockConfig+0xe8>
 8000940:	e7e7      	b.n	8000912 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000942:	f7ff fc45 	bl	80001d0 <HAL_GetTick>
 8000946:	1bc0      	subs	r0, r0, r7
 8000948:	4540      	cmp	r0, r8
 800094a:	d8e2      	bhi.n	8000912 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800094c:	6863      	ldr	r3, [r4, #4]
 800094e:	f013 0f0c 	tst.w	r3, #12
 8000952:	d1f6      	bne.n	8000942 <HAL_RCC_ClockConfig+0xfe>
 8000954:	e785      	b.n	8000862 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000956:	6813      	ldr	r3, [r2, #0]
 8000958:	f023 0307 	bic.w	r3, r3, #7
 800095c:	4333      	orrs	r3, r6
 800095e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000960:	6813      	ldr	r3, [r2, #0]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	429e      	cmp	r6, r3
 8000968:	d1a9      	bne.n	80008be <HAL_RCC_ClockConfig+0x7a>
 800096a:	e780      	b.n	800086e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800096c:	6863      	ldr	r3, [r4, #4]
 800096e:	68e9      	ldr	r1, [r5, #12]
 8000970:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000974:	430b      	orrs	r3, r1
 8000976:	6063      	str	r3, [r4, #4]
 8000978:	e77e      	b.n	8000878 <HAL_RCC_ClockConfig+0x34>
 800097a:	bf00      	nop
 800097c:	40022000 	.word	0x40022000
 8000980:	40021000 	.word	0x40021000
 8000984:	08002c08 	.word	0x08002c08
 8000988:	20000008 	.word	0x20000008

0800098c <HAL_RCC_GetHCLKFreq>:
}
 800098c:	4b01      	ldr	r3, [pc, #4]	; (8000994 <HAL_RCC_GetHCLKFreq+0x8>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008

08000998 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80009a2:	5cd3      	ldrb	r3, [r2, r3]
 80009a4:	4a03      	ldr	r2, [pc, #12]	; (80009b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80009a6:	6810      	ldr	r0, [r2, #0]
}    
 80009a8:	40d8      	lsrs	r0, r3
 80009aa:	4770      	bx	lr
 80009ac:	40021000 	.word	0x40021000
 80009b0:	08002c18 	.word	0x08002c18
 80009b4:	20000008 	.word	0x20000008

080009b8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <HAL_RCC_GetPCLK2Freq+0x14>)
 80009ba:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009c2:	5cd3      	ldrb	r3, [r2, r3]
 80009c4:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009c6:	6810      	ldr	r0, [r2, #0]
} 
 80009c8:	40d8      	lsrs	r0, r3
 80009ca:	4770      	bx	lr
 80009cc:	40021000 	.word	0x40021000
 80009d0:	08002c18 	.word	0x08002c18
 80009d4:	20000008 	.word	0x20000008

080009d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80009d8:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80009da:	4604      	mov	r4, r0
 80009dc:	2800      	cmp	r0, #0
 80009de:	d034      	beq.n	8000a4a <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80009e4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80009e8:	b90b      	cbnz	r3, 80009ee <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80009ea:	f001 fce7 	bl	80023bc <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80009ee:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80009f0:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80009f2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80009f6:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80009f8:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80009fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009fe:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000a00:	6863      	ldr	r3, [r4, #4]
 8000a02:	69a2      	ldr	r2, [r4, #24]
 8000a04:	4303      	orrs	r3, r0
 8000a06:	68e0      	ldr	r0, [r4, #12]
 8000a08:	4303      	orrs	r3, r0
 8000a0a:	6920      	ldr	r0, [r4, #16]
 8000a0c:	4303      	orrs	r3, r0
 8000a0e:	6960      	ldr	r0, [r4, #20]
 8000a10:	4303      	orrs	r3, r0
 8000a12:	69e0      	ldr	r0, [r4, #28]
 8000a14:	4303      	orrs	r3, r0
 8000a16:	6a20      	ldr	r0, [r4, #32]
 8000a18:	4303      	orrs	r3, r0
 8000a1a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000a1c:	4303      	orrs	r3, r0
 8000a1e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000a22:	4303      	orrs	r3, r0
 8000a24:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000a26:	0c12      	lsrs	r2, r2, #16
 8000a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a2a:	f002 0204 	and.w	r2, r2, #4
 8000a2e:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000a30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000a32:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000a34:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000a36:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000a38:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000a3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a3e:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8000a40:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000a42:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000a44:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8000a48:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000a4a:	2001      	movs	r0, #1
}
 8000a4c:	bd10      	pop	{r4, pc}
	...

08000a50 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000a54:	6805      	ldr	r5, [r0, #0]
 8000a56:	68c2      	ldr	r2, [r0, #12]
 8000a58:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a5a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000a5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a60:	4313      	orrs	r3, r2
 8000a62:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a64:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000a66:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a68:	430b      	orrs	r3, r1
 8000a6a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000a6c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000a70:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a74:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000a76:	4313      	orrs	r3, r2
 8000a78:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000a7a:	696b      	ldr	r3, [r5, #20]
 8000a7c:	6982      	ldr	r2, [r0, #24]
 8000a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a82:	4313      	orrs	r3, r2
 8000a84:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000a86:	4b40      	ldr	r3, [pc, #256]	; (8000b88 <UART_SetConfig+0x138>)
{
 8000a88:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000a8a:	429d      	cmp	r5, r3
 8000a8c:	f04f 0419 	mov.w	r4, #25
 8000a90:	d146      	bne.n	8000b20 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000a92:	f7ff ff91 	bl	80009b8 <HAL_RCC_GetPCLK2Freq>
 8000a96:	fb04 f300 	mul.w	r3, r4, r0
 8000a9a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000a9e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000aa2:	00b6      	lsls	r6, r6, #2
 8000aa4:	fbb3 f3f6 	udiv	r3, r3, r6
 8000aa8:	fbb3 f3f8 	udiv	r3, r3, r8
 8000aac:	011e      	lsls	r6, r3, #4
 8000aae:	f7ff ff83 	bl	80009b8 <HAL_RCC_GetPCLK2Freq>
 8000ab2:	4360      	muls	r0, r4
 8000ab4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	fbb0 f7f3 	udiv	r7, r0, r3
 8000abe:	f7ff ff7b 	bl	80009b8 <HAL_RCC_GetPCLK2Freq>
 8000ac2:	4360      	muls	r0, r4
 8000ac4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ace:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ad2:	fb08 7313 	mls	r3, r8, r3, r7
 8000ad6:	011b      	lsls	r3, r3, #4
 8000ad8:	3332      	adds	r3, #50	; 0x32
 8000ada:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ade:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000ae2:	f7ff ff69 	bl	80009b8 <HAL_RCC_GetPCLK2Freq>
 8000ae6:	4360      	muls	r0, r4
 8000ae8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000aec:	0092      	lsls	r2, r2, #2
 8000aee:	fbb0 faf2 	udiv	sl, r0, r2
 8000af2:	f7ff ff61 	bl	80009b8 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000af6:	4360      	muls	r0, r4
 8000af8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b02:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b06:	fb08 a313 	mls	r3, r8, r3, sl
 8000b0a:	011b      	lsls	r3, r3, #4
 8000b0c:	3332      	adds	r3, #50	; 0x32
 8000b0e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	433b      	orrs	r3, r7
 8000b18:	4433      	add	r3, r6
 8000b1a:	60ab      	str	r3, [r5, #8]
 8000b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b20:	f7ff ff3a 	bl	8000998 <HAL_RCC_GetPCLK1Freq>
 8000b24:	fb04 f300 	mul.w	r3, r4, r0
 8000b28:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000b2c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000b30:	00b6      	lsls	r6, r6, #2
 8000b32:	fbb3 f3f6 	udiv	r3, r3, r6
 8000b36:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b3a:	011e      	lsls	r6, r3, #4
 8000b3c:	f7ff ff2c 	bl	8000998 <HAL_RCC_GetPCLK1Freq>
 8000b40:	4360      	muls	r0, r4
 8000b42:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	fbb0 f7f3 	udiv	r7, r0, r3
 8000b4c:	f7ff ff24 	bl	8000998 <HAL_RCC_GetPCLK1Freq>
 8000b50:	4360      	muls	r0, r4
 8000b52:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b5c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b60:	fb08 7313 	mls	r3, r8, r3, r7
 8000b64:	011b      	lsls	r3, r3, #4
 8000b66:	3332      	adds	r3, #50	; 0x32
 8000b68:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b6c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000b70:	f7ff ff12 	bl	8000998 <HAL_RCC_GetPCLK1Freq>
 8000b74:	4360      	muls	r0, r4
 8000b76:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000b7a:	0092      	lsls	r2, r2, #2
 8000b7c:	fbb0 faf2 	udiv	sl, r0, r2
 8000b80:	f7ff ff0a 	bl	8000998 <HAL_RCC_GetPCLK1Freq>
 8000b84:	e7b7      	b.n	8000af6 <UART_SetConfig+0xa6>
 8000b86:	bf00      	nop
 8000b88:	40013800 	.word	0x40013800

08000b8c <HAL_UART_Init>:
{
 8000b8c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000b8e:	4604      	mov	r4, r0
 8000b90:	b340      	cbz	r0, 8000be4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000b92:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000b96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b9a:	b91b      	cbnz	r3, 8000ba4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000b9c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000ba0:	f001 fce0 	bl	8002564 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000ba4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000ba6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000ba8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000bac:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000bae:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000bb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bb4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000bb6:	f7ff ff4b 	bl	8000a50 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bba:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000bbc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bbe:	691a      	ldr	r2, [r3, #16]
 8000bc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000bc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000bcc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000bce:	68da      	ldr	r2, [r3, #12]
 8000bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000bd4:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000bd6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000bd8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000bda:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000bde:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000be2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000be4:	2001      	movs	r0, #1
}
 8000be6:	bd10      	pop	{r4, pc}

08000be8 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <disk_status+0x10>)
 8000bea:	181a      	adds	r2, r3, r0
 8000bec:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	7a10      	ldrb	r0, [r2, #8]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	4718      	bx	r3
 8000bf8:	20000260 	.word	0x20000260

08000bfc <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <disk_initialize+0x1c>)
 8000bfe:	5c1a      	ldrb	r2, [r3, r0]
 8000c00:	b942      	cbnz	r2, 8000c14 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8000c02:	2201      	movs	r2, #1
 8000c04:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8000c06:	181a      	adds	r2, r3, r0
 8000c08:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	7a10      	ldrb	r0, [r2, #8]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4718      	bx	r3
  }
  return stat;
}
 8000c14:	2000      	movs	r0, #0
 8000c16:	4770      	bx	lr
 8000c18:	20000260 	.word	0x20000260

08000c1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8000c1c:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8000c1e:	4c05      	ldr	r4, [pc, #20]	; (8000c34 <disk_read+0x18>)
 8000c20:	1825      	adds	r5, r4, r0
 8000c22:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8000c26:	6860      	ldr	r0, [r4, #4]
 8000c28:	6884      	ldr	r4, [r0, #8]
 8000c2a:	7a28      	ldrb	r0, [r5, #8]
 8000c2c:	46a4      	mov	ip, r4
  return res;
}
 8000c2e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8000c30:	4760      	bx	ip
 8000c32:	bf00      	nop
 8000c34:	20000260 	.word	0x20000260

08000c38 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8000c38:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8000c3a:	4c05      	ldr	r4, [pc, #20]	; (8000c50 <disk_write+0x18>)
 8000c3c:	1825      	adds	r5, r4, r0
 8000c3e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8000c42:	6860      	ldr	r0, [r4, #4]
 8000c44:	68c4      	ldr	r4, [r0, #12]
 8000c46:	7a28      	ldrb	r0, [r5, #8]
 8000c48:	46a4      	mov	ip, r4
  return res;
}
 8000c4a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8000c4c:	4760      	bx	ip
 8000c4e:	bf00      	nop
 8000c50:	20000260 	.word	0x20000260

08000c54 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8000c54:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <disk_ioctl+0x14>)
 8000c58:	181c      	adds	r4, r3, r0
 8000c5a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	7a20      	ldrb	r0, [r4, #8]
 8000c62:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8000c64:	bc10      	pop	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8000c66:	4718      	bx	r3
 8000c68:	20000260 	.word	0x20000260

08000c6c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8000c6c:	3801      	subs	r0, #1
 8000c6e:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8000c70:	4291      	cmp	r1, r2
 8000c72:	d100      	bne.n	8000c76 <mem_cpy+0xa>
		*d++ = *s++;
}
 8000c74:	4770      	bx	lr
		*d++ = *s++;
 8000c76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c7a:	f800 3f01 	strb.w	r3, [r0, #1]!
 8000c7e:	e7f7      	b.n	8000c70 <mem_cpy+0x4>

08000c80 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8000c80:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8000c82:	4290      	cmp	r0, r2
 8000c84:	d100      	bne.n	8000c88 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8000c86:	4770      	bx	lr
		*d++ = (BYTE)val;
 8000c88:	f800 1b01 	strb.w	r1, [r0], #1
 8000c8c:	e7f9      	b.n	8000c82 <mem_set+0x2>
	...

08000c90 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8000c90:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8000c92:	2400      	movs	r4, #0
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8000c94:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <chk_lock+0x68>)
				Files[i].clu == dp->sclust &&
 8000c9a:	4665      	mov	r5, ip
				Files[i].idx == dp->index) break;
 8000c9c:	4660      	mov	r0, ip
	for (i = be = 0; i < _FS_LOCK; i++) {
 8000c9e:	4622      	mov	r2, r4
 8000ca0:	469e      	mov	lr, r3
				Files[i].clu == dp->sclust &&
 8000ca2:	3508      	adds	r5, #8
				Files[i].idx == dp->index) break;
 8000ca4:	3006      	adds	r0, #6
		if (Files[i].fs) {	/* Existing entry */
 8000ca6:	681e      	ldr	r6, [r3, #0]
 8000ca8:	b1b6      	cbz	r6, 8000cd8 <chk_lock+0x48>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8000caa:	f8dc 7000 	ldr.w	r7, [ip]
 8000cae:	42be      	cmp	r6, r7
 8000cb0:	d113      	bne.n	8000cda <chk_lock+0x4a>
 8000cb2:	685f      	ldr	r7, [r3, #4]
 8000cb4:	682e      	ldr	r6, [r5, #0]
 8000cb6:	42b7      	cmp	r7, r6
 8000cb8:	d10f      	bne.n	8000cda <chk_lock+0x4a>
				Files[i].clu == dp->sclust &&
 8000cba:	891f      	ldrh	r7, [r3, #8]
 8000cbc:	8806      	ldrh	r6, [r0, #0]
 8000cbe:	42b7      	cmp	r7, r6
 8000cc0:	d10b      	bne.n	8000cda <chk_lock+0x4a>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8000cc2:	b9b9      	cbnz	r1, 8000cf4 <chk_lock+0x64>
 8000cc4:	230c      	movs	r3, #12
 8000cc6:	fb03 e202 	mla	r2, r3, r2, lr
 8000cca:	8953      	ldrh	r3, [r2, #10]
 8000ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cd0:	bf14      	ite	ne
 8000cd2:	2000      	movne	r0, #0
 8000cd4:	2010      	moveq	r0, #16
 8000cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8000cd8:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8000cda:	3201      	adds	r2, #1
 8000cdc:	2a02      	cmp	r2, #2
 8000cde:	f103 030c 	add.w	r3, r3, #12
 8000ce2:	d1e0      	bne.n	8000ca6 <chk_lock+0x16>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8000ce4:	b10c      	cbz	r4, 8000cea <chk_lock+0x5a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8000cea:	2902      	cmp	r1, #2
 8000cec:	bf0c      	ite	eq
 8000cee:	2000      	moveq	r0, #0
 8000cf0:	2012      	movne	r0, #18
 8000cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8000cf4:	2010      	movs	r0, #16
 8000cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf8:	20000044 	.word	0x20000044

08000cfc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8000cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d00:	4c28      	ldr	r4, [pc, #160]	; (8000da4 <inc_lock+0xa8>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8000d02:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8000d06:	f8d3 e000 	ldr.w	lr, [r3]
{
 8000d0a:	4688      	mov	r8, r1
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4622      	mov	r2, r4
			Files[i].clu == dp->sclust &&
 8000d10:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
			Files[i].idx == dp->index) break;
 8000d14:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
			Files[i].clu == dp->sclust &&
 8000d18:	3508      	adds	r5, #8
			Files[i].idx == dp->index) break;
 8000d1a:	3606      	adds	r6, #6
		if (Files[i].fs == dp->fs &&
 8000d1c:	6827      	ldr	r7, [r4, #0]
 8000d1e:	4577      	cmp	r7, lr
 8000d20:	d108      	bne.n	8000d34 <inc_lock+0x38>
 8000d22:	6829      	ldr	r1, [r5, #0]
 8000d24:	6867      	ldr	r7, [r4, #4]
 8000d26:	428f      	cmp	r7, r1
 8000d28:	d104      	bne.n	8000d34 <inc_lock+0x38>
			Files[i].clu == dp->sclust &&
 8000d2a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8000d2e:	8837      	ldrh	r7, [r6, #0]
 8000d30:	45bc      	cmp	ip, r7
 8000d32:	d028      	beq.n	8000d86 <inc_lock+0x8a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8000d34:	3301      	adds	r3, #1
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	f104 040c 	add.w	r4, r4, #12
 8000d3c:	d1ee      	bne.n	8000d1c <inc_lock+0x20>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8000d3e:	6813      	ldr	r3, [r2, #0]
 8000d40:	b113      	cbz	r3, 8000d48 <inc_lock+0x4c>
 8000d42:	68d3      	ldr	r3, [r2, #12]
 8000d44:	bb53      	cbnz	r3, 8000d9c <inc_lock+0xa0>
 8000d46:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8000d48:	240c      	movs	r4, #12
 8000d4a:	435c      	muls	r4, r3
 8000d4c:	1915      	adds	r5, r2, r4
 8000d4e:	f842 e004 	str.w	lr, [r2, r4]
		Files[i].clu = dp->sclust;
 8000d52:	f241 0408 	movw	r4, #4104	; 0x1008
 8000d56:	5904      	ldr	r4, [r0, r4]
 8000d58:	606c      	str	r4, [r5, #4]
		Files[i].idx = dp->index;
 8000d5a:	f241 0406 	movw	r4, #4102	; 0x1006
 8000d5e:	5b00      	ldrh	r0, [r0, r4]
 8000d60:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 8000d62:	2000      	movs	r0, #0
 8000d64:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8000d66:	f1b8 0f00 	cmp.w	r8, #0
 8000d6a:	d114      	bne.n	8000d96 <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8000d6c:	210c      	movs	r1, #12
 8000d6e:	fb01 2103 	mla	r1, r1, r3, r2
 8000d72:	8949      	ldrh	r1, [r1, #10]
 8000d74:	3101      	adds	r1, #1
 8000d76:	b289      	uxth	r1, r1
 8000d78:	200c      	movs	r0, #12
 8000d7a:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 8000d7e:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8000d80:	8151      	strh	r1, [r2, #10]
	return i + 1;
 8000d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8000d86:	f1b8 0f00 	cmp.w	r8, #0
 8000d8a:	d0ef      	beq.n	8000d6c <inc_lock+0x70>
 8000d8c:	210c      	movs	r1, #12
 8000d8e:	fb01 2103 	mla	r1, r1, r3, r2
 8000d92:	8949      	ldrh	r1, [r1, #10]
 8000d94:	b911      	cbnz	r1, 8000d9c <inc_lock+0xa0>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8000d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9a:	e7ed      	b.n	8000d78 <inc_lock+0x7c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000da2:	bf00      	nop
 8000da4:	20000044 	.word	0x20000044

08000da8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8000da8:	4602      	mov	r2, r0
 8000daa:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8000dae:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8000db0:	01c3      	lsls	r3, r0, #7
 8000db2:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8000db6:	f812 0b01 	ldrb.w	r0, [r2], #1
 8000dba:	4403      	add	r3, r0
 8000dbc:	428a      	cmp	r2, r1
 8000dbe:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000dc2:	d1f5      	bne.n	8000db0 <sum_sfn+0x8>
	return sum;
}
 8000dc4:	4770      	bx	lr

08000dc6 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8000dc6:	6802      	ldr	r2, [r0, #0]
{
 8000dc8:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8000dca:	b152      	cbz	r2, 8000de2 <get_ldnumber+0x1c>
 8000dcc:	4611      	mov	r1, r2
 8000dce:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8000dd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000dd4:	2c1f      	cmp	r4, #31
 8000dd6:	d90c      	bls.n	8000df2 <get_ldnumber+0x2c>
 8000dd8:	2c3a      	cmp	r4, #58	; 0x3a
 8000dda:	d1f8      	bne.n	8000dce <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8000ddc:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d002      	beq.n	8000de8 <get_ldnumber+0x22>
	int vol = -1;
 8000de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8000de6:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8000de8:	7812      	ldrb	r2, [r2, #0]
 8000dea:	2a30      	cmp	r2, #48	; 0x30
 8000dec:	d1f9      	bne.n	8000de2 <get_ldnumber+0x1c>
					*path = ++tt;
 8000dee:	3301      	adds	r3, #1
 8000df0:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8000df2:	2000      	movs	r0, #0
 8000df4:	bd10      	pop	{r4, pc}

08000df6 <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 8000df6:	7eca      	ldrb	r2, [r1, #27]
 8000df8:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 8000dfa:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8000dfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8000e00:	bf01      	itttt	eq
 8000e02:	7d48      	ldrbeq	r0, [r1, #21]
 8000e04:	7d0a      	ldrbeq	r2, [r1, #20]
 8000e06:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8000e0a:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	4770      	bx	lr

08000e12 <sync_window.part.1>:
		wsect = fs->winsect;	/* Current sector number */
 8000e12:	f241 032c 	movw	r3, #4140	; 0x102c
FRESULT sync_window (
 8000e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8000e1a:	f241 0701 	movw	r7, #4097	; 0x1001
		wsect = fs->winsect;	/* Current sector number */
 8000e1e:	58c5      	ldr	r5, [r0, r3]
FRESULT sync_window (
 8000e20:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8000e22:	4601      	mov	r1, r0
 8000e24:	2301      	movs	r3, #1
 8000e26:	462a      	mov	r2, r5
 8000e28:	5dc0      	ldrb	r0, [r0, r7]
 8000e2a:	f7ff ff05 	bl	8000c38 <disk_write>
 8000e2e:	bb08      	cbnz	r0, 8000e74 <sync_window.part.1+0x62>
			fs->wflag = 0;
 8000e30:	f241 0304 	movw	r3, #4100	; 0x1004
 8000e34:	54e0      	strb	r0, [r4, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8000e36:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	f241 0318 	movw	r3, #4120	; 0x1018
 8000e40:	58e1      	ldr	r1, [r4, r3]
 8000e42:	1aaa      	subs	r2, r5, r2
 8000e44:	428a      	cmp	r2, r1
 8000e46:	d302      	bcc.n	8000e4e <sync_window.part.1+0x3c>
	FRESULT res = FR_OK;
 8000e48:	2000      	movs	r0, #0
 8000e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8000e4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8000e52:	f814 8002 	ldrb.w	r8, [r4, r2]
					wsect += fs->fsize;
 8000e56:	18e6      	adds	r6, r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8000e58:	f1b8 0f01 	cmp.w	r8, #1
 8000e5c:	d9f4      	bls.n	8000e48 <sync_window.part.1+0x36>
					wsect += fs->fsize;
 8000e5e:	6833      	ldr	r3, [r6, #0]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8000e60:	4621      	mov	r1, r4
					wsect += fs->fsize;
 8000e62:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8000e64:	462a      	mov	r2, r5
 8000e66:	2301      	movs	r3, #1
 8000e68:	5de0      	ldrb	r0, [r4, r7]
 8000e6a:	f7ff fee5 	bl	8000c38 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8000e6e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8000e72:	e7f1      	b.n	8000e58 <sync_window.part.1+0x46>
			res = FR_DISK_ERR;
 8000e74:	2001      	movs	r0, #1
}
 8000e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000e7a <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8000e7a:	f241 0304 	movw	r3, #4100	; 0x1004
 8000e7e:	5cc3      	ldrb	r3, [r0, r3]
 8000e80:	b10b      	cbz	r3, 8000e86 <sync_window+0xc>
 8000e82:	f7ff bfc6 	b.w	8000e12 <sync_window.part.1>
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	4770      	bx	lr

08000e8a <move_window>:
{
 8000e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8000e8c:	f241 072c 	movw	r7, #4140	; 0x102c
 8000e90:	59c3      	ldr	r3, [r0, r7]
{
 8000e92:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8000e94:	428b      	cmp	r3, r1
{
 8000e96:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8000e98:	d013      	beq.n	8000ec2 <move_window+0x38>
		res = sync_window(fs);		/* Write-back changes */
 8000e9a:	f7ff ffee 	bl	8000e7a <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	b968      	cbnz	r0, 8000ebe <move_window+0x34>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8000ea2:	f241 0001 	movw	r0, #4097	; 0x1001
 8000ea6:	462a      	mov	r2, r5
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	4631      	mov	r1, r6
 8000eac:	5c30      	ldrb	r0, [r6, r0]
 8000eae:	f7ff feb5 	bl	8000c1c <disk_read>
 8000eb2:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8000eb4:	bf1c      	itt	ne
 8000eb6:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8000eba:	2401      	movne	r4, #1
			fs->winsect = sector;
 8000ebc:	51f5      	str	r5, [r6, r7]
}
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FRESULT res = FR_OK;
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	e7fb      	b.n	8000ebe <move_window+0x34>
	...

08000ec8 <check_fs>:
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f241 0304 	movw	r3, #4100	; 0x1004
{
 8000ece:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8000ed0:	54c2      	strb	r2, [r0, r3]
 8000ed2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ed6:	f241 032c 	movw	r3, #4140	; 0x102c
 8000eda:	50c2      	str	r2, [r0, r3]
{
 8000edc:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8000ede:	f7ff ffd4 	bl	8000e8a <move_window>
 8000ee2:	b9c0      	cbnz	r0, 8000f16 <check_fs+0x4e>
		return 3;

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8000ee4:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8000ee8:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8000eec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000ef0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d110      	bne.n	8000f1a <check_fs+0x52>
		return 2;

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8000ef8:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8000efc:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <check_fs+0x58>)
 8000efe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00a      	beq.n	8000f1c <check_fs+0x54>
		return 0;
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8000f06:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8000f0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8000f0e:	1a80      	subs	r0, r0, r2
 8000f10:	bf18      	it	ne
 8000f12:	2001      	movne	r0, #1
 8000f14:	bd10      	pop	{r4, pc}
 8000f16:	2003      	movs	r0, #3
 8000f18:	bd10      	pop	{r4, pc}
		return 2;
 8000f1a:	2002      	movs	r0, #2
		return 0;

	return 1;
}
 8000f1c:	bd10      	pop	{r4, pc}
 8000f1e:	bf00      	nop
 8000f20:	00544146 	.word	0x00544146

08000f24 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8000f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8000f28:	2300      	movs	r3, #0
{
 8000f2a:	4606      	mov	r6, r0
	*rfs = 0;
 8000f2c:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
 8000f2e:	4608      	mov	r0, r1
{
 8000f30:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8000f32:	f7ff ff48 	bl	8000dc6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8000f36:	1e07      	subs	r7, r0, #0
 8000f38:	f2c0 8162 	blt.w	8001200 <find_volume+0x2dc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8000f3c:	4bb4      	ldr	r3, [pc, #720]	; (8001210 <find_volume+0x2ec>)
 8000f3e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8000f42:	2c00      	cmp	r4, #0
 8000f44:	f000 815e 	beq.w	8001204 <find_volume+0x2e0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8000f48:	6034      	str	r4, [r6, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8000f4a:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
 8000f4e:	7833      	ldrb	r3, [r6, #0]
 8000f50:	b183      	cbz	r3, 8000f74 <find_volume+0x50>
		stat = disk_status(fs->drv);
 8000f52:	f241 0301 	movw	r3, #4097	; 0x1001
 8000f56:	5ce0      	ldrb	r0, [r4, r3]
 8000f58:	f7ff fe46 	bl	8000be8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8000f5c:	07c1      	lsls	r1, r0, #31
 8000f5e:	d409      	bmi.n	8000f74 <find_volume+0x50>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8000f60:	2d00      	cmp	r5, #0
 8000f62:	f000 8151 	beq.w	8001208 <find_volume+0x2e4>
 8000f66:	f010 0004 	ands.w	r0, r0, #4
 8000f6a:	d000      	beq.n	8000f6e <find_volume+0x4a>
				return FR_WRITE_PROTECTED;
 8000f6c:	200a      	movs	r0, #10
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
 8000f6e:	b004      	add	sp, #16
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8000f74:	2300      	movs	r3, #0
 8000f76:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8000f78:	f241 0301 	movw	r3, #4097	; 0x1001
 8000f7c:	b2f8      	uxtb	r0, r7
 8000f7e:	54e0      	strb	r0, [r4, r3]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8000f80:	f7ff fe3c 	bl	8000bfc <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8000f84:	07c2      	lsls	r2, r0, #31
 8000f86:	f100 8141 	bmi.w	800120c <find_volume+0x2e8>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8000f8a:	b10d      	cbz	r5, 8000f90 <find_volume+0x6c>
 8000f8c:	0743      	lsls	r3, r0, #29
 8000f8e:	d4ed      	bmi.n	8000f6c <find_volume+0x48>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8000f90:	f241 0301 	movw	r3, #4097	; 0x1001
 8000f94:	f241 050a 	movw	r5, #4106	; 0x100a
 8000f98:	2102      	movs	r1, #2
 8000f9a:	1962      	adds	r2, r4, r5
 8000f9c:	5ce0      	ldrb	r0, [r4, r3]
 8000f9e:	f7ff fe59 	bl	8000c54 <disk_ioctl>
 8000fa2:	4607      	mov	r7, r0
 8000fa4:	b108      	cbz	r0, 8000faa <find_volume+0x86>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	e7e1      	b.n	8000f6e <find_volume+0x4a>
 8000faa:	5b63      	ldrh	r3, [r4, r5]
 8000fac:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8000fb6:	d8f6      	bhi.n	8000fa6 <find_volume+0x82>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8000fb8:	4601      	mov	r1, r0
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f7ff ff84 	bl	8000ec8 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8000fc0:	2801      	cmp	r0, #1
 8000fc2:	f040 80ff 	bne.w	80011c4 <find_volume+0x2a0>
 8000fc6:	4638      	mov	r0, r7
 8000fc8:	f504 72e3 	add.w	r2, r4, #454	; 0x1c6
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8000fcc:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 8000fd0:	b103      	cbz	r3, 8000fd4 <find_volume+0xb0>
 8000fd2:	6813      	ldr	r3, [r2, #0]
 8000fd4:	f84d 3020 	str.w	r3, [sp, r0, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8000fd8:	3001      	adds	r0, #1
 8000fda:	2804      	cmp	r0, #4
 8000fdc:	f102 0210 	add.w	r2, r2, #16
 8000fe0:	d1f4      	bne.n	8000fcc <find_volume+0xa8>
 8000fe2:	2700      	movs	r7, #0
			bsect = br[i];
 8000fe4:	f85d 5027 	ldr.w	r5, [sp, r7, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8000fe8:	2d00      	cmp	r5, #0
 8000fea:	f000 80e3 	beq.w	80011b4 <find_volume+0x290>
 8000fee:	4629      	mov	r1, r5
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f7ff ff69 	bl	8000ec8 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8000ff6:	2800      	cmp	r0, #0
 8000ff8:	f040 80dd 	bne.w	80011b6 <find_volume+0x292>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8000ffc:	7b23      	ldrb	r3, [r4, #12]
 8000ffe:	7ae0      	ldrb	r0, [r4, #11]
 8001000:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001004:	f241 030a 	movw	r3, #4106	; 0x100a
 8001008:	5ae3      	ldrh	r3, [r4, r3]
 800100a:	4283      	cmp	r3, r0
 800100c:	f040 80de 	bne.w	80011cc <find_volume+0x2a8>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8001010:	7de3      	ldrb	r3, [r4, #23]
 8001012:	7da1      	ldrb	r1, [r4, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8001014:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	fs->fsize = fasize;
 8001018:	f241 0318 	movw	r3, #4120	; 0x1018
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800101c:	bf08      	it	eq
 800101e:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 8001020:	50e1      	str	r1, [r4, r3]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8001022:	f241 0303 	movw	r3, #4099	; 0x1003
 8001026:	f894 e010 	ldrb.w	lr, [r4, #16]
 800102a:	f804 e003 	strb.w	lr, [r4, r3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800102e:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8001032:	2b01      	cmp	r3, #1
 8001034:	f200 80ca 	bhi.w	80011cc <find_volume+0x2a8>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8001038:	f241 0302 	movw	r3, #4098	; 0x1002
 800103c:	7b67      	ldrb	r7, [r4, #13]
 800103e:	54e7      	strb	r7, [r4, r3]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8001040:	2f00      	cmp	r7, #0
 8001042:	f000 80c3 	beq.w	80011cc <find_volume+0x2a8>
 8001046:	1e7b      	subs	r3, r7, #1
 8001048:	423b      	tst	r3, r7
 800104a:	f040 80bf 	bne.w	80011cc <find_volume+0x2a8>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800104e:	7ca3      	ldrb	r3, [r4, #18]
 8001050:	f894 8011 	ldrb.w	r8, [r4, #17]
 8001054:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
 8001058:	f241 0308 	movw	r3, #4104	; 0x1008
 800105c:	f824 8003 	strh.w	r8, [r4, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8001060:	0943      	lsrs	r3, r0, #5
 8001062:	fbb8 f2f3 	udiv	r2, r8, r3
 8001066:	fb03 8312 	mls	r3, r3, r2, r8
 800106a:	b29b      	uxth	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	f040 80ad 	bne.w	80011cc <find_volume+0x2a8>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8001072:	f894 c014 	ldrb.w	ip, [r4, #20]
 8001076:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8001078:	f894 900f 	ldrb.w	r9, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800107c:	ea53 230c 	orrs.w	r3, r3, ip, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8001080:	f894 c00e 	ldrb.w	ip, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8001084:	bf08      	it	eq
 8001086:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8001088:	ea5c 2c09 	orrs.w	ip, ip, r9, lsl #8
 800108c:	f000 809e 	beq.w	80011cc <find_volume+0x2a8>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8001090:	fb01 fe0e 	mul.w	lr, r1, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8001094:	b292      	uxth	r2, r2
 8001096:	4462      	add	r2, ip
 8001098:	4472      	add	r2, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800109a:	4293      	cmp	r3, r2
 800109c:	f0c0 8096 	bcc.w	80011cc <find_volume+0x2a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	fbb3 f3f7 	udiv	r3, r3, r7
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 8090 	beq.w	80011cc <find_volume+0x2a8>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80010ac:	f640 77f5 	movw	r7, #4085	; 0xff5
 80010b0:	42bb      	cmp	r3, r7
 80010b2:	f240 808f 	bls.w	80011d4 <find_volume+0x2b0>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80010b6:	f64f 77f5 	movw	r7, #65525	; 0xfff5
 80010ba:	42bb      	cmp	r3, r7
 80010bc:	bf94      	ite	ls
 80010be:	2702      	movls	r7, #2
 80010c0:	2703      	movhi	r7, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80010c2:	f241 0914 	movw	r9, #4116	; 0x1014
 80010c6:	3302      	adds	r3, #2
 80010c8:	f844 3009 	str.w	r3, [r4, r9]
	fs->volbase = bsect;								/* Volume start sector */
 80010cc:	f241 091c 	movw	r9, #4124	; 0x101c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80010d0:	44ac      	add	ip, r5
	fs->volbase = bsect;								/* Volume start sector */
 80010d2:	f844 5009 	str.w	r5, [r4, r9]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80010d6:	f504 5981 	add.w	r9, r4, #4128	; 0x1020
 80010da:	f8c9 c000 	str.w	ip, [r9]
	fs->database = bsect + sysect;						/* Data start sector */
 80010de:	f241 0928 	movw	r9, #4136	; 0x1028
 80010e2:	442a      	add	r2, r5
	if (fmt == FS_FAT32) {
 80010e4:	2f03      	cmp	r7, #3
	fs->database = bsect + sysect;						/* Data start sector */
 80010e6:	f844 2009 	str.w	r2, [r4, r9]
	if (fmt == FS_FAT32) {
 80010ea:	d175      	bne.n	80011d8 <find_volume+0x2b4>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80010ec:	f1b8 0f00 	cmp.w	r8, #0
 80010f0:	d16c      	bne.n	80011cc <find_volume+0x2a8>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80010f2:	f241 0e24 	movw	lr, #4132	; 0x1024
 80010f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80010f8:	009b      	lsls	r3, r3, #2
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80010fa:	f844 200e 	str.w	r2, [r4, lr]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80010fe:	1e42      	subs	r2, r0, #1
 8001100:	4413      	add	r3, r2
 8001102:	fbb3 f0f0 	udiv	r0, r3, r0
 8001106:	4281      	cmp	r1, r0
 8001108:	d360      	bcc.n	80011cc <find_volume+0x2a8>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800110e:	f241 0910 	movw	r9, #4112	; 0x1010
 8001112:	f241 080c 	movw	r8, #4108	; 0x100c
 8001116:	f844 3009 	str.w	r3, [r4, r9]
	fs->fsi_flag = 0x80;
 800111a:	f241 0a05 	movw	sl, #4101	; 0x1005
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800111e:	f844 3008 	str.w	r3, [r4, r8]
	fs->fsi_flag = 0x80;
 8001122:	2380      	movs	r3, #128	; 0x80
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8001124:	2f03      	cmp	r7, #3
	fs->fsi_flag = 0x80;
 8001126:	f804 300a 	strb.w	r3, [r4, sl]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800112a:	d12d      	bne.n	8001188 <find_volume+0x264>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800112c:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8001130:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001134:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001138:	2b01      	cmp	r3, #1
 800113a:	d125      	bne.n	8001188 <find_volume+0x264>
		&& move_window(fs, bsect + 1) == FR_OK)
 800113c:	1c69      	adds	r1, r5, #1
 800113e:	4620      	mov	r0, r4
 8001140:	f7ff fea3 	bl	8000e8a <move_window>
 8001144:	bb00      	cbnz	r0, 8001188 <find_volume+0x264>
		fs->fsi_flag = 0;
 8001146:	f804 000a 	strb.w	r0, [r4, sl]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800114a:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 800114e:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8001152:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001156:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800115a:	4293      	cmp	r3, r2
 800115c:	d114      	bne.n	8001188 <find_volume+0x264>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800115e:	6822      	ldr	r2, [r4, #0]
 8001160:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <find_volume+0x2f0>)
 8001162:	429a      	cmp	r2, r3
 8001164:	d110      	bne.n	8001188 <find_volume+0x264>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8001166:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 800116a:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 800116e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001172:	3320      	adds	r3, #32
 8001174:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8001176:	bf01      	itttt	eq
 8001178:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 800117c:	f844 3009 	streq.w	r3, [r4, r9]
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8001180:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8001184:	f844 3008 	streq.w	r3, [r4, r8]
	fs->id = ++Fsid;	/* File system mount ID */
 8001188:	4a23      	ldr	r2, [pc, #140]	; (8001218 <find_volume+0x2f4>)
	fs->fs_type = fmt;	/* FAT sub-type */
 800118a:	7037      	strb	r7, [r6, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800118c:	8813      	ldrh	r3, [r2, #0]
 800118e:	2000      	movs	r0, #0
 8001190:	3301      	adds	r3, #1
 8001192:	b29b      	uxth	r3, r3
 8001194:	8013      	strh	r3, [r2, #0]
 8001196:	f241 0206 	movw	r2, #4102	; 0x1006
 800119a:	52a3      	strh	r3, [r4, r2]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <find_volume+0x2f8>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4294      	cmp	r4, r2
 80011a2:	bf04      	itt	eq
 80011a4:	2200      	moveq	r2, #0
 80011a6:	601a      	streq	r2, [r3, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	4294      	cmp	r4, r2
 80011ac:	f47f aedf 	bne.w	8000f6e <find_volume+0x4a>
 80011b0:	60d8      	str	r0, [r3, #12]
 80011b2:	e6dc      	b.n	8000f6e <find_volume+0x4a>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80011b4:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80011b6:	3701      	adds	r7, #1
 80011b8:	2f04      	cmp	r7, #4
 80011ba:	f47f af13 	bne.w	8000fe4 <find_volume+0xc0>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80011be:	2803      	cmp	r0, #3
 80011c0:	d104      	bne.n	80011cc <find_volume+0x2a8>
 80011c2:	e6f0      	b.n	8000fa6 <find_volume+0x82>
 80011c4:	2803      	cmp	r0, #3
 80011c6:	f43f aeee 	beq.w	8000fa6 <find_volume+0x82>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80011ca:	b108      	cbz	r0, 80011d0 <find_volume+0x2ac>
 80011cc:	200d      	movs	r0, #13
 80011ce:	e6ce      	b.n	8000f6e <find_volume+0x4a>
	bsect = 0;
 80011d0:	4605      	mov	r5, r0
 80011d2:	e713      	b.n	8000ffc <find_volume+0xd8>
	fmt = FS_FAT12;
 80011d4:	2701      	movs	r7, #1
 80011d6:	e774      	b.n	80010c2 <find_volume+0x19e>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80011d8:	f1b8 0f00 	cmp.w	r8, #0
 80011dc:	d0f6      	beq.n	80011cc <find_volume+0x2a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80011de:	eb0e 020c 	add.w	r2, lr, ip
 80011e2:	f241 0e24 	movw	lr, #4132	; 0x1024
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80011e6:	2f02      	cmp	r7, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80011e8:	f844 200e 	str.w	r2, [r4, lr]
 80011ec:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80011f0:	bf1b      	ittet	ne
 80011f2:	18d2      	addne	r2, r2, r3
 80011f4:	f003 0301 	andne.w	r3, r3, #1
 80011f8:	4613      	moveq	r3, r2
 80011fa:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 80011fe:	e77e      	b.n	80010fe <find_volume+0x1da>
	if (vol < 0) return FR_INVALID_DRIVE;
 8001200:	200b      	movs	r0, #11
 8001202:	e6b4      	b.n	8000f6e <find_volume+0x4a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8001204:	200c      	movs	r0, #12
 8001206:	e6b2      	b.n	8000f6e <find_volume+0x4a>
			return FR_OK;				/* The file system object is valid */
 8001208:	4628      	mov	r0, r5
 800120a:	e6b0      	b.n	8000f6e <find_volume+0x4a>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800120c:	2003      	movs	r0, #3
 800120e:	e6ae      	b.n	8000f6e <find_volume+0x4a>
 8001210:	20000040 	.word	0x20000040
 8001214:	41615252 	.word	0x41615252
 8001218:	2000005c 	.word	0x2000005c
 800121c:	20000044 	.word	0x20000044

08001220 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001220:	f241 0314 	movw	r3, #4116	; 0x1014
 8001224:	58c3      	ldr	r3, [r0, r3]
	clst -= 2;
 8001226:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001228:	3b02      	subs	r3, #2
 800122a:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 800122c:	bf3f      	itttt	cc
 800122e:	f241 0302 	movwcc	r3, #4098	; 0x1002
 8001232:	f241 0228 	movwcc	r2, #4136	; 0x1028
 8001236:	5cc3      	ldrbcc	r3, [r0, r3]
 8001238:	5880      	ldrcc	r0, [r0, r2]
 800123a:	bf34      	ite	cc
 800123c:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001240:	2000      	movcs	r0, #0
}
 8001242:	4770      	bx	lr

08001244 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001244:	2901      	cmp	r1, #1
{
 8001246:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800124a:	4605      	mov	r5, r0
 800124c:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800124e:	f240 8082 	bls.w	8001356 <get_fat+0x112>
 8001252:	f241 0314 	movw	r3, #4116	; 0x1014
 8001256:	58c3      	ldr	r3, [r0, r3]
 8001258:	4299      	cmp	r1, r3
 800125a:	d27c      	bcs.n	8001356 <get_fat+0x112>
		switch (fs->fs_type) {
 800125c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d039      	beq.n	80012da <get_fat+0x96>
 8001266:	2b03      	cmp	r3, #3
 8001268:	d052      	beq.n	8001310 <get_fat+0xcc>
 800126a:	2b01      	cmp	r3, #1
 800126c:	d173      	bne.n	8001356 <get_fat+0x112>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800126e:	f241 080a 	movw	r8, #4106	; 0x100a
 8001272:	f830 3008 	ldrh.w	r3, [r0, r8]
			bc = (UINT)clst; bc += bc / 2;
 8001276:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800127a:	fbb4 f3f3 	udiv	r3, r4, r3
 800127e:	f500 5981 	add.w	r9, r0, #4128	; 0x1020
 8001282:	f8d9 1000 	ldr.w	r1, [r9]
 8001286:	4419      	add	r1, r3
 8001288:	f7ff fdff 	bl	8000e8a <move_window>
 800128c:	b118      	cbz	r0, 8001296 <get_fat+0x52>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800128e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			wc = fs->win.d8[bc++ % SS(fs)];
 8001296:	f835 1008 	ldrh.w	r1, [r5, r8]
 800129a:	1c67      	adds	r7, r4, #1
 800129c:	fbb4 f3f1 	udiv	r3, r4, r1
 80012a0:	fb01 4413 	mls	r4, r1, r3, r4
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80012a4:	fbb7 f1f1 	udiv	r1, r7, r1
 80012a8:	f8d9 3000 	ldr.w	r3, [r9]
 80012ac:	4628      	mov	r0, r5
 80012ae:	4419      	add	r1, r3
			wc = fs->win.d8[bc++ % SS(fs)];
 80012b0:	5d2c      	ldrb	r4, [r5, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80012b2:	f7ff fdea 	bl	8000e8a <move_window>
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d1e9      	bne.n	800128e <get_fat+0x4a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80012ba:	f835 2008 	ldrh.w	r2, [r5, r8]
 80012be:	fbb7 f3f2 	udiv	r3, r7, r2
 80012c2:	fb02 7313 	mls	r3, r2, r3, r7
 80012c6:	5ce8      	ldrb	r0, [r5, r3]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80012c8:	07f3      	lsls	r3, r6, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80012ca:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80012ce:	bf4c      	ite	mi
 80012d0:	0900      	lsrmi	r0, r0, #4
 80012d2:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80012d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80012da:	f241 040a 	movw	r4, #4106	; 0x100a
 80012de:	5b03      	ldrh	r3, [r0, r4]
 80012e0:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 80012e4:	085b      	lsrs	r3, r3, #1
 80012e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80012ea:	6811      	ldr	r1, [r2, #0]
 80012ec:	4419      	add	r1, r3
 80012ee:	f7ff fdcc 	bl	8000e8a <move_window>
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d1cb      	bne.n	800128e <get_fat+0x4a>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80012f6:	5b2a      	ldrh	r2, [r5, r4]
 80012f8:	0076      	lsls	r6, r6, #1
 80012fa:	fbb6 f3f2 	udiv	r3, r6, r2
 80012fe:	fb02 6613 	mls	r6, r2, r3, r6
			val = LD_WORD(p);
 8001302:	19ab      	adds	r3, r5, r6
 8001304:	785b      	ldrb	r3, [r3, #1]
 8001306:	5da8      	ldrb	r0, [r5, r6]
 8001308:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800130c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001310:	f241 040a 	movw	r4, #4106	; 0x100a
 8001314:	5b03      	ldrh	r3, [r0, r4]
 8001316:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001320:	6811      	ldr	r1, [r2, #0]
 8001322:	4419      	add	r1, r3
 8001324:	f7ff fdb1 	bl	8000e8a <move_window>
 8001328:	2800      	cmp	r0, #0
 800132a:	d1b0      	bne.n	800128e <get_fat+0x4a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800132c:	5b2a      	ldrh	r2, [r5, r4]
 800132e:	00b6      	lsls	r6, r6, #2
 8001330:	fbb6 f3f2 	udiv	r3, r6, r2
 8001334:	fb02 6613 	mls	r6, r2, r3, r6
 8001338:	19ab      	adds	r3, r5, r6
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800133a:	7898      	ldrb	r0, [r3, #2]
 800133c:	78da      	ldrb	r2, [r3, #3]
 800133e:	0400      	lsls	r0, r0, #16
 8001340:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001344:	5daa      	ldrb	r2, [r5, r6]
 8001346:	785b      	ldrb	r3, [r3, #1]
 8001348:	4310      	orrs	r0, r2
 800134a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800134e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8001352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			val = 1;	/* Internal error */
 8001356:	2001      	movs	r0, #1
}
 8001358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800135c <dir_sdi>:
{
 800135c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	dp->index = (WORD)idx;	/* Current index */
 8001360:	f241 0306 	movw	r3, #4102	; 0x1006
{
 8001364:	4606      	mov	r6, r0
	dp->index = (WORD)idx;	/* Current index */
 8001366:	52f1      	strh	r1, [r6, r3]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8001368:	f241 0308 	movw	r3, #4104	; 0x1008
 800136c:	58c4      	ldr	r4, [r0, r3]
{
 800136e:	460d      	mov	r5, r1
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8001370:	2c01      	cmp	r4, #1
 8001372:	d102      	bne.n	800137a <dir_sdi+0x1e>
		return FR_INT_ERR;
 8001374:	2002      	movs	r0, #2
 8001376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800137a:	f241 0214 	movw	r2, #4116	; 0x1014
 800137e:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	589a      	ldr	r2, [r3, r2]
 8001386:	4294      	cmp	r4, r2
 8001388:	d2f4      	bcs.n	8001374 <dir_sdi+0x18>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800138a:	bb54      	cbnz	r4, 80013e2 <dir_sdi+0x86>
 800138c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001390:	7812      	ldrb	r2, [r2, #0]
 8001392:	2a03      	cmp	r2, #3
 8001394:	d103      	bne.n	800139e <dir_sdi+0x42>
		clst = dp->fs->dirbase;
 8001396:	f241 0224 	movw	r2, #4132	; 0x1024
 800139a:	589a      	ldr	r2, [r3, r2]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800139c:	bb12      	cbnz	r2, 80013e4 <dir_sdi+0x88>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800139e:	f241 0208 	movw	r2, #4104	; 0x1008
 80013a2:	5a9a      	ldrh	r2, [r3, r2]
 80013a4:	4295      	cmp	r5, r2
 80013a6:	d2e5      	bcs.n	8001374 <dir_sdi+0x18>
		sect = dp->fs->dirbase;
 80013a8:	f241 0224 	movw	r2, #4132	; 0x1024
 80013ac:	5898      	ldr	r0, [r3, r2]
	dp->clust = clst;	/* Current cluster# */
 80013ae:	f241 030c 	movw	r3, #4108	; 0x100c
 80013b2:	50f4      	str	r4, [r6, r3]
	if (!sect) return FR_INT_ERR;
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d0dd      	beq.n	8001374 <dir_sdi+0x18>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80013b8:	f241 020a 	movw	r2, #4106	; 0x100a
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f241 0410 	movw	r4, #4112	; 0x1010
 80013c2:	5a99      	ldrh	r1, [r3, r2]
 80013c4:	0949      	lsrs	r1, r1, #5
 80013c6:	fbb5 f2f1 	udiv	r2, r5, r1
 80013ca:	4410      	add	r0, r2
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80013cc:	fb01 5512 	mls	r5, r1, r2, r5
 80013d0:	f241 0214 	movw	r2, #4116	; 0x1014
 80013d4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80013d8:	5130      	str	r0, [r6, r4]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80013da:	50b3      	str	r3, [r6, r2]
	return FR_OK;
 80013dc:	2000      	movs	r0, #0
 80013de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013e2:	4622      	mov	r2, r4
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80013e4:	f241 010a 	movw	r1, #4106	; 0x100a
 80013e8:	f241 0002 	movw	r0, #4098	; 0x1002
		while (idx >= ic) {	/* Follow cluster chain */
 80013ec:	4614      	mov	r4, r2
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80013ee:	f241 0914 	movw	r9, #4116	; 0x1014
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80013f2:	f833 8001 	ldrh.w	r8, [r3, r1]
 80013f6:	ea4f 1158 	mov.w	r1, r8, lsr #5
 80013fa:	f813 8000 	ldrb.w	r8, [r3, r0]
 80013fe:	fb08 f801 	mul.w	r8, r8, r1
		while (idx >= ic) {	/* Follow cluster chain */
 8001402:	4545      	cmp	r5, r8
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8001404:	4621      	mov	r1, r4
 8001406:	6838      	ldr	r0, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8001408:	d202      	bcs.n	8001410 <dir_sdi+0xb4>
		sect = clust2sect(dp->fs, clst);
 800140a:	f7ff ff09 	bl	8001220 <clust2sect>
 800140e:	e7ce      	b.n	80013ae <dir_sdi+0x52>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8001410:	f7ff ff18 	bl	8001244 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001414:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8001416:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001418:	d009      	beq.n	800142e <dir_sdi+0xd2>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800141a:	2801      	cmp	r0, #1
 800141c:	d9aa      	bls.n	8001374 <dir_sdi+0x18>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f853 3009 	ldr.w	r3, [r3, r9]
 8001424:	4298      	cmp	r0, r3
 8001426:	d2a5      	bcs.n	8001374 <dir_sdi+0x18>
			idx -= ic;
 8001428:	eba5 0508 	sub.w	r5, r5, r8
 800142c:	e7e9      	b.n	8001402 <dir_sdi+0xa6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800142e:	2001      	movs	r0, #1
}
 8001430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001434 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001434:	2901      	cmp	r1, #1
{
 8001436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800143a:	4604      	mov	r4, r0
 800143c:	460d      	mov	r5, r1
 800143e:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001440:	f240 8098 	bls.w	8001574 <put_fat+0x140>
 8001444:	f241 0314 	movw	r3, #4116	; 0x1014
 8001448:	58c3      	ldr	r3, [r0, r3]
 800144a:	4299      	cmp	r1, r3
 800144c:	f080 8092 	bcs.w	8001574 <put_fat+0x140>
		switch (fs->fs_type) {
 8001450:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d050      	beq.n	80014fc <put_fat+0xc8>
 800145a:	2b03      	cmp	r3, #3
 800145c:	d067      	beq.n	800152e <put_fat+0xfa>
 800145e:	2b01      	cmp	r3, #1
 8001460:	f040 8088 	bne.w	8001574 <put_fat+0x140>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001464:	f241 0a0a 	movw	sl, #4106	; 0x100a
 8001468:	f830 300a 	ldrh.w	r3, [r0, sl]
			bc = (UINT)clst; bc += bc / 2;
 800146c:	eb01 0951 	add.w	r9, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001470:	fbb9 f3f3 	udiv	r3, r9, r3
 8001474:	f500 5881 	add.w	r8, r0, #4128	; 0x1020
 8001478:	f8d8 1000 	ldr.w	r1, [r8]
 800147c:	4419      	add	r1, r3
 800147e:	f7ff fd04 	bl	8000e8a <move_window>
			if (res != FR_OK) break;
 8001482:	2800      	cmp	r0, #0
 8001484:	d177      	bne.n	8001576 <put_fat+0x142>
			p = &fs->win.d8[bc++ % SS(fs)];
 8001486:	f834 100a 	ldrh.w	r1, [r4, sl]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800148a:	f015 0501 	ands.w	r5, r5, #1
			p = &fs->win.d8[bc++ % SS(fs)];
 800148e:	fbb9 f2f1 	udiv	r2, r9, r1
 8001492:	fb01 9212 	mls	r2, r1, r2, r9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8001496:	bf17      	itett	ne
 8001498:	5ca3      	ldrbne	r3, [r4, r2]
 800149a:	b2f3      	uxtbeq	r3, r6
 800149c:	f003 000f 	andne.w	r0, r3, #15
 80014a0:	0133      	lslne	r3, r6, #4
 80014a2:	bf1c      	itt	ne
 80014a4:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80014a8:	4303      	orrne	r3, r0
 80014aa:	54a3      	strb	r3, [r4, r2]
			fs->wflag = 1;
 80014ac:	f241 0304 	movw	r3, #4100	; 0x1004
 80014b0:	2201      	movs	r2, #1
			p = &fs->win.d8[bc++ % SS(fs)];
 80014b2:	f109 0701 	add.w	r7, r9, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80014b6:	fbb7 f1f1 	udiv	r1, r7, r1
			fs->wflag = 1;
 80014ba:	54e2      	strb	r2, [r4, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80014bc:	f8d8 3000 	ldr.w	r3, [r8]
 80014c0:	4620      	mov	r0, r4
 80014c2:	4419      	add	r1, r3
 80014c4:	f7ff fce1 	bl	8000e8a <move_window>
			if (res != FR_OK) break;
 80014c8:	2800      	cmp	r0, #0
 80014ca:	d154      	bne.n	8001576 <put_fat+0x142>
			p = &fs->win.d8[bc % SS(fs)];
 80014cc:	f241 030a 	movw	r3, #4106	; 0x100a
 80014d0:	5ae2      	ldrh	r2, [r4, r3]
 80014d2:	fbb7 f3f2 	udiv	r3, r7, r2
 80014d6:	fb02 7713 	mls	r7, r2, r3, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80014da:	b145      	cbz	r5, 80014ee <put_fat+0xba>
 80014dc:	f3c6 1207 	ubfx	r2, r6, #4, #8
 80014e0:	55e2      	strb	r2, [r4, r7]
			fs->wflag = 1;
 80014e2:	2201      	movs	r2, #1
 80014e4:	f241 0304 	movw	r3, #4100	; 0x1004
 80014e8:	54e2      	strb	r2, [r4, r3]
 80014ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80014ee:	5de2      	ldrb	r2, [r4, r7]
 80014f0:	f3c6 2603 	ubfx	r6, r6, #8, #4
 80014f4:	f022 020f 	bic.w	r2, r2, #15
 80014f8:	4332      	orrs	r2, r6
 80014fa:	e7f1      	b.n	80014e0 <put_fat+0xac>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80014fc:	f241 070a 	movw	r7, #4106	; 0x100a
 8001500:	5bc3      	ldrh	r3, [r0, r7]
 8001502:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8001506:	085b      	lsrs	r3, r3, #1
 8001508:	fbb1 f3f3 	udiv	r3, r1, r3
 800150c:	6811      	ldr	r1, [r2, #0]
 800150e:	4419      	add	r1, r3
 8001510:	f7ff fcbb 	bl	8000e8a <move_window>
			if (res != FR_OK) break;
 8001514:	bb78      	cbnz	r0, 8001576 <put_fat+0x142>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8001516:	5be2      	ldrh	r2, [r4, r7]
 8001518:	006d      	lsls	r5, r5, #1
 800151a:	fbb5 f3f2 	udiv	r3, r5, r2
 800151e:	fb02 5513 	mls	r5, r2, r3, r5
			ST_WORD(p, (WORD)val);
 8001522:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8001526:	5566      	strb	r6, [r4, r5]
 8001528:	4425      	add	r5, r4
 800152a:	706a      	strb	r2, [r5, #1]
 800152c:	e7d9      	b.n	80014e2 <put_fat+0xae>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800152e:	f241 070a 	movw	r7, #4106	; 0x100a
 8001532:	5bc3      	ldrh	r3, [r0, r7]
 8001534:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	fbb1 f3f3 	udiv	r3, r1, r3
 800153e:	6811      	ldr	r1, [r2, #0]
 8001540:	4419      	add	r1, r3
 8001542:	f7ff fca2 	bl	8000e8a <move_window>
			if (res != FR_OK) break;
 8001546:	b9b0      	cbnz	r0, 8001576 <put_fat+0x142>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8001548:	5be2      	ldrh	r2, [r4, r7]
 800154a:	00ad      	lsls	r5, r5, #2
 800154c:	fbb5 f3f2 	udiv	r3, r5, r2
 8001550:	fb02 5513 	mls	r5, r2, r3, r5
 8001554:	1961      	adds	r1, r4, r5
			val |= LD_DWORD(p) & 0xF0000000;
 8001556:	78cb      	ldrb	r3, [r1, #3]
 8001558:	061b      	lsls	r3, r3, #24
 800155a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800155e:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 8001562:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001566:	5562      	strb	r2, [r4, r5]
 8001568:	704b      	strb	r3, [r1, #1]
 800156a:	0c13      	lsrs	r3, r2, #16
 800156c:	0e12      	lsrs	r2, r2, #24
 800156e:	708b      	strb	r3, [r1, #2]
 8001570:	70ca      	strb	r2, [r1, #3]
 8001572:	e7b6      	b.n	80014e2 <put_fat+0xae>
			res = FR_INT_ERR;
 8001574:	2002      	movs	r0, #2
}
 8001576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800157a <create_chain>:
{
 800157a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800157e:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 8001580:	460f      	mov	r7, r1
 8001582:	b9b9      	cbnz	r1, 80015b4 <create_chain+0x3a>
		scl = fs->last_clust;			/* Get suggested start point */
 8001584:	f241 030c 	movw	r3, #4108	; 0x100c
 8001588:	58c6      	ldr	r6, [r0, r3]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800158a:	b336      	cbz	r6, 80015da <create_chain+0x60>
 800158c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001590:	58c3      	ldr	r3, [r0, r3]
 8001592:	429e      	cmp	r6, r3
 8001594:	bf28      	it	cs
 8001596:	2601      	movcs	r6, #1
 8001598:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800159a:	f505 5880 	add.w	r8, r5, #4096	; 0x1000
 800159e:	f108 0814 	add.w	r8, r8, #20
 80015a2:	f8d8 3000 	ldr.w	r3, [r8]
		ncl++;							/* Next cluster */
 80015a6:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80015a8:	429c      	cmp	r4, r3
 80015aa:	d319      	bcc.n	80015e0 <create_chain+0x66>
			if (ncl > scl) return 0;	/* No free cluster */
 80015ac:	2e01      	cmp	r6, #1
 80015ae:	d816      	bhi.n	80015de <create_chain+0x64>
 80015b0:	2400      	movs	r4, #0
 80015b2:	e008      	b.n	80015c6 <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80015b4:	f7ff fe46 	bl	8001244 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 80015b8:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80015ba:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 80015bc:	d93e      	bls.n	800163c <create_chain+0xc2>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80015be:	1c42      	adds	r2, r0, #1
 80015c0:	d104      	bne.n	80015cc <create_chain+0x52>
			ncl = 2;
 80015c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 80015c6:	4620      	mov	r0, r4
 80015c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80015cc:	f241 0314 	movw	r3, #4116	; 0x1014
 80015d0:	58eb      	ldr	r3, [r5, r3]
 80015d2:	4298      	cmp	r0, r3
 80015d4:	d3f7      	bcc.n	80015c6 <create_chain+0x4c>
 80015d6:	463e      	mov	r6, r7
 80015d8:	e7de      	b.n	8001598 <create_chain+0x1e>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80015da:	2601      	movs	r6, #1
 80015dc:	e7dc      	b.n	8001598 <create_chain+0x1e>
			ncl = 2;
 80015de:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80015e0:	4621      	mov	r1, r4
 80015e2:	4628      	mov	r0, r5
 80015e4:	f7ff fe2e 	bl	8001244 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 80015e8:	b130      	cbz	r0, 80015f8 <create_chain+0x7e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80015ea:	1c43      	adds	r3, r0, #1
 80015ec:	d0e9      	beq.n	80015c2 <create_chain+0x48>
 80015ee:	2801      	cmp	r0, #1
 80015f0:	d024      	beq.n	800163c <create_chain+0xc2>
		if (ncl == scl) return 0;		/* No free cluster */
 80015f2:	42b4      	cmp	r4, r6
 80015f4:	d1d5      	bne.n	80015a2 <create_chain+0x28>
 80015f6:	e7db      	b.n	80015b0 <create_chain+0x36>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80015f8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80015fc:	4621      	mov	r1, r4
 80015fe:	4628      	mov	r0, r5
 8001600:	f7ff ff18 	bl	8001434 <put_fat>
	if (res == FR_OK && clst != 0) {
 8001604:	b9c0      	cbnz	r0, 8001638 <create_chain+0xbe>
 8001606:	b987      	cbnz	r7, 800162a <create_chain+0xb0>
		fs->last_clust = ncl;			/* Update FSINFO */
 8001608:	f241 030c 	movw	r3, #4108	; 0x100c
		if (fs->free_clust != 0xFFFFFFFF) {
 800160c:	f241 0210 	movw	r2, #4112	; 0x1010
		fs->last_clust = ncl;			/* Update FSINFO */
 8001610:	50ec      	str	r4, [r5, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 8001612:	58ab      	ldr	r3, [r5, r2]
 8001614:	1c59      	adds	r1, r3, #1
 8001616:	d0d6      	beq.n	80015c6 <create_chain+0x4c>
			fs->free_clust--;
 8001618:	3b01      	subs	r3, #1
 800161a:	50ab      	str	r3, [r5, r2]
			fs->fsi_flag |= 1;
 800161c:	f241 0205 	movw	r2, #4101	; 0x1005
 8001620:	5cab      	ldrb	r3, [r5, r2]
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	54ab      	strb	r3, [r5, r2]
 8001628:	e7cd      	b.n	80015c6 <create_chain+0x4c>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800162a:	4622      	mov	r2, r4
 800162c:	4639      	mov	r1, r7
 800162e:	4628      	mov	r0, r5
 8001630:	f7ff ff00 	bl	8001434 <put_fat>
	if (res == FR_OK) {
 8001634:	2800      	cmp	r0, #0
 8001636:	d0e7      	beq.n	8001608 <create_chain+0x8e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8001638:	2801      	cmp	r0, #1
 800163a:	d0c2      	beq.n	80015c2 <create_chain+0x48>
 800163c:	2401      	movs	r4, #1
 800163e:	e7c2      	b.n	80015c6 <create_chain+0x4c>

08001640 <dir_next>:
{
 8001640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dp->index + 1;
 8001644:	f241 0306 	movw	r3, #4102	; 0x1006
 8001648:	5ac6      	ldrh	r6, [r0, r3]
{
 800164a:	4604      	mov	r4, r0
	i = dp->index + 1;
 800164c:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800164e:	b2b3      	uxth	r3, r6
{
 8001650:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8001652:	b913      	cbnz	r3, 800165a <dir_next+0x1a>
		return FR_NO_FILE;
 8001654:	2004      	movs	r0, #4
 8001656:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800165a:	f241 0110 	movw	r1, #4112	; 0x1010
 800165e:	5842      	ldr	r2, [r0, r1]
 8001660:	2a00      	cmp	r2, #0
 8001662:	d0f7      	beq.n	8001654 <dir_next+0x14>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8001664:	f241 030a 	movw	r3, #4106	; 0x100a
 8001668:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
 800166c:	6838      	ldr	r0, [r7, #0]
 800166e:	5ac3      	ldrh	r3, [r0, r3]
 8001670:	095b      	lsrs	r3, r3, #5
 8001672:	fbb6 f5f3 	udiv	r5, r6, r3
 8001676:	fb03 6315 	mls	r3, r3, r5, r6
 800167a:	b95b      	cbnz	r3, 8001694 <dir_next+0x54>
		if (!dp->clust) {		/* Static table */
 800167c:	f241 0a0c 	movw	sl, #4108	; 0x100c
		dp->sect++;					/* Next sector */
 8001680:	3201      	adds	r2, #1
 8001682:	5062      	str	r2, [r4, r1]
		if (!dp->clust) {		/* Static table */
 8001684:	f854 100a 	ldr.w	r1, [r4, sl]
 8001688:	b9c1      	cbnz	r1, 80016bc <dir_next+0x7c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800168a:	f241 0308 	movw	r3, #4104	; 0x1008
 800168e:	5ac3      	ldrh	r3, [r0, r3]
 8001690:	429e      	cmp	r6, r3
 8001692:	d2df      	bcs.n	8001654 <dir_next+0x14>
	dp->index = (WORD)i;	/* Current index */
 8001694:	f241 0306 	movw	r3, #4102	; 0x1006
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8001698:	f241 020a 	movw	r2, #4106	; 0x100a
	dp->index = (WORD)i;	/* Current index */
 800169c:	52e6      	strh	r6, [r4, r3]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800169e:	683b      	ldr	r3, [r7, #0]
	return FR_OK;
 80016a0:	2000      	movs	r0, #0
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80016a2:	5a9a      	ldrh	r2, [r3, r2]
 80016a4:	0952      	lsrs	r2, r2, #5
 80016a6:	fbb6 f1f2 	udiv	r1, r6, r2
 80016aa:	fb02 6611 	mls	r6, r2, r1, r6
 80016ae:	f241 0214 	movw	r2, #4116	; 0x1014
 80016b2:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 80016b6:	50a3      	str	r3, [r4, r2]
	return FR_OK;
 80016b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80016bc:	f241 0302 	movw	r3, #4098	; 0x1002
 80016c0:	f810 8003 	ldrb.w	r8, [r0, r3]
 80016c4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80016c8:	ea18 0805 	ands.w	r8, r8, r5
 80016cc:	d1e2      	bne.n	8001694 <dir_next+0x54>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80016ce:	f7ff fdb9 	bl	8001244 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 80016d2:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80016d4:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 80016d6:	d802      	bhi.n	80016de <dir_next+0x9e>
 80016d8:	2002      	movs	r0, #2
 80016da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80016de:	1c42      	adds	r2, r0, #1
 80016e0:	d102      	bne.n	80016e8 <dir_next+0xa8>
 80016e2:	2001      	movs	r0, #1
 80016e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80016e8:	f241 0314 	movw	r3, #4116	; 0x1014
 80016ec:	6838      	ldr	r0, [r7, #0]
 80016ee:	58c3      	ldr	r3, [r0, r3]
 80016f0:	429d      	cmp	r5, r3
 80016f2:	d334      	bcc.n	800175e <dir_next+0x11e>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80016f4:	f1b9 0f00 	cmp.w	r9, #0
 80016f8:	d0ac      	beq.n	8001654 <dir_next+0x14>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80016fa:	f854 100a 	ldr.w	r1, [r4, sl]
 80016fe:	f7ff ff3c 	bl	800157a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001702:	4605      	mov	r5, r0
 8001704:	2800      	cmp	r0, #0
 8001706:	d044      	beq.n	8001792 <dir_next+0x152>
					if (clst == 1) return FR_INT_ERR;
 8001708:	2801      	cmp	r0, #1
 800170a:	d0e5      	beq.n	80016d8 <dir_next+0x98>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800170c:	1c43      	adds	r3, r0, #1
 800170e:	d0e8      	beq.n	80016e2 <dir_next+0xa2>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8001710:	6838      	ldr	r0, [r7, #0]
 8001712:	f7ff fbb2 	bl	8000e7a <sync_window>
 8001716:	4601      	mov	r1, r0
 8001718:	2800      	cmp	r0, #0
 800171a:	d1e2      	bne.n	80016e2 <dir_next+0xa2>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800171c:	f241 020a 	movw	r2, #4106	; 0x100a
 8001720:	6838      	ldr	r0, [r7, #0]
						dp->fs->wflag = 1;
 8001722:	f241 0a04 	movw	sl, #4100	; 0x1004
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8001726:	5a82      	ldrh	r2, [r0, r2]
 8001728:	f7ff faaa 	bl	8000c80 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800172c:	f8d7 9000 	ldr.w	r9, [r7]
 8001730:	4629      	mov	r1, r5
 8001732:	4648      	mov	r0, r9
 8001734:	f7ff fd74 	bl	8001220 <clust2sect>
 8001738:	f241 032c 	movw	r3, #4140	; 0x102c
						dp->fs->wflag = 1;
 800173c:	f04f 0b01 	mov.w	fp, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8001740:	f849 0003 	str.w	r0, [r9, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8001744:	f241 0902 	movw	r9, #4098	; 0x1002
 8001748:	6838      	ldr	r0, [r7, #0]
 800174a:	f810 3009 	ldrb.w	r3, [r0, r9]
 800174e:	4598      	cmp	r8, r3
 8001750:	d310      	bcc.n	8001774 <dir_next+0x134>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8001752:	f241 022c 	movw	r2, #4140	; 0x102c
 8001756:	5883      	ldr	r3, [r0, r2]
 8001758:	eba3 0308 	sub.w	r3, r3, r8
 800175c:	5083      	str	r3, [r0, r2]
				dp->clust = clst;				/* Initialize data for new cluster */
 800175e:	f241 030c 	movw	r3, #4108	; 0x100c
				dp->sect = clust2sect(dp->fs, clst);
 8001762:	6838      	ldr	r0, [r7, #0]
				dp->clust = clst;				/* Initialize data for new cluster */
 8001764:	50e5      	str	r5, [r4, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8001766:	4629      	mov	r1, r5
 8001768:	f7ff fd5a 	bl	8001220 <clust2sect>
 800176c:	f241 0310 	movw	r3, #4112	; 0x1010
 8001770:	50e0      	str	r0, [r4, r3]
 8001772:	e78f      	b.n	8001694 <dir_next+0x54>
						dp->fs->wflag = 1;
 8001774:	f800 b00a 	strb.w	fp, [r0, sl]
 8001778:	f7ff fb4b 	bl	8000e12 <sync_window.part.1>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800177c:	2800      	cmp	r0, #0
 800177e:	d1b0      	bne.n	80016e2 <dir_next+0xa2>
						dp->fs->winsect++;
 8001780:	f241 022c 	movw	r2, #4140	; 0x102c
 8001784:	6839      	ldr	r1, [r7, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8001786:	f108 0801 	add.w	r8, r8, #1
						dp->fs->winsect++;
 800178a:	588b      	ldr	r3, [r1, r2]
 800178c:	3301      	adds	r3, #1
 800178e:	508b      	str	r3, [r1, r2]
 8001790:	e7da      	b.n	8001748 <dir_next+0x108>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001792:	2007      	movs	r0, #7
}
 8001794:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001798 <dir_find.part.6>:
FRESULT dir_find (
 8001798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800179c:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80017a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a4:	f241 0324 	movw	r3, #4132	; 0x1024
FRESULT dir_find (
 80017a8:	4606      	mov	r6, r0
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80017aa:	4644      	mov	r4, r8
		res = move_window(dp->fs, dp->sect);
 80017ac:	f500 5a80 	add.w	sl, r0, #4096	; 0x1000
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80017b0:	f500 5b80 	add.w	fp, r0, #4096	; 0x1000
FRESULT dir_find (
 80017b4:	b085      	sub	sp, #20
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80017b6:	52c2      	strh	r2, [r0, r3]
		res = move_window(dp->fs, dp->sect);
 80017b8:	f10a 0a10 	add.w	sl, sl, #16
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80017bc:	f10b 0b14 	add.w	fp, fp, #20
		res = move_window(dp->fs, dp->sect);
 80017c0:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 80017c4:	f8da 1000 	ldr.w	r1, [sl]
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	f7ff fb5e 	bl	8000e8a <move_window>
		if (res != FR_OK) break;
 80017ce:	4607      	mov	r7, r0
 80017d0:	2800      	cmp	r0, #0
 80017d2:	d169      	bne.n	80018a8 <dir_find.part.6+0x110>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80017d4:	f8db 5000 	ldr.w	r5, [fp]
		c = dir[DIR_Name];
 80017d8:	782a      	ldrb	r2, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80017da:	2a00      	cmp	r2, #0
 80017dc:	f000 8084 	beq.w	80018e8 <dir_find.part.6+0x150>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80017e0:	2ae5      	cmp	r2, #229	; 0xe5
 80017e2:	d006      	beq.n	80017f2 <dir_find.part.6+0x5a>
		a = dir[DIR_Attr] & AM_MASK;
 80017e4:	7ae9      	ldrb	r1, [r5, #11]
 80017e6:	f001 033f 	and.w	r3, r1, #63	; 0x3f
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80017ea:	0709      	lsls	r1, r1, #28
 80017ec:	d507      	bpl.n	80017fe <dir_find.part.6+0x66>
 80017ee:	2b0f      	cmp	r3, #15
 80017f0:	d007      	beq.n	8001802 <dir_find.part.6+0x6a>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80017f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f6:	f241 0324 	movw	r3, #4132	; 0x1024
 80017fa:	52f2      	strh	r2, [r6, r3]
 80017fc:	e04c      	b.n	8001898 <dir_find.part.6+0x100>
			if (a == AM_LFN) {			/* An LFN entry is found */
 80017fe:	2b0f      	cmp	r3, #15
 8001800:	d15b      	bne.n	80018ba <dir_find.part.6+0x122>
				if (dp->lfn) {
 8001802:	f506 5381 	add.w	r3, r6, #4128	; 0x1020
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d046      	beq.n	800189a <dir_find.part.6+0x102>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800180c:	0650      	lsls	r0, r2, #25
 800180e:	d541      	bpl.n	8001894 <dir_find.part.6+0xfc>
						c &= ~LLEF; ord = c;	/* LFN start order */
 8001810:	f002 04bf 	and.w	r4, r2, #191	; 0xbf
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8001814:	f241 0206 	movw	r2, #4102	; 0x1006
 8001818:	5ab1      	ldrh	r1, [r6, r2]
 800181a:	f241 0224 	movw	r2, #4132	; 0x1024
						sum = dir[LDIR_Chksum];
 800181e:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8001822:	52b1      	strh	r1, [r6, r2]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8001824:	7b6a      	ldrb	r2, [r5, #13]
 8001826:	4542      	cmp	r2, r8
 8001828:	d136      	bne.n	8001898 <dir_find.part.6+0x100>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800182a:	782f      	ldrb	r7, [r5, #0]
	s = 0; wc = 1;
 800182c:	2001      	movs	r0, #1
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800182e:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 8001832:	1e7a      	subs	r2, r7, #1
 8001834:	270d      	movs	r7, #13
	s = 0; wc = 1;
 8001836:	f04f 0900 	mov.w	r9, #0
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800183a:	4357      	muls	r7, r2
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800183c:	4a2b      	ldr	r2, [pc, #172]	; (80018ec <dir_find.part.6+0x154>)
 800183e:	f819 2002 	ldrb.w	r2, [r9, r2]
 8001842:	18a9      	adds	r1, r5, r2
 8001844:	7849      	ldrb	r1, [r1, #1]
 8001846:	5caa      	ldrb	r2, [r5, r2]
 8001848:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if (wc) {	/* Last character has not been processed */
 800184c:	b380      	cbz	r0, 80018b0 <dir_find.part.6+0x118>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800184e:	4610      	mov	r0, r2
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	f000 fca5 	bl	80021a0 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8001856:	2ffe      	cmp	r7, #254	; 0xfe
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8001858:	9003      	str	r0, [sp, #12]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800185a:	d81d      	bhi.n	8001898 <dir_find.part.6+0x100>
 800185c:	9b01      	ldr	r3, [sp, #4]
 800185e:	1c7a      	adds	r2, r7, #1
 8001860:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
 8001864:	9202      	str	r2, [sp, #8]
 8001866:	f000 fc9b 	bl	80021a0 <ff_wtoupper>
 800186a:	9903      	ldr	r1, [sp, #12]
 800186c:	4281      	cmp	r1, r0
 800186e:	d113      	bne.n	8001898 <dir_find.part.6+0x100>
 8001870:	9a02      	ldr	r2, [sp, #8]
 8001872:	9b01      	ldr	r3, [sp, #4]
 8001874:	4617      	mov	r7, r2
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8001876:	f109 0901 	add.w	r9, r9, #1
 800187a:	f1b9 0f0d 	cmp.w	r9, #13
 800187e:	d1dd      	bne.n	800183c <dir_find.part.6+0xa4>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8001880:	782a      	ldrb	r2, [r5, #0]
 8001882:	0651      	lsls	r1, r2, #25
 8001884:	d503      	bpl.n	800188e <dir_find.part.6+0xf6>
 8001886:	b110      	cbz	r0, 800188e <dir_find.part.6+0xf6>
 8001888:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 800188c:	b923      	cbnz	r3, 8001898 <dir_find.part.6+0x100>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800188e:	3c01      	subs	r4, #1
 8001890:	b2e4      	uxtb	r4, r4
 8001892:	e002      	b.n	800189a <dir_find.part.6+0x102>
 8001894:	42a2      	cmp	r2, r4
 8001896:	d0c5      	beq.n	8001824 <dir_find.part.6+0x8c>
 8001898:	24ff      	movs	r4, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 800189a:	2100      	movs	r1, #0
 800189c:	4630      	mov	r0, r6
 800189e:	f7ff fecf 	bl	8001640 <dir_next>
	} while (res == FR_OK);
 80018a2:	4607      	mov	r7, r0
 80018a4:	2800      	cmp	r0, #0
 80018a6:	d08b      	beq.n	80017c0 <dir_find.part.6+0x28>
}
 80018a8:	4638      	mov	r0, r7
 80018aa:	b005      	add	sp, #20
 80018ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80018b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018b4:	428a      	cmp	r2, r1
 80018b6:	d0de      	beq.n	8001876 <dir_find.part.6+0xde>
 80018b8:	e7ee      	b.n	8001898 <dir_find.part.6+0x100>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80018ba:	b924      	cbnz	r4, 80018c6 <dir_find.part.6+0x12e>
 80018bc:	4628      	mov	r0, r5
 80018be:	f7ff fa73 	bl	8000da8 <sum_sfn>
 80018c2:	4540      	cmp	r0, r8
 80018c4:	d0f0      	beq.n	80018a8 <dir_find.part.6+0x110>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80018c6:	f241 0318 	movw	r3, #4120	; 0x1018
 80018ca:	58f3      	ldr	r3, [r6, r3]
 80018cc:	7ada      	ldrb	r2, [r3, #11]
 80018ce:	07d2      	lsls	r2, r2, #31
 80018d0:	d48f      	bmi.n	80017f2 <dir_find.part.6+0x5a>
 80018d2:	f103 000b 	add.w	r0, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80018d6:	4283      	cmp	r3, r0
 80018d8:	d0e6      	beq.n	80018a8 <dir_find.part.6+0x110>
 80018da:	f815 1b01 	ldrb.w	r1, [r5], #1
 80018de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018e2:	4291      	cmp	r1, r2
 80018e4:	d0f7      	beq.n	80018d6 <dir_find.part.6+0x13e>
 80018e6:	e784      	b.n	80017f2 <dir_find.part.6+0x5a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80018e8:	2704      	movs	r7, #4
 80018ea:	e7dd      	b.n	80018a8 <dir_find.part.6+0x110>
 80018ec:	0800270c 	.word	0x0800270c

080018f0 <follow_path>:
{
 80018f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80018f4:	780b      	ldrb	r3, [r1, #0]
{
 80018f6:	4680      	mov	r8, r0
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80018f8:	2b2f      	cmp	r3, #47	; 0x2f
{
 80018fa:	460f      	mov	r7, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80018fc:	d001      	beq.n	8001902 <follow_path+0x12>
 80018fe:	2b5c      	cmp	r3, #92	; 0x5c
 8001900:	d100      	bne.n	8001904 <follow_path+0x14>
		path++;
 8001902:	3701      	adds	r7, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8001904:	f241 0308 	movw	r3, #4104	; 0x1008
 8001908:	2400      	movs	r4, #0
 800190a:	f848 4003 	str.w	r4, [r8, r3]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800190e:	783b      	ldrb	r3, [r7, #0]
 8001910:	2b1f      	cmp	r3, #31
 8001912:	d92e      	bls.n	8001972 <follow_path+0x82>
	mem_set(dp->fn, ' ', 11);
 8001914:	f508 5b80 	add.w	fp, r8, #4096	; 0x1000
 8001918:	f10b 0b18 	add.w	fp, fp, #24
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800191c:	783b      	ldrb	r3, [r7, #0]
 800191e:	463c      	mov	r4, r7
 8001920:	2b2f      	cmp	r3, #47	; 0x2f
 8001922:	f107 0701 	add.w	r7, r7, #1
 8001926:	d0f9      	beq.n	800191c <follow_path+0x2c>
 8001928:	2b5c      	cmp	r3, #92	; 0x5c
 800192a:	d0f7      	beq.n	800191c <follow_path+0x2c>
	si = di = 0;
 800192c:	2600      	movs	r6, #0
	lfn = dp->lfn;
 800192e:	f508 5381 	add.w	r3, r8, #4128	; 0x1020
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8001938:	1e9d      	subs	r5, r3, #2
		w = p[si++];					/* Get a character */
 800193a:	f819 0f01 	ldrb.w	r0, [r9, #1]!
 800193e:	1c77      	adds	r7, r6, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8001940:	281f      	cmp	r0, #31
 8001942:	d925      	bls.n	8001990 <follow_path+0xa0>
 8001944:	282f      	cmp	r0, #47	; 0x2f
 8001946:	d023      	beq.n	8001990 <follow_path+0xa0>
 8001948:	285c      	cmp	r0, #92	; 0x5c
 800194a:	d021      	beq.n	8001990 <follow_path+0xa0>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800194c:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	d00c      	beq.n	800196e <follow_path+0x7e>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8001954:	2101      	movs	r1, #1
 8001956:	f000 fc05 	bl	8002164 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800195a:	b140      	cbz	r0, 800196e <follow_path+0x7e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800195c:	287f      	cmp	r0, #127	; 0x7f
 800195e:	9b00      	ldr	r3, [sp, #0]
 8001960:	d812      	bhi.n	8001988 <follow_path+0x98>
 8001962:	4980      	ldr	r1, [pc, #512]	; (8001b64 <follow_path+0x274>)
	while (*str && *str != chr) str++;
 8001964:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001968:	b172      	cbz	r2, 8001988 <follow_path+0x98>
 800196a:	4282      	cmp	r2, r0
 800196c:	d1fa      	bne.n	8001964 <follow_path+0x74>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800196e:	2006      	movs	r0, #6
 8001970:	e007      	b.n	8001982 <follow_path+0x92>
		res = dir_sdi(dp, 0);
 8001972:	4621      	mov	r1, r4
 8001974:	4640      	mov	r0, r8
 8001976:	f7ff fcf1 	bl	800135c <dir_sdi>
		dp->dir = 0;
 800197a:	f241 0314 	movw	r3, #4116	; 0x1014
 800197e:	f848 4003 	str.w	r4, [r8, r3]
}
 8001982:	b003      	add	sp, #12
 8001984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lfn[di++] = w;					/* Store the Unicode character */
 8001988:	f825 0f02 	strh.w	r0, [r5, #2]!
 800198c:	463e      	mov	r6, r7
 800198e:	e7d4      	b.n	800193a <follow_path+0x4a>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8001990:	2820      	cmp	r0, #32
	*path = &p[si];						/* Return pointer to the next segment */
 8001992:	4427      	add	r7, r4
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8001994:	bf34      	ite	cc
 8001996:	2404      	movcc	r4, #4
 8001998:	2400      	movcs	r4, #0
 800199a:	eb03 0246 	add.w	r2, r3, r6, lsl #1
	while (di) {						/* Strip trailing spaces and dots */
 800199e:	2e00      	cmp	r6, #0
 80019a0:	d0e5      	beq.n	800196e <follow_path+0x7e>
		w = lfn[di - 1];
 80019a2:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 80019a6:	2920      	cmp	r1, #32
 80019a8:	d001      	beq.n	80019ae <follow_path+0xbe>
 80019aa:	292e      	cmp	r1, #46	; 0x2e
 80019ac:	d17a      	bne.n	8001aa4 <follow_path+0x1b4>
		di--;
 80019ae:	3e01      	subs	r6, #1
 80019b0:	e7f5      	b.n	800199e <follow_path+0xae>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80019b2:	3101      	adds	r1, #1
 80019b4:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80019b8:	2a20      	cmp	r2, #32
 80019ba:	d0fa      	beq.n	80019b2 <follow_path+0xc2>
 80019bc:	2a2e      	cmp	r2, #46	; 0x2e
 80019be:	d0f8      	beq.n	80019b2 <follow_path+0xc2>
	if (si) cf |= NS_LOSS | NS_LFN;
 80019c0:	b109      	cbz	r1, 80019c6 <follow_path+0xd6>
 80019c2:	f044 0403 	orr.w	r4, r4, #3
 80019c6:	464a      	mov	r2, r9
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80019c8:	f832 0d02 	ldrh.w	r0, [r2, #-2]!
 80019cc:	282e      	cmp	r0, #46	; 0x2e
 80019ce:	d001      	beq.n	80019d4 <follow_path+0xe4>
 80019d0:	3e01      	subs	r6, #1
 80019d2:	d1f9      	bne.n	80019c8 <follow_path+0xd8>
		dp->fn[i++] = (BYTE)w;
 80019d4:	f04f 0a00 	mov.w	sl, #0
 80019d8:	f04f 0908 	mov.w	r9, #8
 80019dc:	4655      	mov	r5, sl
		w = lfn[si++];					/* Get an LFN character */
 80019de:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80019e2:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 80019e4:	2800      	cmp	r0, #0
 80019e6:	d075      	beq.n	8001ad4 <follow_path+0x1e4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80019e8:	2820      	cmp	r0, #32
 80019ea:	d003      	beq.n	80019f4 <follow_path+0x104>
 80019ec:	282e      	cmp	r0, #46	; 0x2e
 80019ee:	d105      	bne.n	80019fc <follow_path+0x10c>
 80019f0:	42b2      	cmp	r2, r6
 80019f2:	d066      	beq.n	8001ac2 <follow_path+0x1d2>
			cf |= NS_LOSS | NS_LFN; continue;
 80019f4:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 80019f8:	4611      	mov	r1, r2
 80019fa:	e7f0      	b.n	80019de <follow_path+0xee>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80019fc:	45ca      	cmp	sl, r9
 80019fe:	d262      	bcs.n	8001ac6 <follow_path+0x1d6>
 8001a00:	42b2      	cmp	r2, r6
 8001a02:	d110      	bne.n	8001a26 <follow_path+0x136>
			if (ni == 11) {				/* Long extension */
 8001a04:	f1b9 0f0b 	cmp.w	r9, #11
 8001a08:	d105      	bne.n	8001a16 <follow_path+0x126>
 8001a0a:	e05f      	b.n	8001acc <follow_path+0x1dc>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8001a0c:	42b2      	cmp	r2, r6
 8001a0e:	d002      	beq.n	8001a16 <follow_path+0x126>
 8001a10:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 8001a14:	d85e      	bhi.n	8001ad4 <follow_path+0x1e4>
			b <<= 2; continue;
 8001a16:	00ad      	lsls	r5, r5, #2
 8001a18:	b2ed      	uxtb	r5, r5
 8001a1a:	4632      	mov	r2, r6
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8001a1c:	f04f 090b 	mov.w	r9, #11
 8001a20:	f04f 0a08 	mov.w	sl, #8
 8001a24:	e7e8      	b.n	80019f8 <follow_path+0x108>
		if (w >= 0x80) {				/* Non ASCII character */
 8001a26:	287f      	cmp	r0, #127	; 0x7f
 8001a28:	d90f      	bls.n	8001a4a <follow_path+0x15a>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	9201      	str	r2, [sp, #4]
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	f000 fb98 	bl	8002164 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8001a34:	9b00      	ldr	r3, [sp, #0]
 8001a36:	9a01      	ldr	r2, [sp, #4]
 8001a38:	b118      	cbz	r0, 8001a42 <follow_path+0x152>
 8001a3a:	494b      	ldr	r1, [pc, #300]	; (8001b68 <follow_path+0x278>)
 8001a3c:	4408      	add	r0, r1
 8001a3e:	f810 0c80 	ldrb.w	r0, [r0, #-128]
 8001a42:	b280      	uxth	r0, r0
			cf |= NS_LFN;				/* Force create LFN entry */
 8001a44:	f044 0402 	orr.w	r4, r4, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8001a48:	b138      	cbz	r0, 8001a5a <follow_path+0x16a>
 8001a4a:	f8df e120 	ldr.w	lr, [pc, #288]	; 8001b6c <follow_path+0x27c>
	while (*str && *str != chr) str++;
 8001a4e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 8001a52:	2900      	cmp	r1, #0
 8001a54:	d078      	beq.n	8001b48 <follow_path+0x258>
 8001a56:	4281      	cmp	r1, r0
 8001a58:	d1f9      	bne.n	8001a4e <follow_path+0x15e>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8001a5a:	205f      	movs	r0, #95	; 0x5f
 8001a5c:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 8001a60:	f8db 1000 	ldr.w	r1, [fp]
 8001a64:	f801 000a 	strb.w	r0, [r1, sl]
 8001a68:	f10a 0a01 	add.w	sl, sl, #1
 8001a6c:	e7c4      	b.n	80019f8 <follow_path+0x108>
					b |= 2;
 8001a6e:	f045 0502 	orr.w	r5, r5, #2
 8001a72:	e7f5      	b.n	8001a60 <follow_path+0x170>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8001a74:	075a      	lsls	r2, r3, #29
 8001a76:	d484      	bmi.n	8001982 <follow_path+0x92>
			dir = dp->dir;						/* Follow the sub-directory */
 8001a78:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a7c:	f858 1003 	ldr.w	r1, [r8, r3]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8001a80:	7acb      	ldrb	r3, [r1, #11]
 8001a82:	06db      	lsls	r3, r3, #27
 8001a84:	d50c      	bpl.n	8001aa0 <follow_path+0x1b0>
			dp->sclust = ld_clust(dp->fs, dir);
 8001a86:	f508 5380 	add.w	r3, r8, #4096	; 0x1000
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a90:	7818      	ldrb	r0, [r3, #0]
 8001a92:	f7ff f9b0 	bl	8000df6 <ld_clust.isra.0>
 8001a96:	f241 0308 	movw	r3, #4104	; 0x1008
 8001a9a:	f848 0003 	str.w	r0, [r8, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8001a9e:	e73d      	b.n	800191c <follow_path+0x2c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8001aa0:	2005      	movs	r0, #5
	return res;
 8001aa2:	e76e      	b.n	8001982 <follow_path+0x92>
	lfn[di] = 0;						/* LFN is created */
 8001aa4:	2500      	movs	r5, #0
	mem_set(dp->fn, ' ', 11);
 8001aa6:	2120      	movs	r1, #32
	lfn[di] = 0;						/* LFN is created */
 8001aa8:	f823 5016 	strh.w	r5, [r3, r6, lsl #1]
	mem_set(dp->fn, ' ', 11);
 8001aac:	220b      	movs	r2, #11
 8001aae:	f8db 0000 	ldr.w	r0, [fp]
	lfn[di] = 0;						/* LFN is created */
 8001ab2:	eb03 0946 	add.w	r9, r3, r6, lsl #1
 8001ab6:	9300      	str	r3, [sp, #0]
	mem_set(dp->fn, ' ', 11);
 8001ab8:	f7ff f8e2 	bl	8000c80 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8001abc:	4629      	mov	r1, r5
 8001abe:	9b00      	ldr	r3, [sp, #0]
 8001ac0:	e778      	b.n	80019b4 <follow_path+0xc4>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8001ac2:	45ca      	cmp	sl, r9
 8001ac4:	d39e      	bcc.n	8001a04 <follow_path+0x114>
			if (ni == 11) {				/* Long extension */
 8001ac6:	f1b9 0f0b 	cmp.w	r9, #11
 8001aca:	d19f      	bne.n	8001a0c <follow_path+0x11c>
				cf |= NS_LOSS | NS_LFN; break;
 8001acc:	f04f 090b 	mov.w	r9, #11
 8001ad0:	f044 0403 	orr.w	r4, r4, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8001ad4:	f8db 3000 	ldr.w	r3, [fp]
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	2ae5      	cmp	r2, #229	; 0xe5
 8001adc:	bf04      	itt	eq
 8001ade:	2205      	moveq	r2, #5
 8001ae0:	701a      	strbeq	r2, [r3, #0]
	if (ni == 8) b <<= 2;
 8001ae2:	f1b9 0f08 	cmp.w	r9, #8
 8001ae6:	bf04      	itt	eq
 8001ae8:	00ad      	lsleq	r5, r5, #2
 8001aea:	b2ed      	uxtbeq	r5, r5
 8001aec:	f005 030c 	and.w	r3, r5, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8001af0:	2b0c      	cmp	r3, #12
 8001af2:	d003      	beq.n	8001afc <follow_path+0x20c>
 8001af4:	f005 0203 	and.w	r2, r5, #3
 8001af8:	2a03      	cmp	r2, #3
 8001afa:	d101      	bne.n	8001b00 <follow_path+0x210>
		cf |= NS_LFN;
 8001afc:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8001b00:	07a1      	lsls	r1, r4, #30
 8001b02:	d409      	bmi.n	8001b18 <follow_path+0x228>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8001b04:	f005 0503 	and.w	r5, r5, #3
 8001b08:	2d01      	cmp	r5, #1
 8001b0a:	bf08      	it	eq
 8001b0c:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	bf08      	it	eq
 8001b14:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8001b18:	f8db 3000 	ldr.w	r3, [fp]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8001b1c:	2100      	movs	r1, #0
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8001b1e:	72dc      	strb	r4, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8001b20:	4640      	mov	r0, r8
 8001b22:	f7ff fc1b 	bl	800135c <dir_sdi>
	if (res != FR_OK) return res;
 8001b26:	b910      	cbnz	r0, 8001b2e <follow_path+0x23e>
 8001b28:	4640      	mov	r0, r8
 8001b2a:	f7ff fe35 	bl	8001798 <dir_find.part.6>
			ns = dp->fn[NSFLAG];
 8001b2e:	f8db 3000 	ldr.w	r3, [fp]
 8001b32:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d09d      	beq.n	8001a74 <follow_path+0x184>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8001b38:	2804      	cmp	r0, #4
 8001b3a:	f47f af22 	bne.w	8001982 <follow_path+0x92>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8001b3e:	f013 0f04 	tst.w	r3, #4
 8001b42:	bf08      	it	eq
 8001b44:	2005      	moveq	r0, #5
 8001b46:	e71c      	b.n	8001982 <follow_path+0x92>
				if (IsUpper(w)) {		/* ASCII large capital */
 8001b48:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8001b4c:	2919      	cmp	r1, #25
 8001b4e:	d98e      	bls.n	8001a6e <follow_path+0x17e>
					if (IsLower(w)) {	/* ASCII small capital */
 8001b50:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8001b54:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8001b56:	bf9e      	ittt	ls
 8001b58:	3820      	subls	r0, #32
 8001b5a:	f045 0501 	orrls.w	r5, r5, #1
 8001b5e:	b280      	uxthls	r0, r0
 8001b60:	e77e      	b.n	8001a60 <follow_path+0x170>
 8001b62:	bf00      	nop
 8001b64:	08002718 	.word	0x08002718
 8001b68:	0800268c 	.word	0x0800268c
 8001b6c:	08002721 	.word	0x08002721

08001b70 <dir_register>:
	fn = dp->fn; lfn = dp->lfn;
 8001b70:	f241 0318 	movw	r3, #4120	; 0x1018
{
 8001b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	fn = dp->fn; lfn = dp->lfn;
 8001b78:	58c5      	ldr	r5, [r0, r3]
{
 8001b7a:	b08b      	sub	sp, #44	; 0x2c
	fn = dp->fn; lfn = dp->lfn;
 8001b7c:	f500 5781 	add.w	r7, r0, #4128	; 0x1020
{
 8001b80:	4604      	mov	r4, r0
	mem_cpy(sn, fn, 12);
 8001b82:	220c      	movs	r2, #12
 8001b84:	4629      	mov	r1, r5
 8001b86:	a807      	add	r0, sp, #28
	fn = dp->fn; lfn = dp->lfn;
 8001b88:	683e      	ldr	r6, [r7, #0]
	mem_cpy(sn, fn, 12);
 8001b8a:	f7ff f86f 	bl	8000c6c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8001b8e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8001b92:	07db      	lsls	r3, r3, #31
 8001b94:	d57d      	bpl.n	8001c92 <dir_register+0x122>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8001b96:	2300      	movs	r3, #0
		for (n = 1; n < 100; n++) {
 8001b98:	f04f 0901 	mov.w	r9, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8001b9c:	f8df 8264 	ldr.w	r8, [pc, #612]	; 8001e04 <dir_register+0x294>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8001ba0:	72eb      	strb	r3, [r5, #11]
 8001ba2:	603b      	str	r3, [r7, #0]
	mem_cpy(dst, src, 11);
 8001ba4:	220b      	movs	r2, #11
 8001ba6:	a907      	add	r1, sp, #28
 8001ba8:	4628      	mov	r0, r5
 8001baa:	f7ff f85f 	bl	8000c6c <mem_cpy>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8001bae:	f1b9 0f05 	cmp.w	r9, #5
 8001bb2:	d851      	bhi.n	8001c58 <dir_register+0xe8>
 8001bb4:	464b      	mov	r3, r9
		while (*lfn) {	/* Create a CRC */
 8001bb6:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
 8001bb8:	f003 000f 	and.w	r0, r3, #15
 8001bbc:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8001bc0:	2939      	cmp	r1, #57	; 0x39
 8001bc2:	bf88      	it	hi
 8001bc4:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 8001bc8:	3a01      	subs	r2, #1
 8001bca:	a805      	add	r0, sp, #20
 8001bcc:	4410      	add	r0, r2
	} while (seq);
 8001bce:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 8001bd0:	7041      	strb	r1, [r0, #1]
	} while (seq);
 8001bd2:	d1f1      	bne.n	8001bb8 <dir_register+0x48>
	ns[i] = '~';
 8001bd4:	207e      	movs	r0, #126	; 0x7e
 8001bd6:	a90a      	add	r1, sp, #40	; 0x28
 8001bd8:	4411      	add	r1, r2
 8001bda:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d03f      	beq.n	8001c62 <dir_register+0xf2>
 8001be2:	5ce9      	ldrb	r1, [r5, r3]
 8001be4:	2920      	cmp	r1, #32
 8001be6:	d13a      	bne.n	8001c5e <dir_register+0xee>
 8001be8:	442b      	add	r3, r5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8001bea:	2a07      	cmp	r2, #7
 8001bec:	bf8f      	iteee	hi
 8001bee:	2120      	movhi	r1, #32
 8001bf0:	a90a      	addls	r1, sp, #40	; 0x28
 8001bf2:	1889      	addls	r1, r1, r2
 8001bf4:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
 8001bf8:	bf98      	it	ls
 8001bfa:	3201      	addls	r2, #1
 8001bfc:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 8001c00:	1b59      	subs	r1, r3, r5
 8001c02:	2907      	cmp	r1, #7
 8001c04:	d9f1      	bls.n	8001bea <dir_register+0x7a>
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8001c06:	2100      	movs	r1, #0
 8001c08:	4620      	mov	r0, r4
 8001c0a:	f7ff fba7 	bl	800135c <dir_sdi>
	if (res != FR_OK) return res;
 8001c0e:	4682      	mov	sl, r0
 8001c10:	bbc0      	cbnz	r0, 8001c84 <dir_register+0x114>
 8001c12:	4620      	mov	r0, r4
 8001c14:	f7ff fdc0 	bl	8001798 <dir_find.part.6>
			if (res != FR_OK) break;
 8001c18:	4682      	mov	sl, r0
 8001c1a:	bb98      	cbnz	r0, 8001c84 <dir_register+0x114>
		for (n = 1; n < 100; n++) {
 8001c1c:	f109 0901 	add.w	r9, r9, #1
 8001c20:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8001c24:	d1be      	bne.n	8001ba4 <dir_register+0x34>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8001c26:	f04f 0a07 	mov.w	sl, #7
}
 8001c2a:	4650      	mov	r0, sl
 8001c2c:	b00b      	add	sp, #44	; 0x2c
 8001c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*lfn) {	/* Create a CRC */
 8001c32:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 8001c34:	f002 0e01 	and.w	lr, r2, #1
 8001c38:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8001c3c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001c40:	bf18      	it	ne
 8001c42:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8001c46:	3901      	subs	r1, #1
				wc >>= 1;
 8001c48:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 8001c4c:	d1f2      	bne.n	8001c34 <dir_register+0xc4>
		while (*lfn) {	/* Create a CRC */
 8001c4e:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8001c52:	2a00      	cmp	r2, #0
 8001c54:	d1ed      	bne.n	8001c32 <dir_register+0xc2>
 8001c56:	e7ae      	b.n	8001bb6 <dir_register+0x46>
 8001c58:	1eb0      	subs	r0, r6, #2
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8001c5a:	464b      	mov	r3, r9
 8001c5c:	e7f7      	b.n	8001c4e <dir_register+0xde>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8001c5e:	3301      	adds	r3, #1
 8001c60:	e7bd      	b.n	8001bde <dir_register+0x6e>
 8001c62:	4613      	mov	r3, r2
 8001c64:	e7c0      	b.n	8001be8 <dir_register+0x78>
		for (n = 0; lfn[n]; n++) ;
 8001c66:	3501      	adds	r5, #1
 8001c68:	e018      	b.n	8001c9c <dir_register+0x12c>
		nent = 1;
 8001c6a:	2501      	movs	r5, #1
 8001c6c:	e01e      	b.n	8001cac <dir_register+0x13c>
				n = 0;					/* Not a blank entry. Restart to search */
 8001c6e:	4681      	mov	r9, r0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8001c70:	2101      	movs	r1, #1
 8001c72:	4620      	mov	r0, r4
 8001c74:	f7ff fce4 	bl	8001640 <dir_next>
		} while (res == FR_OK);
 8001c78:	4682      	mov	sl, r0
 8001c7a:	b328      	cbz	r0, 8001cc8 <dir_register+0x158>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8001c7c:	f1ba 0f04 	cmp.w	sl, #4
 8001c80:	d0d1      	beq.n	8001c26 <dir_register+0xb6>
 8001c82:	e7d2      	b.n	8001c2a <dir_register+0xba>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8001c84:	f1ba 0f04 	cmp.w	sl, #4
 8001c88:	d1cf      	bne.n	8001c2a <dir_register+0xba>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8001c8a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8001c8e:	72eb      	strb	r3, [r5, #11]
 8001c90:	603e      	str	r6, [r7, #0]
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8001c92:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8001c96:	079b      	lsls	r3, r3, #30
 8001c98:	d5e7      	bpl.n	8001c6a <dir_register+0xfa>
 8001c9a:	2500      	movs	r5, #0
		for (n = 0; lfn[n]; n++) ;
 8001c9c:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1e0      	bne.n	8001c66 <dir_register+0xf6>
		nent = (n + 25) / 13;
 8001ca4:	230d      	movs	r3, #13
 8001ca6:	3519      	adds	r5, #25
 8001ca8:	fbb5 f5f3 	udiv	r5, r5, r3
	res = dir_sdi(dp, 0);
 8001cac:	2100      	movs	r1, #0
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f7ff fb54 	bl	800135c <dir_sdi>
	if (res == FR_OK) {
 8001cb4:	4682      	mov	sl, r0
 8001cb6:	2800      	cmp	r0, #0
 8001cb8:	d1e0      	bne.n	8001c7c <dir_register+0x10c>
 8001cba:	4681      	mov	r9, r0
			res = move_window(dp->fs, dp->sect);
 8001cbc:	f504 5880 	add.w	r8, r4, #4096	; 0x1000
 8001cc0:	f108 0810 	add.w	r8, r8, #16
 8001cc4:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
 8001cc8:	f8d8 1000 	ldr.w	r1, [r8]
 8001ccc:	6830      	ldr	r0, [r6, #0]
 8001cce:	f7ff f8dc 	bl	8000e8a <move_window>
			if (res != FR_OK) break;
 8001cd2:	4682      	mov	sl, r0
 8001cd4:	2800      	cmp	r0, #0
 8001cd6:	d1d1      	bne.n	8001c7c <dir_register+0x10c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8001cd8:	f241 0314 	movw	r3, #4116	; 0x1014
 8001cdc:	18e2      	adds	r2, r4, r3
 8001cde:	58e3      	ldr	r3, [r4, r3]
 8001ce0:	9203      	str	r2, [sp, #12]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2be5      	cmp	r3, #229	; 0xe5
 8001ce6:	d001      	beq.n	8001cec <dir_register+0x17c>
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1c0      	bne.n	8001c6e <dir_register+0xfe>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8001cec:	f109 0901 	add.w	r9, r9, #1
 8001cf0:	454d      	cmp	r5, r9
 8001cf2:	d1bd      	bne.n	8001c70 <dir_register+0x100>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8001cf4:	3d01      	subs	r5, #1
 8001cf6:	d05f      	beq.n	8001db8 <dir_register+0x248>
		res = dir_sdi(dp, dp->index - nent);
 8001cf8:	f241 0306 	movw	r3, #4102	; 0x1006
 8001cfc:	5ae1      	ldrh	r1, [r4, r3]
 8001cfe:	4620      	mov	r0, r4
 8001d00:	1b49      	subs	r1, r1, r5
 8001d02:	f7ff fb2b 	bl	800135c <dir_sdi>
		if (res == FR_OK) {
 8001d06:	4682      	mov	sl, r0
 8001d08:	2800      	cmp	r0, #0
 8001d0a:	d18e      	bne.n	8001c2a <dir_register+0xba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8001d0c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d10:	58e0      	ldr	r0, [r4, r3]
 8001d12:	f7ff f849 	bl	8000da8 <sum_sfn>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8001d16:	f64f 79ff 	movw	r9, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8001d1a:	9002      	str	r0, [sp, #8]
				res = move_window(dp->fs, dp->sect);
 8001d1c:	f8d8 1000 	ldr.w	r1, [r8]
 8001d20:	6830      	ldr	r0, [r6, #0]
 8001d22:	f7ff f8b2 	bl	8000e8a <move_window>
 8001d26:	4682      	mov	sl, r0
				if (res != FR_OK) break;
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	f47f af7e 	bne.w	8001c2a <dir_register+0xba>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8001d2e:	9b03      	ldr	r3, [sp, #12]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8001d30:	f89d 2008 	ldrb.w	r2, [sp, #8]
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8d7 a000 	ldr.w	sl, [r7]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8001d3a:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8001d3c:	220f      	movs	r2, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8001d3e:	f04f 0e0d 	mov.w	lr, #13
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8001d42:	b2e9      	uxtb	r1, r5
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8001d44:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8001d46:	1e4a      	subs	r2, r1, #1
 8001d48:	fb0e f202 	mul.w	r2, lr, r2
	s = wc = 0;
 8001d4c:	4686      	mov	lr, r0
	dir[LDIR_Type] = 0;
 8001d4e:	7318      	strb	r0, [r3, #12]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8001d50:	7698      	strb	r0, [r3, #26]
 8001d52:	76d8      	strb	r0, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8001d54:	9201      	str	r2, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8001d56:	4548      	cmp	r0, r9
 8001d58:	bf1f      	itttt	ne
 8001d5a:	9a01      	ldrne	r2, [sp, #4]
 8001d5c:	f83a 0012 	ldrhne.w	r0, [sl, r2, lsl #1]
 8001d60:	3201      	addne	r2, #1
 8001d62:	9201      	strne	r2, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8001d64:	4a26      	ldr	r2, [pc, #152]	; (8001e00 <dir_register+0x290>)
 8001d66:	ea4f 2b10 	mov.w	fp, r0, lsr #8
 8001d6a:	f81e c002 	ldrb.w	ip, [lr, r2]
	} while (++s < 13);
 8001d6e:	f10e 0e01 	add.w	lr, lr, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8001d72:	f803 000c 	strb.w	r0, [r3, ip]
 8001d76:	449c      	add	ip, r3
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	bf08      	it	eq
 8001d7c:	4648      	moveq	r0, r9
	} while (++s < 13);
 8001d7e:	f1be 0f0d 	cmp.w	lr, #13
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8001d82:	f88c b001 	strb.w	fp, [ip, #1]
	} while (++s < 13);
 8001d86:	d1e6      	bne.n	8001d56 <dir_register+0x1e6>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8001d88:	4548      	cmp	r0, r9
 8001d8a:	d003      	beq.n	8001d94 <dir_register+0x224>
 8001d8c:	9a01      	ldr	r2, [sp, #4]
 8001d8e:	f83a 2012 	ldrh.w	r2, [sl, r2, lsl #1]
 8001d92:	b90a      	cbnz	r2, 8001d98 <dir_register+0x228>
 8001d94:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8001d98:	7019      	strb	r1, [r3, #0]
				dp->fs->wflag = 1;
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	f241 0304 	movw	r3, #4100	; 0x1004
 8001da0:	6832      	ldr	r2, [r6, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8001da2:	4620      	mov	r0, r4
				dp->fs->wflag = 1;
 8001da4:	54d1      	strb	r1, [r2, r3]
				res = dir_next(dp, 0);	/* Next entry */
 8001da6:	2100      	movs	r1, #0
 8001da8:	f7ff fc4a 	bl	8001640 <dir_next>
			} while (res == FR_OK && --nent);
 8001dac:	4682      	mov	sl, r0
 8001dae:	2800      	cmp	r0, #0
 8001db0:	f47f af3b 	bne.w	8001c2a <dir_register+0xba>
 8001db4:	3d01      	subs	r5, #1
 8001db6:	d1b1      	bne.n	8001d1c <dir_register+0x1ac>
		res = move_window(dp->fs, dp->sect);
 8001db8:	f241 0310 	movw	r3, #4112	; 0x1010
 8001dbc:	6830      	ldr	r0, [r6, #0]
 8001dbe:	58e1      	ldr	r1, [r4, r3]
 8001dc0:	f7ff f863 	bl	8000e8a <move_window>
		if (res == FR_OK) {
 8001dc4:	4682      	mov	sl, r0
 8001dc6:	2800      	cmp	r0, #0
 8001dc8:	f47f af2f 	bne.w	8001c2a <dir_register+0xba>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8001dcc:	f241 0514 	movw	r5, #4116	; 0x1014
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8001dd0:	f241 0718 	movw	r7, #4120	; 0x1018
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	4651      	mov	r1, sl
 8001dd8:	5960      	ldr	r0, [r4, r5]
 8001dda:	f7fe ff51 	bl	8000c80 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8001dde:	220b      	movs	r2, #11
 8001de0:	59e1      	ldr	r1, [r4, r7]
 8001de2:	5960      	ldr	r0, [r4, r5]
 8001de4:	f7fe ff42 	bl	8000c6c <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8001de8:	59e3      	ldr	r3, [r4, r7]
 8001dea:	5962      	ldr	r2, [r4, r5]
 8001dec:	7adb      	ldrb	r3, [r3, #11]
			dp->fs->wflag = 1;
 8001dee:	2101      	movs	r1, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8001df0:	f003 0318 	and.w	r3, r3, #24
 8001df4:	7313      	strb	r3, [r2, #12]
			dp->fs->wflag = 1;
 8001df6:	f241 0304 	movw	r3, #4100	; 0x1004
 8001dfa:	6832      	ldr	r2, [r6, #0]
 8001dfc:	54d1      	strb	r1, [r2, r3]
 8001dfe:	e714      	b.n	8001c2a <dir_register+0xba>
 8001e00:	0800270c 	.word	0x0800270c
 8001e04:	00011021 	.word	0x00011021

08001e08 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001e08:	2901      	cmp	r1, #1
{
 8001e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e0e:	4604      	mov	r4, r0
 8001e10:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001e12:	d802      	bhi.n	8001e1a <remove_chain+0x12>
		res = FR_INT_ERR;
 8001e14:	2002      	movs	r0, #2
 8001e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8001e1a:	f241 0614 	movw	r6, #4116	; 0x1014
 8001e1e:	5983      	ldr	r3, [r0, r6]
 8001e20:	4299      	cmp	r1, r3
 8001e22:	d2f7      	bcs.n	8001e14 <remove_chain+0xc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8001e24:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8001e28:	4406      	add	r6, r0
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8001e2a:	3710      	adds	r7, #16
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8001e2c:	6833      	ldr	r3, [r6, #0]
 8001e2e:	429d      	cmp	r5, r3
 8001e30:	d205      	bcs.n	8001e3e <remove_chain+0x36>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8001e32:	4629      	mov	r1, r5
 8001e34:	4620      	mov	r0, r4
 8001e36:	f7ff fa05 	bl	8001244 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8001e3a:	4680      	mov	r8, r0
 8001e3c:	b910      	cbnz	r0, 8001e44 <remove_chain+0x3c>
		res = FR_INT_ERR;
 8001e3e:	2000      	movs	r0, #0
 8001e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8001e44:	2801      	cmp	r0, #1
 8001e46:	d0e5      	beq.n	8001e14 <remove_chain+0xc>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8001e48:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001e4c:	d012      	beq.n	8001e74 <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8001e4e:	2200      	movs	r2, #0
 8001e50:	4629      	mov	r1, r5
 8001e52:	4620      	mov	r0, r4
 8001e54:	f7ff faee 	bl	8001434 <put_fat>
			if (res != FR_OK) break;
 8001e58:	b968      	cbnz	r0, 8001e76 <remove_chain+0x6e>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	d007      	beq.n	8001e70 <remove_chain+0x68>
				fs->fsi_flag |= 1;
 8001e60:	f241 0205 	movw	r2, #4101	; 0x1005
				fs->free_clust++;
 8001e64:	3301      	adds	r3, #1
 8001e66:	603b      	str	r3, [r7, #0]
				fs->fsi_flag |= 1;
 8001e68:	5ca3      	ldrb	r3, [r4, r2]
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	54a3      	strb	r3, [r4, r2]
{
 8001e70:	4645      	mov	r5, r8
 8001e72:	e7db      	b.n	8001e2c <remove_chain+0x24>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8001e74:	2001      	movs	r0, #1
}
 8001e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001e7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8001e7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001e7e:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8001e80:	a804      	add	r0, sp, #16
 8001e82:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8001e86:	9100      	str	r1, [sp, #0]
 8001e88:	4615      	mov	r5, r2


	vol = get_ldnumber(&rp);
 8001e8a:	f7fe ff9c 	bl	8000dc6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8001e8e:	1e06      	subs	r6, r0, #0
 8001e90:	db23      	blt.n	8001eda <f_mount+0x5e>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8001e92:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <f_mount+0x68>)
 8001e94:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]

	if (cfs) {
 8001e98:	b16b      	cbz	r3, 8001eb6 <f_mount+0x3a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8001e9a:	4913      	ldr	r1, [pc, #76]	; (8001ee8 <f_mount+0x6c>)
 8001e9c:	2400      	movs	r4, #0
 8001e9e:	6808      	ldr	r0, [r1, #0]
 8001ea0:	4283      	cmp	r3, r0
 8001ea2:	bf04      	itt	eq
 8001ea4:	2000      	moveq	r0, #0
 8001ea6:	6008      	streq	r0, [r1, #0]
 8001ea8:	68c8      	ldr	r0, [r1, #12]
 8001eaa:	4283      	cmp	r3, r0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8001eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
		if (Files[i].fs == fs) Files[i].fs = 0;
 8001eb0:	bf08      	it	eq
 8001eb2:	60cc      	streq	r4, [r1, #12]
		cfs->fs_type = 0;				/* Clear old fs object */
 8001eb4:	701c      	strb	r4, [r3, #0]
	}

	if (fs) {
 8001eb6:	9801      	ldr	r0, [sp, #4]
 8001eb8:	b118      	cbz	r0, 8001ec2 <f_mount+0x46>
		fs->fs_type = 0;				/* Clear new fs object */
 8001eba:	2100      	movs	r1, #0
 8001ebc:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8001ec0:	7019      	strb	r1, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8001ec2:	f842 0026 	str.w	r0, [r2, r6, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8001ec6:	b130      	cbz	r0, 8001ed6 <f_mount+0x5a>
 8001ec8:	2d01      	cmp	r5, #1
 8001eca:	d108      	bne.n	8001ede <f_mount+0x62>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8001ecc:	2200      	movs	r2, #0
 8001ece:	4669      	mov	r1, sp
 8001ed0:	a801      	add	r0, sp, #4
 8001ed2:	f7ff f827 	bl	8000f24 <find_volume>
	LEAVE_FF(fs, res);
}
 8001ed6:	b004      	add	sp, #16
 8001ed8:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8001eda:	200b      	movs	r0, #11
 8001edc:	e7fb      	b.n	8001ed6 <f_mount+0x5a>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8001ede:	2000      	movs	r0, #0
 8001ee0:	e7f9      	b.n	8001ed6 <f_mount+0x5a>
 8001ee2:	bf00      	nop
 8001ee4:	20000040 	.word	0x20000040
 8001ee8:	20000044 	.word	0x20000044

08001eec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8001eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef0:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8001ef4:	b081      	sub	sp, #4
 8001ef6:	f10d 0920 	add.w	r9, sp, #32
 8001efa:	f849 1c1c 	str.w	r1, [r9, #-28]
 8001efe:	4693      	mov	fp, r2
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8001f00:	4606      	mov	r6, r0
 8001f02:	2800      	cmp	r0, #0
 8001f04:	f000 80d0 	beq.w	80020a8 <f_open+0x1bc>
	fp->fs = 0;			/* Clear file object */
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f500 5a80 	add.w	sl, r0, #4096	; 0x1000

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8001f0e:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
	fp->fs = 0;			/* Clear file object */
 8001f12:	f8ca 3000 	str.w	r3, [sl]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8001f16:	f002 021e 	and.w	r2, r2, #30
 8001f1a:	a901      	add	r1, sp, #4
 8001f1c:	3018      	adds	r0, #24
 8001f1e:	f7ff f801 	bl	8000f24 <find_volume>
 8001f22:	f1a9 0808 	sub.w	r8, r9, #8
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8001f26:	4605      	mov	r5, r0
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	f040 80b7 	bne.w	800209c <f_open+0x1b0>
		INIT_BUF(dj);
 8001f2e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f32:	f1a9 0214 	sub.w	r2, r9, #20
 8001f36:	f848 2003 	str.w	r2, [r8, r3]
 8001f3a:	4a75      	ldr	r2, [pc, #468]	; (8002110 <f_open+0x224>)
 8001f3c:	f508 5381 	add.w	r3, r8, #4128	; 0x1020
		res = follow_path(&dj, path);	/* Follow the file path */
 8001f40:	9901      	ldr	r1, [sp, #4]
 8001f42:	4640      	mov	r0, r8
		INIT_BUF(dj);
 8001f44:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 8001f46:	f7ff fcd3 	bl	80018f0 <follow_path>
		dir = dj.dir;
 8001f4a:	f241 0314 	movw	r3, #4116	; 0x1014
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8001f4e:	f00b 071f 	and.w	r7, fp, #31
		dir = dj.dir;
 8001f52:	f858 4003 	ldr.w	r4, [r8, r3]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8001f56:	b948      	cbnz	r0, 8001f6c <f_open+0x80>
			if (!dir)	/* Default directory itself */
 8001f58:	2c00      	cmp	r4, #0
 8001f5a:	d06b      	beq.n	8002034 <f_open+0x148>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8001f5c:	f017 0f1e 	tst.w	r7, #30
 8001f60:	bf14      	ite	ne
 8001f62:	2101      	movne	r1, #1
 8001f64:	2100      	moveq	r1, #0
 8001f66:	4640      	mov	r0, r8
 8001f68:	f7fe fe92 	bl	8000c90 <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8001f6c:	f01b 0f1c 	tst.w	fp, #28
 8001f70:	d06b      	beq.n	800204a <f_open+0x15e>
			if (res != FR_OK) {					/* No file, create new */
 8001f72:	2800      	cmp	r0, #0
 8001f74:	d060      	beq.n	8002038 <f_open+0x14c>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8001f76:	2804      	cmp	r0, #4
 8001f78:	d15a      	bne.n	8002030 <f_open+0x144>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001f7a:	4b66      	ldr	r3, [pc, #408]	; (8002114 <f_open+0x228>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	b11a      	cbz	r2, 8001f88 <f_open+0x9c>
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f040 80c1 	bne.w	800210a <f_open+0x21e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8001f88:	4640      	mov	r0, r8
 8001f8a:	f7ff fdf1 	bl	8001b70 <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	d14e      	bne.n	8002030 <f_open+0x144>
				dir = dj.dir;					/* New entry */
 8001f92:	f241 0314 	movw	r3, #4116	; 0x1014
 8001f96:	f858 4003 	ldr.w	r4, [r8, r3]
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8001f9a:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8001f9e:	073b      	lsls	r3, r7, #28
 8001fa0:	d55d      	bpl.n	800205e <f_open+0x172>
				dw = GET_FATTIME();				/* Created time */
 8001fa2:	f000 f91d 	bl	80021e0 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8001fa6:	f04f 0b00 	mov.w	fp, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 8001faa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8001fae:	73e3      	strb	r3, [r4, #15]
 8001fb0:	0c03      	lsrs	r3, r0, #16
 8001fb2:	73a0      	strb	r0, [r4, #14]
 8001fb4:	7423      	strb	r3, [r4, #16]
 8001fb6:	0e00      	lsrs	r0, r0, #24
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8001fb8:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8001fbc:	f884 b00b 	strb.w	fp, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8001fc0:	f884 b01c 	strb.w	fp, [r4, #28]
 8001fc4:	f884 b01d 	strb.w	fp, [r4, #29]
 8001fc8:	f884 b01e 	strb.w	fp, [r4, #30]
 8001fcc:	f884 b01f 	strb.w	fp, [r4, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8001fd0:	7460      	strb	r0, [r4, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8001fd2:	3318      	adds	r3, #24
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fdc:	7818      	ldrb	r0, [r3, #0]
 8001fde:	f7fe ff0a 	bl	8000df6 <ld_clust.isra.0>
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	f241 0204 	movw	r2, #4100	; 0x1004
 8001fe8:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
	ST_WORD(dir + DIR_FstClusLO, cl);
 8001fec:	f884 b01a 	strb.w	fp, [r4, #26]
 8001ff0:	f884 b01b 	strb.w	fp, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8001ff4:	f884 b014 	strb.w	fp, [r4, #20]
 8001ff8:	f884 b015 	strb.w	fp, [r4, #21]
				dj.fs->wflag = 1;
 8001ffc:	3318      	adds	r3, #24
 8001ffe:	681b      	ldr	r3, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 8002000:	4683      	mov	fp, r0
				dj.fs->wflag = 1;
 8002002:	5499      	strb	r1, [r3, r2]
				if (cl) {						/* Remove the cluster chain if exist */
 8002004:	b358      	cbz	r0, 800205e <f_open+0x172>
					dw = dj.fs->winsect;
 8002006:	f241 022c 	movw	r2, #4140	; 0x102c
 800200a:	589a      	ldr	r2, [r3, r2]
					res = remove_chain(dj.fs, cl);
 800200c:	4601      	mov	r1, r0
 800200e:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 8002010:	9200      	str	r2, [sp, #0]
					res = remove_chain(dj.fs, cl);
 8002012:	f7ff fef9 	bl	8001e08 <remove_chain>
					if (res == FR_OK) {
 8002016:	9a00      	ldr	r2, [sp, #0]
 8002018:	b950      	cbnz	r0, 8002030 <f_open+0x144>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800201a:	f241 010c 	movw	r1, #4108	; 0x100c
 800201e:	f8d9 0ff8 	ldr.w	r0, [r9, #4088]	; 0xff8
 8002022:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8002026:	5043      	str	r3, [r0, r1]
						res = move_window(dj.fs, dw);
 8002028:	4611      	mov	r1, r2
 800202a:	f7fe ff2e 	bl	8000e8a <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 800202e:	b1b0      	cbz	r0, 800205e <f_open+0x172>
					res = FR_DENIED;
 8002030:	4605      	mov	r5, r0
 8002032:	e033      	b.n	800209c <f_open+0x1b0>
				res = FR_INVALID_NAME;
 8002034:	2006      	movs	r0, #6
 8002036:	e799      	b.n	8001f6c <f_open+0x80>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8002038:	7ae3      	ldrb	r3, [r4, #11]
 800203a:	f013 0f11 	tst.w	r3, #17
 800203e:	d137      	bne.n	80020b0 <f_open+0x1c4>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8002040:	f01b 0f04 	tst.w	fp, #4
 8002044:	d0ab      	beq.n	8001f9e <f_open+0xb2>
						res = FR_EXIST;
 8002046:	2508      	movs	r5, #8
 8002048:	e028      	b.n	800209c <f_open+0x1b0>
			if (res == FR_OK) {					/* Follow succeeded */
 800204a:	2800      	cmp	r0, #0
 800204c:	d1f0      	bne.n	8002030 <f_open+0x144>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800204e:	7ae3      	ldrb	r3, [r4, #11]
 8002050:	06d8      	lsls	r0, r3, #27
 8002052:	d42b      	bmi.n	80020ac <f_open+0x1c0>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8002054:	f01b 0f02 	tst.w	fp, #2
 8002058:	d001      	beq.n	800205e <f_open+0x172>
 800205a:	07da      	lsls	r2, r3, #31
 800205c:	d428      	bmi.n	80020b0 <f_open+0x1c4>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800205e:	073b      	lsls	r3, r7, #28
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8002060:	f241 032c 	movw	r3, #4140	; 0x102c
 8002064:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 8002068:	f102 0218 	add.w	r2, r2, #24
 800206c:	6812      	ldr	r2, [r2, #0]
				mode |= FA__WRITTEN;
 800206e:	bf48      	it	mi
 8002070:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8002074:	58d2      	ldr	r2, [r2, r3]
 8002076:	f241 031c 	movw	r3, #4124	; 0x101c
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800207a:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800207e:	50f2      	str	r2, [r6, r3]
			fp->dir_ptr = dir;
 8002080:	f506 5381 	add.w	r3, r6, #4128	; 0x1020
 8002084:	601c      	str	r4, [r3, #0]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002086:	bf14      	ite	ne
 8002088:	2101      	movne	r1, #1
 800208a:	2100      	moveq	r1, #0
 800208c:	4640      	mov	r0, r8
 800208e:	f7fe fe35 	bl	8000cfc <inc_lock>
 8002092:	f241 0328 	movw	r3, #4136	; 0x1028
 8002096:	50f0      	str	r0, [r6, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 8002098:	b960      	cbnz	r0, 80020b4 <f_open+0x1c8>
 800209a:	2502      	movs	r5, #2
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800209c:	4628      	mov	r0, r5
 800209e:	f50d 5d82 	add.w	sp, sp, #4160	; 0x1040
 80020a2:	b001      	add	sp, #4
 80020a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fp) return FR_INVALID_OBJECT;
 80020a8:	2509      	movs	r5, #9
 80020aa:	e7f7      	b.n	800209c <f_open+0x1b0>
					res = FR_NO_FILE;
 80020ac:	2504      	movs	r5, #4
 80020ae:	e7f5      	b.n	800209c <f_open+0x1b0>
					res = FR_DENIED;
 80020b0:	2507      	movs	r5, #7
 80020b2:	e7f3      	b.n	800209c <f_open+0x1b0>
			fp->flag = mode;					/* File access mode */
 80020b4:	f241 0906 	movw	r9, #4102	; 0x1006
			fp->err = 0;						/* Clear error flag */
 80020b8:	f241 0307 	movw	r3, #4103	; 0x1007
			fp->flag = mode;					/* File access mode */
 80020bc:	f806 7009 	strb.w	r7, [r6, r9]
			fp->err = 0;						/* Clear error flag */
 80020c0:	2700      	movs	r7, #0
 80020c2:	54f7      	strb	r7, [r6, r3]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80020c4:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80020c8:	3318      	adds	r3, #24
 80020ca:	f8d3 8000 	ldr.w	r8, [r3]
 80020ce:	4621      	mov	r1, r4
 80020d0:	f508 5380 	add.w	r3, r8, #4096	; 0x1000
 80020d4:	7818      	ldrb	r0, [r3, #0]
 80020d6:	f7fe fe8e 	bl	8000df6 <ld_clust.isra.0>
 80020da:	f241 0310 	movw	r3, #4112	; 0x1010
 80020de:	50f0      	str	r0, [r6, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80020e0:	f241 030c 	movw	r3, #4108	; 0x100c
 80020e4:	69e2      	ldr	r2, [r4, #28]
 80020e6:	50f2      	str	r2, [r6, r3]
			fp->fptr = 0;						/* File pointer */
 80020e8:	f241 0308 	movw	r3, #4104	; 0x1008
 80020ec:	50f7      	str	r7, [r6, r3]
			fp->dsect = 0;
 80020ee:	f241 0318 	movw	r3, #4120	; 0x1018
 80020f2:	50f7      	str	r7, [r6, r3]
			fp->cltbl = 0;						/* Normal seek mode */
 80020f4:	f241 0324 	movw	r3, #4132	; 0x1024
 80020f8:	50f7      	str	r7, [r6, r3]
			fp->id = fp->fs->id;
 80020fa:	f241 0304 	movw	r3, #4100	; 0x1004
 80020fe:	f838 2009 	ldrh.w	r2, [r8, r9]
			fp->fs = dj.fs;	 					/* Validate file object */
 8002102:	f8ca 8000 	str.w	r8, [sl]
			fp->id = fp->fs->id;
 8002106:	52f2      	strh	r2, [r6, r3]
 8002108:	e7c8      	b.n	800209c <f_open+0x1b0>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800210a:	2012      	movs	r0, #18
 800210c:	e790      	b.n	8002030 <f_open+0x144>
 800210e:	bf00      	nop
 8002110:	2000005e 	.word	0x2000005e
 8002114:	20000044 	.word	0x20000044

08002118 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8002118:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <FATFS_LinkDriverEx+0x40>)
 800211c:	7a5c      	ldrb	r4, [r3, #9]
 800211e:	2c01      	cmp	r4, #1
 8002120:	d818      	bhi.n	8002154 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 8002122:	2400      	movs	r4, #0
 8002124:	7a5d      	ldrb	r5, [r3, #9]
 8002126:	b2ed      	uxtb	r5, r5
 8002128:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 800212a:	7a5d      	ldrb	r5, [r3, #9]
 800212c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8002130:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8002132:	7a58      	ldrb	r0, [r3, #9]
 8002134:	4418      	add	r0, r3
 8002136:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8002138:	7a5a      	ldrb	r2, [r3, #9]
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	1c50      	adds	r0, r2, #1
 800213e:	b2c0      	uxtb	r0, r0
 8002140:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8002142:	233a      	movs	r3, #58	; 0x3a
 8002144:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8002146:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8002148:	3230      	adds	r2, #48	; 0x30
 800214a:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800214c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800214e:	70cc      	strb	r4, [r1, #3]
 8002150:	4620      	mov	r0, r4
 8002152:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8002154:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 8002156:	bd30      	pop	{r4, r5, pc}
 8002158:	20000260 	.word	0x20000260

0800215c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800215c:	2200      	movs	r2, #0
 800215e:	f7ff bfdb 	b.w	8002118 <FATFS_LinkDriverEx>
	...

08002164 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8002164:	287f      	cmp	r0, #127	; 0x7f
{
 8002166:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 8002168:	d916      	bls.n	8002198 <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800216a:	b131      	cbz	r1, 800217a <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800216c:	28ff      	cmp	r0, #255	; 0xff
 800216e:	d812      	bhi.n	8002196 <ff_convert+0x32>
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <ff_convert+0x38>)
 8002172:	3880      	subs	r0, #128	; 0x80
 8002174:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8002178:	bd10      	pop	{r4, pc}

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
 800217a:	4a08      	ldr	r2, [pc, #32]	; (800219c <ff_convert+0x38>)
 800217c:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
 8002180:	b28b      	uxth	r3, r1
 8002182:	4284      	cmp	r4, r0
 8002184:	d003      	beq.n	800218e <ff_convert+0x2a>
 8002186:	3101      	adds	r1, #1
			for (c = 0; c < 0x80; c++) {
 8002188:	2980      	cmp	r1, #128	; 0x80
 800218a:	d1f7      	bne.n	800217c <ff_convert+0x18>
 800218c:	460b      	mov	r3, r1
			}
			c = (c + 0x80) & 0xFF;
 800218e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8002192:	b2c0      	uxtb	r0, r0
 8002194:	bd10      	pop	{r4, pc}
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8002196:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8002198:	bd10      	pop	{r4, pc}
 800219a:	bf00      	nop
 800219c:	0800272a 	.word	0x0800272a

080021a0 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80021a0:	2300      	movs	r3, #0
 80021a2:	4906      	ldr	r1, [pc, #24]	; (80021bc <ff_wtoupper+0x1c>)
 80021a4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80021a8:	b122      	cbz	r2, 80021b4 <ff_wtoupper+0x14>
 80021aa:	4282      	cmp	r2, r0
 80021ac:	d103      	bne.n	80021b6 <ff_wtoupper+0x16>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80021ae:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <ff_wtoupper+0x20>)
 80021b0:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
}
 80021b4:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80021b6:	3301      	adds	r3, #1
 80021b8:	e7f4      	b.n	80021a4 <ff_wtoupper+0x4>
 80021ba:	bf00      	nop
 80021bc:	0800282a 	.word	0x0800282a
 80021c0:	08002a0a 	.word	0x08002a0a

080021c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80021c4:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80021c6:	4903      	ldr	r1, [pc, #12]	; (80021d4 <MX_FATFS_Init+0x10>)
 80021c8:	4803      	ldr	r0, [pc, #12]	; (80021d8 <MX_FATFS_Init+0x14>)
 80021ca:	f7ff ffc7 	bl	800215c <FATFS_LinkDriver>
 80021ce:	4b03      	ldr	r3, [pc, #12]	; (80021dc <MX_FATFS_Init+0x18>)
 80021d0:	7018      	strb	r0, [r3, #0]
 80021d2:	bd08      	pop	{r3, pc}
 80021d4:	20000270 	.word	0x20000270
 80021d8:	20000010 	.word	0x20000010
 80021dc:	20000274 	.word	0x20000274

080021e0 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 80021e0:	2000      	movs	r0, #0
 80021e2:	4770      	bx	lr

080021e4 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e4:	4b26      	ldr	r3, [pc, #152]	; (8002280 <MX_GPIO_Init+0x9c>)
{
 80021e6:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e8:	699a      	ldr	r2, [r3, #24]
{
 80021ea:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ec:	f042 0210 	orr.w	r2, r2, #16
 80021f0:	619a      	str	r2, [r3, #24]
 80021f2:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80021f4:	4d23      	ldr	r5, [pc, #140]	; (8002284 <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f6:	f002 0210 	and.w	r2, r2, #16
 80021fa:	9200      	str	r2, [sp, #0]
 80021fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021fe:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002200:	4628      	mov	r0, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002202:	f042 0220 	orr.w	r2, r2, #32
 8002206:	619a      	str	r2, [r3, #24]
 8002208:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800220a:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800220c:	f002 0220 	and.w	r2, r2, #32
 8002210:	9201      	str	r2, [sp, #4]
 8002212:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002214:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002218:	f042 0204 	orr.w	r2, r2, #4
 800221c:	619a      	str	r2, [r3, #24]
 800221e:	699a      	ldr	r2, [r3, #24]
 8002220:	f002 0204 	and.w	r2, r2, #4
 8002224:	9202      	str	r2, [sp, #8]
 8002226:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	f042 0208 	orr.w	r2, r2, #8
 800222e:	619a      	str	r2, [r3, #24]
 8002230:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002232:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	9303      	str	r3, [sp, #12]
 800223a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800223c:	f7fe f928 	bl	8000490 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8002240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002244:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <MX_GPIO_Init+0xa4>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002248:	a904      	add	r1, sp, #16
 800224a:	4810      	ldr	r0, [pc, #64]	; (800228c <MX_GPIO_Init+0xa8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800224c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002250:	f7fe f83e 	bl	80002d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002254:	2340      	movs	r3, #64	; 0x40
 8002256:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800225c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2302      	movs	r3, #2
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002260:	a904      	add	r1, sp, #16
 8002262:	4628      	mov	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002266:	f7fe f833 	bl	80002d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800226a:	4622      	mov	r2, r4
 800226c:	4621      	mov	r1, r4
 800226e:	2028      	movs	r0, #40	; 0x28
 8002270:	f7fd ffc6 	bl	8000200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002274:	2028      	movs	r0, #40	; 0x28
 8002276:	f7fd fff7 	bl	8000268 <HAL_NVIC_EnableIRQ>

}
 800227a:	b009      	add	sp, #36	; 0x24
 800227c:	bd30      	pop	{r4, r5, pc}
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	40010c00 	.word	0x40010c00
 8002288:	10210000 	.word	0x10210000
 800228c:	40011000 	.word	0x40011000

08002290 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002290:	2301      	movs	r3, #1
{
 8002292:	b510      	push	{r4, lr}
 8002294:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002296:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800229a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800229c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800229e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80022a2:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022a4:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022a6:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022a8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ae:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022b0:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022b4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b6:	f7fe f8fd 	bl	80004b4 <HAL_RCC_OscConfig>
 80022ba:	b100      	cbz	r0, 80022be <SystemClock_Config+0x2e>
 80022bc:	e7fe      	b.n	80022bc <SystemClock_Config+0x2c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022be:	230f      	movs	r3, #15
 80022c0:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022c6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022c8:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022ca:	4621      	mov	r1, r4
 80022cc:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ce:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022d0:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022d2:	f7fe fab7 	bl	8000844 <HAL_RCC_ClockConfig>
 80022d6:	4604      	mov	r4, r0
 80022d8:	b100      	cbz	r0, 80022dc <SystemClock_Config+0x4c>
 80022da:	e7fe      	b.n	80022da <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80022dc:	f7fe fb56 	bl	800098c <HAL_RCC_GetHCLKFreq>
 80022e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80022e8:	f7fd ffca 	bl	8000280 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80022ec:	2004      	movs	r0, #4
 80022ee:	f7fd ffdd 	bl	80002ac <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80022f2:	4622      	mov	r2, r4
 80022f4:	4621      	mov	r1, r4
 80022f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022fa:	f7fd ff81 	bl	8000200 <HAL_NVIC_SetPriority>
}
 80022fe:	b010      	add	sp, #64	; 0x40
 8002300:	bd10      	pop	{r4, pc}
	...

08002304 <main>:
{
 8002304:	b500      	push	{lr}
 8002306:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 800230a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800230c:	f7fd ff42 	bl	8000194 <HAL_Init>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002310:	2201      	movs	r2, #1
 8002312:	2140      	movs	r1, #64	; 0x40
 8002314:	4812      	ldr	r0, [pc, #72]	; (8002360 <main+0x5c>)
 8002316:	f7fe f8bb 	bl	8000490 <HAL_GPIO_WritePin>
  fr = f_mount(&fs, "0:/", 1);
 800231a:	f50d 5081 	add.w	r0, sp, #4128	; 0x1020
 800231e:	2201      	movs	r2, #1
 8002320:	4910      	ldr	r1, [pc, #64]	; (8002364 <main+0x60>)
 8002322:	3010      	adds	r0, #16
 8002324:	f7ff fdaa 	bl	8001e7c <f_mount>
  if (fr == FR_OK)
 8002328:	b920      	cbnz	r0, 8002334 <main+0x30>
	  fr = f_open(&file, "sd_write.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800232a:	220a      	movs	r2, #10
 800232c:	490e      	ldr	r1, [pc, #56]	; (8002368 <main+0x64>)
 800232e:	a801      	add	r0, sp, #4
 8002330:	f7ff fddc 	bl	8001eec <f_open>
  fr = f_mount(NULL, "0:/", 1);
 8002334:	2201      	movs	r2, #1
 8002336:	490b      	ldr	r1, [pc, #44]	; (8002364 <main+0x60>)
 8002338:	2000      	movs	r0, #0
 800233a:	f7ff fd9f 	bl	8001e7c <f_mount>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800233e:	2200      	movs	r2, #0
 8002340:	2140      	movs	r1, #64	; 0x40
 8002342:	4807      	ldr	r0, [pc, #28]	; (8002360 <main+0x5c>)
 8002344:	f7fe f8a4 	bl	8000490 <HAL_GPIO_WritePin>
  SystemClock_Config();
 8002348:	f7ff ffa2 	bl	8002290 <SystemClock_Config>
  MX_GPIO_Init();
 800234c:	f7ff ff4a 	bl	80021e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002350:	f000 f80e 	bl	8002370 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002354:	f7ff ff36 	bl	80021c4 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8002358:	f000 f8e4 	bl	8002524 <MX_USART2_UART_Init>
 800235c:	e7fe      	b.n	800235c <main+0x58>
 800235e:	bf00      	nop
 8002360:	40010c00 	.word	0x40010c00
 8002364:	08002bea 	.word	0x08002bea
 8002368:	08002bee 	.word	0x08002bee

0800236c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800236c:	e7fe      	b.n	800236c <_Error_Handler>
	...

08002370 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002370:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002372:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi1.Instance = SPI1;
 8002376:	480e      	ldr	r0, [pc, #56]	; (80023b0 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002378:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <MX_SPI1_Init+0x44>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800237a:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800237e:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002382:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002384:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002386:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002388:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800238a:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800238c:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800238e:	2220      	movs	r2, #32
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002390:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002392:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002394:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002396:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002398:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 800239a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800239c:	f7fe fb1c 	bl	80009d8 <HAL_SPI_Init>
 80023a0:	b128      	cbz	r0, 80023ae <MX_SPI1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80023a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80023a6:	214f      	movs	r1, #79	; 0x4f
 80023a8:	4803      	ldr	r0, [pc, #12]	; (80023b8 <MX_SPI1_Init+0x48>)
 80023aa:	f7ff bfdf 	b.w	800236c <_Error_Handler>
 80023ae:	bd08      	pop	{r3, pc}
 80023b0:	200022d4 	.word	0x200022d4
 80023b4:	40013000 	.word	0x40013000
 80023b8:	08002bfb 	.word	0x08002bfb

080023bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 80023be:	6802      	ldr	r2, [r0, #0]
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_SPI_MspInit+0x4c>)
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d11d      	bne.n	8002402 <HAL_SPI_MspInit+0x46>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023c6:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80023ca:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023cc:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023d2:	619a      	str	r2, [r3, #24]
 80023d4:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d6:	480d      	ldr	r0, [pc, #52]	; (800240c <HAL_SPI_MspInit+0x50>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80023e0:	23a0      	movs	r3, #160	; 0xa0
 80023e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ec:	f7fd ff70 	bl	80002d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023f0:	2340      	movs	r3, #64	; 0x40
 80023f2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f4:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	a902      	add	r1, sp, #8
 80023f8:	4804      	ldr	r0, [pc, #16]	; (800240c <HAL_SPI_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fe:	f7fd ff67 	bl	80002d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002402:	b007      	add	sp, #28
 8002404:	f85d fb04 	ldr.w	pc, [sp], #4
 8002408:	40013000 	.word	0x40013000
 800240c:	40010800 	.word	0x40010800

08002410 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_MspInit+0x98>)
{
 8002412:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002414:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002416:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	619a      	str	r2, [r3, #24]
 800241e:	699a      	ldr	r2, [r3, #24]
 8002420:	f002 0201 	and.w	r2, r2, #1
 8002424:	9200      	str	r2, [sp, #0]
 8002426:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800242e:	61da      	str	r2, [r3, #28]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243a:	f7fd fecf 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	f06f 000b 	mvn.w	r0, #11
 8002444:	4611      	mov	r1, r2
 8002446:	f7fd fedb 	bl	8000200 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	f06f 000a 	mvn.w	r0, #10
 8002450:	4611      	mov	r1, r2
 8002452:	f7fd fed5 	bl	8000200 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	f06f 0009 	mvn.w	r0, #9
 800245c:	4611      	mov	r1, r2
 800245e:	f7fd fecf 	bl	8000200 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	f06f 0004 	mvn.w	r0, #4
 8002468:	4611      	mov	r1, r2
 800246a:	f7fd fec9 	bl	8000200 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	f06f 0003 	mvn.w	r0, #3
 8002474:	4611      	mov	r1, r2
 8002476:	f7fd fec3 	bl	8000200 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	f06f 0001 	mvn.w	r0, #1
 8002480:	4611      	mov	r1, r2
 8002482:	f7fd febd 	bl	8000200 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002486:	2200      	movs	r2, #0
 8002488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800248c:	4611      	mov	r1, r2
 800248e:	f7fd feb7 	bl	8000200 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002492:	4a06      	ldr	r2, [pc, #24]	; (80024ac <HAL_MspInit+0x9c>)
 8002494:	6853      	ldr	r3, [r2, #4]
 8002496:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800249a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800249e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a0:	b003      	add	sp, #12
 80024a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40010000 	.word	0x40010000

080024b0 <NMI_Handler>:
 80024b0:	4770      	bx	lr

080024b2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80024b2:	e7fe      	b.n	80024b2 <HardFault_Handler>

080024b4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80024b4:	e7fe      	b.n	80024b4 <MemManage_Handler>

080024b6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80024b6:	e7fe      	b.n	80024b6 <BusFault_Handler>

080024b8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80024b8:	e7fe      	b.n	80024b8 <UsageFault_Handler>

080024ba <SVC_Handler>:
 80024ba:	4770      	bx	lr

080024bc <DebugMon_Handler>:
 80024bc:	4770      	bx	lr

080024be <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80024be:	4770      	bx	lr

080024c0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80024c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c2:	f7fd fe79 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80024ca:	f7fd befc 	b.w	80002c6 <HAL_SYSTICK_IRQHandler>

080024ce <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024ce:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024d2:	f7fd bfe3 	b.w	800049c <HAL_GPIO_EXTI_IRQHandler>
	...

080024d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <SystemInit+0x40>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	f042 0201 	orr.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	4a0d      	ldr	r2, [pc, #52]	; (800251c <SystemInit+0x44>)
 80024e6:	400a      	ands	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80024f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024f4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024fc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002504:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002506:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800250a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800250c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <SystemInit+0x48>)
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	f8ff0000 	.word	0xf8ff0000
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002524:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8002526:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart2.Instance = USART2;
 800252a:	480b      	ldr	r0, [pc, #44]	; (8002558 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <MX_USART2_UART_Init+0x38>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800252e:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8002530:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002534:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002536:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002538:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800253a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800253c:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002542:	f7fe fb23 	bl	8000b8c <HAL_UART_Init>
 8002546:	b128      	cbz	r0, 8002554 <MX_USART2_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8002548:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800254c:	214c      	movs	r1, #76	; 0x4c
 800254e:	4804      	ldr	r0, [pc, #16]	; (8002560 <MX_USART2_UART_Init+0x3c>)
 8002550:	f7ff bf0c 	b.w	800236c <_Error_Handler>
 8002554:	bd08      	pop	{r3, pc}
 8002556:	bf00      	nop
 8002558:	2000232c 	.word	0x2000232c
 800255c:	40004400 	.word	0x40004400
 8002560:	08002c20 	.word	0x08002c20

08002564 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002564:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8002566:	6802      	ldr	r2, [r0, #0]
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <HAL_UART_MspInit+0x38>)
 800256a:	429a      	cmp	r2, r3
 800256c:	d113      	bne.n	8002596 <HAL_UART_MspInit+0x32>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800256e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002572:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002574:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8002576:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800257a:	61da      	str	r2, [r3, #28]
 800257c:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257e:	4808      	ldr	r0, [pc, #32]	; (80025a0 <HAL_UART_MspInit+0x3c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002588:	230c      	movs	r3, #12
 800258a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002590:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f7fd fe9d 	bl	80002d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002596:	b007      	add	sp, #28
 8002598:	f85d fb04 	ldr.w	pc, [sp], #4
 800259c:	40004400 	.word	0x40004400
 80025a0:	40010800 	.word	0x40010800

080025a4 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80025a4:	2201      	movs	r2, #1
 80025a6:	4b02      	ldr	r3, [pc, #8]	; (80025b0 <USER_status+0xc>)
 80025a8:	701a      	strb	r2, [r3, #0]
    return Stat;
 80025aa:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END STATUS */
}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	2000000c 	.word	0x2000000c

080025b4 <USER_write>:
{ 
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
  /* USER CODE END WRITE */
}
 80025b4:	2000      	movs	r0, #0
 80025b6:	4770      	bx	lr

080025b8 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 80025b8:	2001      	movs	r0, #1
 80025ba:	4770      	bx	lr

080025bc <USER_read>:
 80025bc:	2000      	movs	r0, #0
 80025be:	4770      	bx	lr

080025c0 <USER_initialize>:
 80025c0:	2201      	movs	r2, #1
 80025c2:	4b02      	ldr	r3, [pc, #8]	; (80025cc <USER_initialize+0xc>)
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	7818      	ldrb	r0, [r3, #0]
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	2000000c 	.word	0x2000000c

080025d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80025d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80025d2:	e003      	b.n	80025dc <LoopCopyDataInit>

080025d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80025d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80025d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80025da:	3104      	adds	r1, #4

080025dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80025dc:	480a      	ldr	r0, [pc, #40]	; (8002608 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80025e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80025e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80025e4:	d3f6      	bcc.n	80025d4 <CopyDataInit>
  ldr r2, =_sbss
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80025e8:	e002      	b.n	80025f0 <LoopFillZerobss>

080025ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80025ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80025ec:	f842 3b04 	str.w	r3, [r2], #4

080025f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80025f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80025f4:	d3f9      	bcc.n	80025ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025f6:	f7ff ff6f 	bl	80024d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025fa:	f000 f80f 	bl	800261c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025fe:	f7ff fe81 	bl	8002304 <main>
  bx lr
 8002602:	4770      	bx	lr
  ldr r3, =_sidata
 8002604:	08002c38 	.word	0x08002c38
  ldr r0, =_sdata
 8002608:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800260c:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8002610:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8002614:	2000236c 	.word	0x2000236c

08002618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002618:	e7fe      	b.n	8002618 <ADC1_2_IRQHandler>
	...

0800261c <__libc_init_array>:
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	2500      	movs	r5, #0
 8002620:	4e0c      	ldr	r6, [pc, #48]	; (8002654 <__libc_init_array+0x38>)
 8002622:	4c0d      	ldr	r4, [pc, #52]	; (8002658 <__libc_init_array+0x3c>)
 8002624:	1ba4      	subs	r4, r4, r6
 8002626:	10a4      	asrs	r4, r4, #2
 8002628:	42a5      	cmp	r5, r4
 800262a:	d109      	bne.n	8002640 <__libc_init_array+0x24>
 800262c:	f000 f81a 	bl	8002664 <_init>
 8002630:	2500      	movs	r5, #0
 8002632:	4e0a      	ldr	r6, [pc, #40]	; (800265c <__libc_init_array+0x40>)
 8002634:	4c0a      	ldr	r4, [pc, #40]	; (8002660 <__libc_init_array+0x44>)
 8002636:	1ba4      	subs	r4, r4, r6
 8002638:	10a4      	asrs	r4, r4, #2
 800263a:	42a5      	cmp	r5, r4
 800263c:	d105      	bne.n	800264a <__libc_init_array+0x2e>
 800263e:	bd70      	pop	{r4, r5, r6, pc}
 8002640:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002644:	4798      	blx	r3
 8002646:	3501      	adds	r5, #1
 8002648:	e7ee      	b.n	8002628 <__libc_init_array+0xc>
 800264a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800264e:	4798      	blx	r3
 8002650:	3501      	adds	r5, #1
 8002652:	e7f2      	b.n	800263a <__libc_init_array+0x1e>
 8002654:	08002c30 	.word	0x08002c30
 8002658:	08002c30 	.word	0x08002c30
 800265c:	08002c30 	.word	0x08002c30
 8002660:	08002c34 	.word	0x08002c34

08002664 <_init>:
 8002664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002666:	bf00      	nop
 8002668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800266a:	bc08      	pop	{r3}
 800266c:	469e      	mov	lr, r3
 800266e:	4770      	bx	lr

08002670 <_fini>:
 8002670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002672:	bf00      	nop
 8002674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002676:	bc08      	pop	{r3}
 8002678:	469e      	mov	lr, r3
 800267a:	4770      	bx	lr
