
SD_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080015ec  080015ec  000115ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001634  08001634  00011634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001638  08001638  00011638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  0800163c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002148  20000024  08001660  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000216c  08001660  0002216c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015572  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e66  00000000  00000000  000355bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007515  00000000  00000000  00038425  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007d8  00000000  00000000  0003f940  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a58  00000000  00000000  00040118  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004d19  00000000  00000000  00040b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002805  00000000  00000000  00045889  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004808e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001530  00000000  00000000  0004810c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	080015d4 	.word	0x080015d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	080015d4 	.word	0x080015d4

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f88c 	bl	8000280 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f842 	bl	8000200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f8e8 	bl	8001380 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000006c 	.word	0x2000006c

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001de:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001ea:	041b      	lsls	r3, r3, #16
 80001ec:	0c1b      	lsrs	r3, r3, #16
 80001ee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f8:	60d3      	str	r3, [r2, #12]
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000202:	b530      	push	{r4, r5, lr}
 8000204:	68dc      	ldr	r4, [r3, #12]
 8000206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000210:	2b04      	cmp	r3, #4
 8000212:	bf28      	it	cs
 8000214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021c:	bf98      	it	ls
 800021e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	fa05 f303 	lsl.w	r3, r5, r3
 8000224:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000228:	bf88      	it	hi
 800022a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022c:	4019      	ands	r1, r3
 800022e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000230:	fa05 f404 	lsl.w	r4, r5, r4
 8000234:	3c01      	subs	r4, #1
 8000236:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000238:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	ea42 0201 	orr.w	r2, r2, r1
 800023e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	bfaf      	iteee	ge
 8000244:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	4b06      	ldrlt	r3, [pc, #24]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
 800024a:	f000 000f 	andlt.w	r0, r0, #15
 800024e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	bfa5      	ittet	ge
 8000252:	b2d2      	uxtbge	r2, r2
 8000254:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800025e:	bd30      	pop	{r4, r5, pc}
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	e000ed14 	.word	0xe000ed14

08000268 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000268:	2301      	movs	r3, #1
 800026a:	0942      	lsrs	r2, r0, #5
 800026c:	f000 001f 	and.w	r0, r0, #31
 8000270:	fa03 f000 	lsl.w	r0, r3, r0
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_NVIC_EnableIRQ+0x14>)
 8000276:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800027a:	4770      	bx	lr
 800027c:	e000e100 	.word	0xe000e100

08000280 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000280:	3801      	subs	r0, #1
 8000282:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000286:	d20a      	bcs.n	800029e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000294:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000296:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800029e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ae:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	bf0c      	ite	eq
 80002b4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002b8:	f022 0204 	bicne.w	r2, r2, #4
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	4770      	bx	lr
 80002c0:	e000e010 	.word	0xe000e010

080002c4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002c4:	4770      	bx	lr

080002c6 <HAL_SYSTICK_IRQHandler>:
{
 80002c6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002c8:	f7ff fffc 	bl	80002c4 <HAL_SYSTICK_Callback>
 80002cc:	bd08      	pop	{r3, pc}
	...

080002d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002d4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002d6:	4616      	mov	r6, r2
 80002d8:	4b65      	ldr	r3, [pc, #404]	; (8000470 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002da:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000480 <HAL_GPIO_Init+0x1b0>
 80002de:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000484 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002e2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002e8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ec:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d17f      	bne.n	80003f4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002f4:	684d      	ldr	r5, [r1, #4]
 80002f6:	2d12      	cmp	r5, #18
 80002f8:	f000 80af 	beq.w	800045a <HAL_GPIO_Init+0x18a>
 80002fc:	f200 8088 	bhi.w	8000410 <HAL_GPIO_Init+0x140>
 8000300:	2d02      	cmp	r5, #2
 8000302:	f000 80a7 	beq.w	8000454 <HAL_GPIO_Init+0x184>
 8000306:	d87c      	bhi.n	8000402 <HAL_GPIO_Init+0x132>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 808e 	beq.w	800042a <HAL_GPIO_Init+0x15a>
 800030e:	2d01      	cmp	r5, #1
 8000310:	f000 809e 	beq.w	8000450 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000314:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000318:	2cff      	cmp	r4, #255	; 0xff
 800031a:	bf93      	iteet	ls
 800031c:	4682      	movls	sl, r0
 800031e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000322:	3d08      	subhi	r5, #8
 8000324:	f8d0 b000 	ldrls.w	fp, [r0]
 8000328:	bf92      	itee	ls
 800032a:	00b5      	lslls	r5, r6, #2
 800032c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000330:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000332:	fa09 f805 	lsl.w	r8, r9, r5
 8000336:	ea2b 0808 	bic.w	r8, fp, r8
 800033a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800033e:	bf88      	it	hi
 8000340:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000344:	ea48 0505 	orr.w	r5, r8, r5
 8000348:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800034c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000350:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000354:	d04e      	beq.n	80003f4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	4d47      	ldr	r5, [pc, #284]	; (8000474 <HAL_GPIO_Init+0x1a4>)
 8000358:	4f46      	ldr	r7, [pc, #280]	; (8000474 <HAL_GPIO_Init+0x1a4>)
 800035a:	69ad      	ldr	r5, [r5, #24]
 800035c:	f026 0803 	bic.w	r8, r6, #3
 8000360:	f045 0501 	orr.w	r5, r5, #1
 8000364:	61bd      	str	r5, [r7, #24]
 8000366:	69bd      	ldr	r5, [r7, #24]
 8000368:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800036c:	f005 0501 	and.w	r5, r5, #1
 8000370:	9501      	str	r5, [sp, #4]
 8000372:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000376:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800037a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800037c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000380:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000384:	fa09 f90b 	lsl.w	r9, r9, fp
 8000388:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800038c:	4d3a      	ldr	r5, [pc, #232]	; (8000478 <HAL_GPIO_Init+0x1a8>)
 800038e:	42a8      	cmp	r0, r5
 8000390:	d068      	beq.n	8000464 <HAL_GPIO_Init+0x194>
 8000392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000396:	42a8      	cmp	r0, r5
 8000398:	d066      	beq.n	8000468 <HAL_GPIO_Init+0x198>
 800039a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d064      	beq.n	800046c <HAL_GPIO_Init+0x19c>
 80003a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a6:	42a8      	cmp	r0, r5
 80003a8:	bf0c      	ite	eq
 80003aa:	2503      	moveq	r5, #3
 80003ac:	2504      	movne	r5, #4
 80003ae:	fa05 f50b 	lsl.w	r5, r5, fp
 80003b2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003b6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003ba:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003bc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003c0:	bf14      	ite	ne
 80003c2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003c4:	43a5      	biceq	r5, r4
 80003c6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003c8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ca:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003ce:	bf14      	ite	ne
 80003d0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003d2:	43a5      	biceq	r5, r4
 80003d4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003d8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003dc:	bf14      	ite	ne
 80003de:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003e0:	43a5      	biceq	r5, r4
 80003e2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003e4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003e6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003ea:	bf14      	ite	ne
 80003ec:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003ee:	ea25 0404 	biceq.w	r4, r5, r4
 80003f2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003f4:	3601      	adds	r6, #1
 80003f6:	2e10      	cmp	r6, #16
 80003f8:	f47f af73 	bne.w	80002e2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003fc:	b003      	add	sp, #12
 80003fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000402:	2d03      	cmp	r5, #3
 8000404:	d022      	beq.n	800044c <HAL_GPIO_Init+0x17c>
 8000406:	2d11      	cmp	r5, #17
 8000408:	d184      	bne.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800040a:	68ca      	ldr	r2, [r1, #12]
 800040c:	3204      	adds	r2, #4
          break;
 800040e:	e781      	b.n	8000314 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000410:	4f1a      	ldr	r7, [pc, #104]	; (800047c <HAL_GPIO_Init+0x1ac>)
 8000412:	42bd      	cmp	r5, r7
 8000414:	d009      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000416:	d812      	bhi.n	800043e <HAL_GPIO_Init+0x16e>
 8000418:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000488 <HAL_GPIO_Init+0x1b8>
 800041c:	454d      	cmp	r5, r9
 800041e:	d004      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000420:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000424:	454d      	cmp	r5, r9
 8000426:	f47f af75 	bne.w	8000314 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800042a:	688a      	ldr	r2, [r1, #8]
 800042c:	b1c2      	cbz	r2, 8000460 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800042e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000430:	bf0c      	ite	eq
 8000432:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000436:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800043a:	2208      	movs	r2, #8
 800043c:	e76a      	b.n	8000314 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800043e:	4575      	cmp	r5, lr
 8000440:	d0f3      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000442:	4565      	cmp	r5, ip
 8000444:	d0f1      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000446:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800048c <HAL_GPIO_Init+0x1bc>
 800044a:	e7eb      	b.n	8000424 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800044c:	2200      	movs	r2, #0
 800044e:	e761      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000450:	68ca      	ldr	r2, [r1, #12]
          break;
 8000452:	e75f      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000454:	68ca      	ldr	r2, [r1, #12]
 8000456:	3208      	adds	r2, #8
          break;
 8000458:	e75c      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800045a:	68ca      	ldr	r2, [r1, #12]
 800045c:	320c      	adds	r2, #12
          break;
 800045e:	e759      	b.n	8000314 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000460:	2204      	movs	r2, #4
 8000462:	e757      	b.n	8000314 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000464:	2500      	movs	r5, #0
 8000466:	e7a2      	b.n	80003ae <HAL_GPIO_Init+0xde>
 8000468:	2501      	movs	r5, #1
 800046a:	e7a0      	b.n	80003ae <HAL_GPIO_Init+0xde>
 800046c:	2502      	movs	r5, #2
 800046e:	e79e      	b.n	80003ae <HAL_GPIO_Init+0xde>
 8000470:	40010400 	.word	0x40010400
 8000474:	40021000 	.word	0x40021000
 8000478:	40010800 	.word	0x40010800
 800047c:	10210000 	.word	0x10210000
 8000480:	10310000 	.word	0x10310000
 8000484:	10320000 	.word	0x10320000
 8000488:	10110000 	.word	0x10110000
 800048c:	10220000 	.word	0x10220000

08000490 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000490:	b10a      	cbz	r2, 8000496 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000492:	6101      	str	r1, [r0, #16]
 8000494:	4770      	bx	lr
 8000496:	0409      	lsls	r1, r1, #16
 8000498:	e7fb      	b.n	8000492 <HAL_GPIO_WritePin+0x2>

0800049a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800049a:	4770      	bx	lr

0800049c <HAL_GPIO_EXTI_IRQHandler>:
{
 800049c:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800049e:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80004a0:	6959      	ldr	r1, [r3, #20]
 80004a2:	4201      	tst	r1, r0
 80004a4:	d002      	beq.n	80004ac <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80004a6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80004a8:	f7ff fff7 	bl	800049a <HAL_GPIO_EXTI_Callback>
 80004ac:	bd08      	pop	{r3, pc}
 80004ae:	bf00      	nop
 80004b0:	40010400 	.word	0x40010400

080004b4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004b4:	6803      	ldr	r3, [r0, #0]
{
 80004b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ba:	07db      	lsls	r3, r3, #31
{
 80004bc:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004be:	d410      	bmi.n	80004e2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004c0:	682b      	ldr	r3, [r5, #0]
 80004c2:	079f      	lsls	r7, r3, #30
 80004c4:	d45e      	bmi.n	8000584 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004c6:	682b      	ldr	r3, [r5, #0]
 80004c8:	0719      	lsls	r1, r3, #28
 80004ca:	f100 8095 	bmi.w	80005f8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004ce:	682b      	ldr	r3, [r5, #0]
 80004d0:	075a      	lsls	r2, r3, #29
 80004d2:	f100 80bf 	bmi.w	8000654 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004d6:	69ea      	ldr	r2, [r5, #28]
 80004d8:	2a00      	cmp	r2, #0
 80004da:	f040 812d 	bne.w	8000738 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004de:	2000      	movs	r0, #0
 80004e0:	e014      	b.n	800050c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004e2:	4c90      	ldr	r4, [pc, #576]	; (8000724 <HAL_RCC_OscConfig+0x270>)
 80004e4:	6863      	ldr	r3, [r4, #4]
 80004e6:	f003 030c 	and.w	r3, r3, #12
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	d007      	beq.n	80004fe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004ee:	6863      	ldr	r3, [r4, #4]
 80004f0:	f003 030c 	and.w	r3, r3, #12
 80004f4:	2b08      	cmp	r3, #8
 80004f6:	d10c      	bne.n	8000512 <HAL_RCC_OscConfig+0x5e>
 80004f8:	6863      	ldr	r3, [r4, #4]
 80004fa:	03de      	lsls	r6, r3, #15
 80004fc:	d509      	bpl.n	8000512 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004fe:	6823      	ldr	r3, [r4, #0]
 8000500:	039c      	lsls	r4, r3, #14
 8000502:	d5dd      	bpl.n	80004c0 <HAL_RCC_OscConfig+0xc>
 8000504:	686b      	ldr	r3, [r5, #4]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1da      	bne.n	80004c0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800050a:	2001      	movs	r0, #1
}
 800050c:	b002      	add	sp, #8
 800050e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000512:	686b      	ldr	r3, [r5, #4]
 8000514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000518:	d110      	bne.n	800053c <HAL_RCC_OscConfig+0x88>
 800051a:	6823      	ldr	r3, [r4, #0]
 800051c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000520:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000522:	f7ff fe55 	bl	80001d0 <HAL_GetTick>
 8000526:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000528:	6823      	ldr	r3, [r4, #0]
 800052a:	0398      	lsls	r0, r3, #14
 800052c:	d4c8      	bmi.n	80004c0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800052e:	f7ff fe4f 	bl	80001d0 <HAL_GetTick>
 8000532:	1b80      	subs	r0, r0, r6
 8000534:	2864      	cmp	r0, #100	; 0x64
 8000536:	d9f7      	bls.n	8000528 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000538:	2003      	movs	r0, #3
 800053a:	e7e7      	b.n	800050c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800053c:	b99b      	cbnz	r3, 8000566 <HAL_RCC_OscConfig+0xb2>
 800053e:	6823      	ldr	r3, [r4, #0]
 8000540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000544:	6023      	str	r3, [r4, #0]
 8000546:	6823      	ldr	r3, [r4, #0]
 8000548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800054c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800054e:	f7ff fe3f 	bl	80001d0 <HAL_GetTick>
 8000552:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000554:	6823      	ldr	r3, [r4, #0]
 8000556:	0399      	lsls	r1, r3, #14
 8000558:	d5b2      	bpl.n	80004c0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800055a:	f7ff fe39 	bl	80001d0 <HAL_GetTick>
 800055e:	1b80      	subs	r0, r0, r6
 8000560:	2864      	cmp	r0, #100	; 0x64
 8000562:	d9f7      	bls.n	8000554 <HAL_RCC_OscConfig+0xa0>
 8000564:	e7e8      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000566:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800056a:	6823      	ldr	r3, [r4, #0]
 800056c:	d103      	bne.n	8000576 <HAL_RCC_OscConfig+0xc2>
 800056e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000572:	6023      	str	r3, [r4, #0]
 8000574:	e7d1      	b.n	800051a <HAL_RCC_OscConfig+0x66>
 8000576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800057a:	6023      	str	r3, [r4, #0]
 800057c:	6823      	ldr	r3, [r4, #0]
 800057e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000582:	e7cd      	b.n	8000520 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000584:	4c67      	ldr	r4, [pc, #412]	; (8000724 <HAL_RCC_OscConfig+0x270>)
 8000586:	6863      	ldr	r3, [r4, #4]
 8000588:	f013 0f0c 	tst.w	r3, #12
 800058c:	d007      	beq.n	800059e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800058e:	6863      	ldr	r3, [r4, #4]
 8000590:	f003 030c 	and.w	r3, r3, #12
 8000594:	2b08      	cmp	r3, #8
 8000596:	d110      	bne.n	80005ba <HAL_RCC_OscConfig+0x106>
 8000598:	6863      	ldr	r3, [r4, #4]
 800059a:	03da      	lsls	r2, r3, #15
 800059c:	d40d      	bmi.n	80005ba <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	079b      	lsls	r3, r3, #30
 80005a2:	d502      	bpl.n	80005aa <HAL_RCC_OscConfig+0xf6>
 80005a4:	692b      	ldr	r3, [r5, #16]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d1af      	bne.n	800050a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	696a      	ldr	r2, [r5, #20]
 80005ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005b2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005b6:	6023      	str	r3, [r4, #0]
 80005b8:	e785      	b.n	80004c6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005ba:	692a      	ldr	r2, [r5, #16]
 80005bc:	4b5a      	ldr	r3, [pc, #360]	; (8000728 <HAL_RCC_OscConfig+0x274>)
 80005be:	b16a      	cbz	r2, 80005dc <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80005c0:	2201      	movs	r2, #1
 80005c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005c4:	f7ff fe04 	bl	80001d0 <HAL_GetTick>
 80005c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005ca:	6823      	ldr	r3, [r4, #0]
 80005cc:	079f      	lsls	r7, r3, #30
 80005ce:	d4ec      	bmi.n	80005aa <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005d0:	f7ff fdfe 	bl	80001d0 <HAL_GetTick>
 80005d4:	1b80      	subs	r0, r0, r6
 80005d6:	2802      	cmp	r0, #2
 80005d8:	d9f7      	bls.n	80005ca <HAL_RCC_OscConfig+0x116>
 80005da:	e7ad      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005de:	f7ff fdf7 	bl	80001d0 <HAL_GetTick>
 80005e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005e4:	6823      	ldr	r3, [r4, #0]
 80005e6:	0798      	lsls	r0, r3, #30
 80005e8:	f57f af6d 	bpl.w	80004c6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005ec:	f7ff fdf0 	bl	80001d0 <HAL_GetTick>
 80005f0:	1b80      	subs	r0, r0, r6
 80005f2:	2802      	cmp	r0, #2
 80005f4:	d9f6      	bls.n	80005e4 <HAL_RCC_OscConfig+0x130>
 80005f6:	e79f      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005f8:	69aa      	ldr	r2, [r5, #24]
 80005fa:	4c4a      	ldr	r4, [pc, #296]	; (8000724 <HAL_RCC_OscConfig+0x270>)
 80005fc:	4b4b      	ldr	r3, [pc, #300]	; (800072c <HAL_RCC_OscConfig+0x278>)
 80005fe:	b1da      	cbz	r2, 8000638 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000600:	2201      	movs	r2, #1
 8000602:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000604:	f7ff fde4 	bl	80001d0 <HAL_GetTick>
 8000608:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800060a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800060c:	079b      	lsls	r3, r3, #30
 800060e:	d50d      	bpl.n	800062c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000610:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000614:	4b46      	ldr	r3, [pc, #280]	; (8000730 <HAL_RCC_OscConfig+0x27c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	fbb3 f3f2 	udiv	r3, r3, r2
 800061c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800061e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000620:	9b01      	ldr	r3, [sp, #4]
 8000622:	1e5a      	subs	r2, r3, #1
 8000624:	9201      	str	r2, [sp, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1f9      	bne.n	800061e <HAL_RCC_OscConfig+0x16a>
 800062a:	e750      	b.n	80004ce <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800062c:	f7ff fdd0 	bl	80001d0 <HAL_GetTick>
 8000630:	1b80      	subs	r0, r0, r6
 8000632:	2802      	cmp	r0, #2
 8000634:	d9e9      	bls.n	800060a <HAL_RCC_OscConfig+0x156>
 8000636:	e77f      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000638:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800063a:	f7ff fdc9 	bl	80001d0 <HAL_GetTick>
 800063e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000642:	079f      	lsls	r7, r3, #30
 8000644:	f57f af43 	bpl.w	80004ce <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000648:	f7ff fdc2 	bl	80001d0 <HAL_GetTick>
 800064c:	1b80      	subs	r0, r0, r6
 800064e:	2802      	cmp	r0, #2
 8000650:	d9f6      	bls.n	8000640 <HAL_RCC_OscConfig+0x18c>
 8000652:	e771      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000654:	4c33      	ldr	r4, [pc, #204]	; (8000724 <HAL_RCC_OscConfig+0x270>)
 8000656:	69e3      	ldr	r3, [r4, #28]
 8000658:	00d8      	lsls	r0, r3, #3
 800065a:	d424      	bmi.n	80006a6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800065c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	69e3      	ldr	r3, [r4, #28]
 8000660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000664:	61e3      	str	r3, [r4, #28]
 8000666:	69e3      	ldr	r3, [r4, #28]
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000670:	4e30      	ldr	r6, [pc, #192]	; (8000734 <HAL_RCC_OscConfig+0x280>)
 8000672:	6833      	ldr	r3, [r6, #0]
 8000674:	05d9      	lsls	r1, r3, #23
 8000676:	d518      	bpl.n	80006aa <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000678:	68eb      	ldr	r3, [r5, #12]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d126      	bne.n	80006cc <HAL_RCC_OscConfig+0x218>
 800067e:	6a23      	ldr	r3, [r4, #32]
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000686:	f7ff fda3 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800068a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800068e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000690:	6a23      	ldr	r3, [r4, #32]
 8000692:	079b      	lsls	r3, r3, #30
 8000694:	d53f      	bpl.n	8000716 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000696:	2f00      	cmp	r7, #0
 8000698:	f43f af1d 	beq.w	80004d6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800069c:	69e3      	ldr	r3, [r4, #28]
 800069e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80006a2:	61e3      	str	r3, [r4, #28]
 80006a4:	e717      	b.n	80004d6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80006a6:	2700      	movs	r7, #0
 80006a8:	e7e2      	b.n	8000670 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006aa:	6833      	ldr	r3, [r6, #0]
 80006ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006b2:	f7ff fd8d 	bl	80001d0 <HAL_GetTick>
 80006b6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006b8:	6833      	ldr	r3, [r6, #0]
 80006ba:	05da      	lsls	r2, r3, #23
 80006bc:	d4dc      	bmi.n	8000678 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006be:	f7ff fd87 	bl	80001d0 <HAL_GetTick>
 80006c2:	eba0 0008 	sub.w	r0, r0, r8
 80006c6:	2864      	cmp	r0, #100	; 0x64
 80006c8:	d9f6      	bls.n	80006b8 <HAL_RCC_OscConfig+0x204>
 80006ca:	e735      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006cc:	b9ab      	cbnz	r3, 80006fa <HAL_RCC_OscConfig+0x246>
 80006ce:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006d0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006d4:	f023 0301 	bic.w	r3, r3, #1
 80006d8:	6223      	str	r3, [r4, #32]
 80006da:	6a23      	ldr	r3, [r4, #32]
 80006dc:	f023 0304 	bic.w	r3, r3, #4
 80006e0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006e2:	f7ff fd75 	bl	80001d0 <HAL_GetTick>
 80006e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006e8:	6a23      	ldr	r3, [r4, #32]
 80006ea:	0798      	lsls	r0, r3, #30
 80006ec:	d5d3      	bpl.n	8000696 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006ee:	f7ff fd6f 	bl	80001d0 <HAL_GetTick>
 80006f2:	1b80      	subs	r0, r0, r6
 80006f4:	4540      	cmp	r0, r8
 80006f6:	d9f7      	bls.n	80006e8 <HAL_RCC_OscConfig+0x234>
 80006f8:	e71e      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006fa:	2b05      	cmp	r3, #5
 80006fc:	6a23      	ldr	r3, [r4, #32]
 80006fe:	d103      	bne.n	8000708 <HAL_RCC_OscConfig+0x254>
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6223      	str	r3, [r4, #32]
 8000706:	e7ba      	b.n	800067e <HAL_RCC_OscConfig+0x1ca>
 8000708:	f023 0301 	bic.w	r3, r3, #1
 800070c:	6223      	str	r3, [r4, #32]
 800070e:	6a23      	ldr	r3, [r4, #32]
 8000710:	f023 0304 	bic.w	r3, r3, #4
 8000714:	e7b6      	b.n	8000684 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000716:	f7ff fd5b 	bl	80001d0 <HAL_GetTick>
 800071a:	eba0 0008 	sub.w	r0, r0, r8
 800071e:	42b0      	cmp	r0, r6
 8000720:	d9b6      	bls.n	8000690 <HAL_RCC_OscConfig+0x1dc>
 8000722:	e709      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
 8000724:	40021000 	.word	0x40021000
 8000728:	42420000 	.word	0x42420000
 800072c:	42420480 	.word	0x42420480
 8000730:	20000008 	.word	0x20000008
 8000734:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000738:	4c22      	ldr	r4, [pc, #136]	; (80007c4 <HAL_RCC_OscConfig+0x310>)
 800073a:	6863      	ldr	r3, [r4, #4]
 800073c:	f003 030c 	and.w	r3, r3, #12
 8000740:	2b08      	cmp	r3, #8
 8000742:	f43f aee2 	beq.w	800050a <HAL_RCC_OscConfig+0x56>
 8000746:	2300      	movs	r3, #0
 8000748:	4e1f      	ldr	r6, [pc, #124]	; (80007c8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800074a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800074c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800074e:	d12b      	bne.n	80007a8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000750:	f7ff fd3e 	bl	80001d0 <HAL_GetTick>
 8000754:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000756:	6823      	ldr	r3, [r4, #0]
 8000758:	0199      	lsls	r1, r3, #6
 800075a:	d41f      	bmi.n	800079c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800075c:	6a2b      	ldr	r3, [r5, #32]
 800075e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000762:	d105      	bne.n	8000770 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000764:	6862      	ldr	r2, [r4, #4]
 8000766:	68a9      	ldr	r1, [r5, #8]
 8000768:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800076c:	430a      	orrs	r2, r1
 800076e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000770:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000772:	6862      	ldr	r2, [r4, #4]
 8000774:	430b      	orrs	r3, r1
 8000776:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800077a:	4313      	orrs	r3, r2
 800077c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800077e:	2301      	movs	r3, #1
 8000780:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000782:	f7ff fd25 	bl	80001d0 <HAL_GetTick>
 8000786:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000788:	6823      	ldr	r3, [r4, #0]
 800078a:	019a      	lsls	r2, r3, #6
 800078c:	f53f aea7 	bmi.w	80004de <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000790:	f7ff fd1e 	bl	80001d0 <HAL_GetTick>
 8000794:	1b40      	subs	r0, r0, r5
 8000796:	2802      	cmp	r0, #2
 8000798:	d9f6      	bls.n	8000788 <HAL_RCC_OscConfig+0x2d4>
 800079a:	e6cd      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800079c:	f7ff fd18 	bl	80001d0 <HAL_GetTick>
 80007a0:	1bc0      	subs	r0, r0, r7
 80007a2:	2802      	cmp	r0, #2
 80007a4:	d9d7      	bls.n	8000756 <HAL_RCC_OscConfig+0x2a2>
 80007a6:	e6c7      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80007a8:	f7ff fd12 	bl	80001d0 <HAL_GetTick>
 80007ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007ae:	6823      	ldr	r3, [r4, #0]
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	f57f ae94 	bpl.w	80004de <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007b6:	f7ff fd0b 	bl	80001d0 <HAL_GetTick>
 80007ba:	1b40      	subs	r0, r0, r5
 80007bc:	2802      	cmp	r0, #2
 80007be:	d9f6      	bls.n	80007ae <HAL_RCC_OscConfig+0x2fa>
 80007c0:	e6ba      	b.n	8000538 <HAL_RCC_OscConfig+0x84>
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	42420060 	.word	0x42420060

080007cc <HAL_RCC_GetSysClockFreq>:
{
 80007cc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007ce:	4b19      	ldr	r3, [pc, #100]	; (8000834 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007d0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007d2:	ac02      	add	r4, sp, #8
 80007d4:	f103 0510 	add.w	r5, r3, #16
 80007d8:	4622      	mov	r2, r4
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	6859      	ldr	r1, [r3, #4]
 80007de:	3308      	adds	r3, #8
 80007e0:	c203      	stmia	r2!, {r0, r1}
 80007e2:	42ab      	cmp	r3, r5
 80007e4:	4614      	mov	r4, r2
 80007e6:	d1f7      	bne.n	80007d8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007e8:	2301      	movs	r3, #1
 80007ea:	f88d 3004 	strb.w	r3, [sp, #4]
 80007ee:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007f0:	4911      	ldr	r1, [pc, #68]	; (8000838 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007f2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007f6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007f8:	f003 020c 	and.w	r2, r3, #12
 80007fc:	2a08      	cmp	r2, #8
 80007fe:	d117      	bne.n	8000830 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000800:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000804:	a806      	add	r0, sp, #24
 8000806:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000808:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800080a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800080e:	d50c      	bpl.n	800082a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000810:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000814:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000818:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800081a:	aa06      	add	r2, sp, #24
 800081c:	4413      	add	r3, r2
 800081e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000822:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000826:	b007      	add	sp, #28
 8000828:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <HAL_RCC_GetSysClockFreq+0x74>)
 800082c:	4350      	muls	r0, r2
 800082e:	e7fa      	b.n	8000826 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000832:	e7f8      	b.n	8000826 <HAL_RCC_GetSysClockFreq+0x5a>
 8000834:	080015ec 	.word	0x080015ec
 8000838:	40021000 	.word	0x40021000
 800083c:	007a1200 	.word	0x007a1200
 8000840:	003d0900 	.word	0x003d0900

08000844 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000844:	4a4d      	ldr	r2, [pc, #308]	; (800097c <HAL_RCC_ClockConfig+0x138>)
{
 8000846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800084a:	6813      	ldr	r3, [r2, #0]
{
 800084c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	428b      	cmp	r3, r1
{
 8000854:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000856:	d328      	bcc.n	80008aa <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000858:	682a      	ldr	r2, [r5, #0]
 800085a:	0791      	lsls	r1, r2, #30
 800085c:	d432      	bmi.n	80008c4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800085e:	07d2      	lsls	r2, r2, #31
 8000860:	d438      	bmi.n	80008d4 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000862:	4a46      	ldr	r2, [pc, #280]	; (800097c <HAL_RCC_ClockConfig+0x138>)
 8000864:	6813      	ldr	r3, [r2, #0]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	429e      	cmp	r6, r3
 800086c:	d373      	bcc.n	8000956 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800086e:	682a      	ldr	r2, [r5, #0]
 8000870:	4c43      	ldr	r4, [pc, #268]	; (8000980 <HAL_RCC_ClockConfig+0x13c>)
 8000872:	f012 0f04 	tst.w	r2, #4
 8000876:	d179      	bne.n	800096c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000878:	0713      	lsls	r3, r2, #28
 800087a:	d506      	bpl.n	800088a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800087c:	6863      	ldr	r3, [r4, #4]
 800087e:	692a      	ldr	r2, [r5, #16]
 8000880:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000884:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000888:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800088a:	f7ff ff9f 	bl	80007cc <HAL_RCC_GetSysClockFreq>
 800088e:	6863      	ldr	r3, [r4, #4]
 8000890:	4a3c      	ldr	r2, [pc, #240]	; (8000984 <HAL_RCC_ClockConfig+0x140>)
 8000892:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000896:	5cd3      	ldrb	r3, [r2, r3]
 8000898:	40d8      	lsrs	r0, r3
 800089a:	4b3b      	ldr	r3, [pc, #236]	; (8000988 <HAL_RCC_ClockConfig+0x144>)
 800089c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fc54 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80008a4:	2000      	movs	r0, #0
}
 80008a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008aa:	6813      	ldr	r3, [r2, #0]
 80008ac:	f023 0307 	bic.w	r3, r3, #7
 80008b0:	430b      	orrs	r3, r1
 80008b2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008b4:	6813      	ldr	r3, [r2, #0]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	4299      	cmp	r1, r3
 80008bc:	d0cc      	beq.n	8000858 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008be:	2001      	movs	r0, #1
 80008c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008c4:	492e      	ldr	r1, [pc, #184]	; (8000980 <HAL_RCC_ClockConfig+0x13c>)
 80008c6:	68a8      	ldr	r0, [r5, #8]
 80008c8:	684b      	ldr	r3, [r1, #4]
 80008ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008ce:	4303      	orrs	r3, r0
 80008d0:	604b      	str	r3, [r1, #4]
 80008d2:	e7c4      	b.n	800085e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008d4:	686a      	ldr	r2, [r5, #4]
 80008d6:	4c2a      	ldr	r4, [pc, #168]	; (8000980 <HAL_RCC_ClockConfig+0x13c>)
 80008d8:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008da:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008dc:	d11c      	bne.n	8000918 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008e2:	d0ec      	beq.n	80008be <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008e4:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008e6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008ea:	f023 0303 	bic.w	r3, r3, #3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008f2:	f7ff fc6d 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008f6:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008f8:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d114      	bne.n	8000928 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008fe:	6863      	ldr	r3, [r4, #4]
 8000900:	f003 030c 	and.w	r3, r3, #12
 8000904:	2b04      	cmp	r3, #4
 8000906:	d0ac      	beq.n	8000862 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000908:	f7ff fc62 	bl	80001d0 <HAL_GetTick>
 800090c:	1bc0      	subs	r0, r0, r7
 800090e:	4540      	cmp	r0, r8
 8000910:	d9f5      	bls.n	80008fe <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000912:	2003      	movs	r0, #3
 8000914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000918:	2a02      	cmp	r2, #2
 800091a:	d102      	bne.n	8000922 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800091c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000920:	e7df      	b.n	80008e2 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000922:	f013 0f02 	tst.w	r3, #2
 8000926:	e7dc      	b.n	80008e2 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000928:	2b02      	cmp	r3, #2
 800092a:	d10f      	bne.n	800094c <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800092c:	6863      	ldr	r3, [r4, #4]
 800092e:	f003 030c 	and.w	r3, r3, #12
 8000932:	2b08      	cmp	r3, #8
 8000934:	d095      	beq.n	8000862 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000936:	f7ff fc4b 	bl	80001d0 <HAL_GetTick>
 800093a:	1bc0      	subs	r0, r0, r7
 800093c:	4540      	cmp	r0, r8
 800093e:	d9f5      	bls.n	800092c <HAL_RCC_ClockConfig+0xe8>
 8000940:	e7e7      	b.n	8000912 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000942:	f7ff fc45 	bl	80001d0 <HAL_GetTick>
 8000946:	1bc0      	subs	r0, r0, r7
 8000948:	4540      	cmp	r0, r8
 800094a:	d8e2      	bhi.n	8000912 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800094c:	6863      	ldr	r3, [r4, #4]
 800094e:	f013 0f0c 	tst.w	r3, #12
 8000952:	d1f6      	bne.n	8000942 <HAL_RCC_ClockConfig+0xfe>
 8000954:	e785      	b.n	8000862 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000956:	6813      	ldr	r3, [r2, #0]
 8000958:	f023 0307 	bic.w	r3, r3, #7
 800095c:	4333      	orrs	r3, r6
 800095e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000960:	6813      	ldr	r3, [r2, #0]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	429e      	cmp	r6, r3
 8000968:	d1a9      	bne.n	80008be <HAL_RCC_ClockConfig+0x7a>
 800096a:	e780      	b.n	800086e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800096c:	6863      	ldr	r3, [r4, #4]
 800096e:	68e9      	ldr	r1, [r5, #12]
 8000970:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000974:	430b      	orrs	r3, r1
 8000976:	6063      	str	r3, [r4, #4]
 8000978:	e77e      	b.n	8000878 <HAL_RCC_ClockConfig+0x34>
 800097a:	bf00      	nop
 800097c:	40022000 	.word	0x40022000
 8000980:	40021000 	.word	0x40021000
 8000984:	0800160d 	.word	0x0800160d
 8000988:	20000008 	.word	0x20000008

0800098c <HAL_RCC_GetHCLKFreq>:
}
 800098c:	4b01      	ldr	r3, [pc, #4]	; (8000994 <HAL_RCC_GetHCLKFreq+0x8>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008

08000998 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80009a2:	5cd3      	ldrb	r3, [r2, r3]
 80009a4:	4a03      	ldr	r2, [pc, #12]	; (80009b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80009a6:	6810      	ldr	r0, [r2, #0]
}    
 80009a8:	40d8      	lsrs	r0, r3
 80009aa:	4770      	bx	lr
 80009ac:	40021000 	.word	0x40021000
 80009b0:	0800161d 	.word	0x0800161d
 80009b4:	20000008 	.word	0x20000008

080009b8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <HAL_RCC_GetPCLK2Freq+0x14>)
 80009ba:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009c2:	5cd3      	ldrb	r3, [r2, r3]
 80009c4:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009c6:	6810      	ldr	r0, [r2, #0]
} 
 80009c8:	40d8      	lsrs	r0, r3
 80009ca:	4770      	bx	lr
 80009cc:	40021000 	.word	0x40021000
 80009d0:	0800161d 	.word	0x0800161d
 80009d4:	20000008 	.word	0x20000008

080009d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80009d8:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80009da:	4604      	mov	r4, r0
 80009dc:	2800      	cmp	r0, #0
 80009de:	d034      	beq.n	8000a4a <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80009e4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80009e8:	b90b      	cbnz	r3, 80009ee <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80009ea:	f000 fc9f 	bl	800132c <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80009ee:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80009f0:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80009f2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80009f6:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80009f8:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80009fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009fe:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000a00:	6863      	ldr	r3, [r4, #4]
 8000a02:	69a2      	ldr	r2, [r4, #24]
 8000a04:	4303      	orrs	r3, r0
 8000a06:	68e0      	ldr	r0, [r4, #12]
 8000a08:	4303      	orrs	r3, r0
 8000a0a:	6920      	ldr	r0, [r4, #16]
 8000a0c:	4303      	orrs	r3, r0
 8000a0e:	6960      	ldr	r0, [r4, #20]
 8000a10:	4303      	orrs	r3, r0
 8000a12:	69e0      	ldr	r0, [r4, #28]
 8000a14:	4303      	orrs	r3, r0
 8000a16:	6a20      	ldr	r0, [r4, #32]
 8000a18:	4303      	orrs	r3, r0
 8000a1a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000a1c:	4303      	orrs	r3, r0
 8000a1e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000a22:	4303      	orrs	r3, r0
 8000a24:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000a26:	0c12      	lsrs	r2, r2, #16
 8000a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a2a:	f002 0204 	and.w	r2, r2, #4
 8000a2e:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000a30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000a32:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000a34:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000a36:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000a38:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000a3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a3e:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8000a40:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000a42:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000a44:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8000a48:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000a4a:	2001      	movs	r0, #1
}
 8000a4c:	bd10      	pop	{r4, pc}
	...

08000a50 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000a54:	6805      	ldr	r5, [r0, #0]
 8000a56:	68c2      	ldr	r2, [r0, #12]
 8000a58:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a5a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000a5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a60:	4313      	orrs	r3, r2
 8000a62:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a64:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000a66:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a68:	430b      	orrs	r3, r1
 8000a6a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000a6c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000a70:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a74:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000a76:	4313      	orrs	r3, r2
 8000a78:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000a7a:	696b      	ldr	r3, [r5, #20]
 8000a7c:	6982      	ldr	r2, [r0, #24]
 8000a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a82:	4313      	orrs	r3, r2
 8000a84:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000a86:	4b40      	ldr	r3, [pc, #256]	; (8000b88 <UART_SetConfig+0x138>)
{
 8000a88:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000a8a:	429d      	cmp	r5, r3
 8000a8c:	f04f 0419 	mov.w	r4, #25
 8000a90:	d146      	bne.n	8000b20 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000a92:	f7ff ff91 	bl	80009b8 <HAL_RCC_GetPCLK2Freq>
 8000a96:	fb04 f300 	mul.w	r3, r4, r0
 8000a9a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000a9e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000aa2:	00b6      	lsls	r6, r6, #2
 8000aa4:	fbb3 f3f6 	udiv	r3, r3, r6
 8000aa8:	fbb3 f3f8 	udiv	r3, r3, r8
 8000aac:	011e      	lsls	r6, r3, #4
 8000aae:	f7ff ff83 	bl	80009b8 <HAL_RCC_GetPCLK2Freq>
 8000ab2:	4360      	muls	r0, r4
 8000ab4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	fbb0 f7f3 	udiv	r7, r0, r3
 8000abe:	f7ff ff7b 	bl	80009b8 <HAL_RCC_GetPCLK2Freq>
 8000ac2:	4360      	muls	r0, r4
 8000ac4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ace:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ad2:	fb08 7313 	mls	r3, r8, r3, r7
 8000ad6:	011b      	lsls	r3, r3, #4
 8000ad8:	3332      	adds	r3, #50	; 0x32
 8000ada:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ade:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000ae2:	f7ff ff69 	bl	80009b8 <HAL_RCC_GetPCLK2Freq>
 8000ae6:	4360      	muls	r0, r4
 8000ae8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000aec:	0092      	lsls	r2, r2, #2
 8000aee:	fbb0 faf2 	udiv	sl, r0, r2
 8000af2:	f7ff ff61 	bl	80009b8 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000af6:	4360      	muls	r0, r4
 8000af8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b02:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b06:	fb08 a313 	mls	r3, r8, r3, sl
 8000b0a:	011b      	lsls	r3, r3, #4
 8000b0c:	3332      	adds	r3, #50	; 0x32
 8000b0e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	433b      	orrs	r3, r7
 8000b18:	4433      	add	r3, r6
 8000b1a:	60ab      	str	r3, [r5, #8]
 8000b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b20:	f7ff ff3a 	bl	8000998 <HAL_RCC_GetPCLK1Freq>
 8000b24:	fb04 f300 	mul.w	r3, r4, r0
 8000b28:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000b2c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000b30:	00b6      	lsls	r6, r6, #2
 8000b32:	fbb3 f3f6 	udiv	r3, r3, r6
 8000b36:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b3a:	011e      	lsls	r6, r3, #4
 8000b3c:	f7ff ff2c 	bl	8000998 <HAL_RCC_GetPCLK1Freq>
 8000b40:	4360      	muls	r0, r4
 8000b42:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	fbb0 f7f3 	udiv	r7, r0, r3
 8000b4c:	f7ff ff24 	bl	8000998 <HAL_RCC_GetPCLK1Freq>
 8000b50:	4360      	muls	r0, r4
 8000b52:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b5c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b60:	fb08 7313 	mls	r3, r8, r3, r7
 8000b64:	011b      	lsls	r3, r3, #4
 8000b66:	3332      	adds	r3, #50	; 0x32
 8000b68:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b6c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000b70:	f7ff ff12 	bl	8000998 <HAL_RCC_GetPCLK1Freq>
 8000b74:	4360      	muls	r0, r4
 8000b76:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000b7a:	0092      	lsls	r2, r2, #2
 8000b7c:	fbb0 faf2 	udiv	sl, r0, r2
 8000b80:	f7ff ff0a 	bl	8000998 <HAL_RCC_GetPCLK1Freq>
 8000b84:	e7b7      	b.n	8000af6 <UART_SetConfig+0xa6>
 8000b86:	bf00      	nop
 8000b88:	40013800 	.word	0x40013800

08000b8c <HAL_UART_Init>:
{
 8000b8c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000b8e:	4604      	mov	r4, r0
 8000b90:	b340      	cbz	r0, 8000be4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000b92:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000b96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b9a:	b91b      	cbnz	r3, 8000ba4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000b9c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000ba0:	f000 fc98 	bl	80014d4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000ba4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000ba6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000ba8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000bac:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000bae:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000bb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bb4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000bb6:	f7ff ff4b 	bl	8000a50 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bba:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000bbc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bbe:	691a      	ldr	r2, [r3, #16]
 8000bc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000bc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000bcc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000bce:	68da      	ldr	r2, [r3, #12]
 8000bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000bd4:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000bd6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000bd8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000bda:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000bde:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000be2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000be4:	2001      	movs	r0, #1
}
 8000be6:	bd10      	pop	{r4, pc}

08000be8 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <disk_status+0x10>)
 8000bea:	181a      	adds	r2, r3, r0
 8000bec:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	7a10      	ldrb	r0, [r2, #8]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	4718      	bx	r3
 8000bf8:	20000060 	.word	0x20000060

08000bfc <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <disk_initialize+0x1c>)
 8000bfe:	5c1a      	ldrb	r2, [r3, r0]
 8000c00:	b942      	cbnz	r2, 8000c14 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8000c02:	2201      	movs	r2, #1
 8000c04:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8000c06:	181a      	adds	r2, r3, r0
 8000c08:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	7a10      	ldrb	r0, [r2, #8]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4718      	bx	r3
  }
  return stat;
}
 8000c14:	2000      	movs	r0, #0
 8000c16:	4770      	bx	lr
 8000c18:	20000060 	.word	0x20000060

08000c1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8000c1c:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8000c1e:	4c05      	ldr	r4, [pc, #20]	; (8000c34 <disk_read+0x18>)
 8000c20:	1825      	adds	r5, r4, r0
 8000c22:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8000c26:	6860      	ldr	r0, [r4, #4]
 8000c28:	6884      	ldr	r4, [r0, #8]
 8000c2a:	7a28      	ldrb	r0, [r5, #8]
 8000c2c:	46a4      	mov	ip, r4
  return res;
}
 8000c2e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8000c30:	4760      	bx	ip
 8000c32:	bf00      	nop
 8000c34:	20000060 	.word	0x20000060

08000c38 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8000c38:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8000c3a:	4c05      	ldr	r4, [pc, #20]	; (8000c50 <disk_write+0x18>)
 8000c3c:	1825      	adds	r5, r4, r0
 8000c3e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8000c42:	6860      	ldr	r0, [r4, #4]
 8000c44:	68c4      	ldr	r4, [r0, #12]
 8000c46:	7a28      	ldrb	r0, [r5, #8]
 8000c48:	46a4      	mov	ip, r4
  return res;
}
 8000c4a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8000c4c:	4760      	bx	ip
 8000c4e:	bf00      	nop
 8000c50:	20000060 	.word	0x20000060

08000c54 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8000c54:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <disk_ioctl+0x14>)
 8000c58:	181c      	adds	r4, r3, r0
 8000c5a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	7a20      	ldrb	r0, [r4, #8]
 8000c62:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8000c64:	bc10      	pop	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8000c66:	4718      	bx	r3
 8000c68:	20000060 	.word	0x20000060

08000c6c <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8000c6c:	6802      	ldr	r2, [r0, #0]
{
 8000c6e:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8000c70:	b152      	cbz	r2, 8000c88 <get_ldnumber+0x1c>
 8000c72:	4611      	mov	r1, r2
 8000c74:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8000c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000c7a:	2c1f      	cmp	r4, #31
 8000c7c:	d90c      	bls.n	8000c98 <get_ldnumber+0x2c>
 8000c7e:	2c3a      	cmp	r4, #58	; 0x3a
 8000c80:	d1f8      	bne.n	8000c74 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8000c82:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d002      	beq.n	8000c8e <get_ldnumber+0x22>
	int vol = -1;
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8000c8c:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8000c8e:	7812      	ldrb	r2, [r2, #0]
 8000c90:	2a30      	cmp	r2, #48	; 0x30
 8000c92:	d1f9      	bne.n	8000c88 <get_ldnumber+0x1c>
					*path = ++tt;
 8000c94:	3301      	adds	r3, #1
 8000c96:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8000c98:	2000      	movs	r0, #0
 8000c9a:	bd10      	pop	{r4, pc}

08000c9c <sync_window.part.1>:
		wsect = fs->winsect;	/* Current sector number */
 8000c9c:	f241 032c 	movw	r3, #4140	; 0x102c
FRESULT sync_window (
 8000ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8000ca4:	f241 0701 	movw	r7, #4097	; 0x1001
		wsect = fs->winsect;	/* Current sector number */
 8000ca8:	58c5      	ldr	r5, [r0, r3]
FRESULT sync_window (
 8000caa:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8000cac:	4601      	mov	r1, r0
 8000cae:	2301      	movs	r3, #1
 8000cb0:	462a      	mov	r2, r5
 8000cb2:	5dc0      	ldrb	r0, [r0, r7]
 8000cb4:	f7ff ffc0 	bl	8000c38 <disk_write>
 8000cb8:	bb08      	cbnz	r0, 8000cfe <sync_window.part.1+0x62>
			fs->wflag = 0;
 8000cba:	f241 0304 	movw	r3, #4100	; 0x1004
 8000cbe:	54e0      	strb	r0, [r4, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8000cc0:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	f241 0318 	movw	r3, #4120	; 0x1018
 8000cca:	58e1      	ldr	r1, [r4, r3]
 8000ccc:	1aaa      	subs	r2, r5, r2
 8000cce:	428a      	cmp	r2, r1
 8000cd0:	d302      	bcc.n	8000cd8 <sync_window.part.1+0x3c>
	FRESULT res = FR_OK;
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8000cd8:	f241 0203 	movw	r2, #4099	; 0x1003
 8000cdc:	f814 8002 	ldrb.w	r8, [r4, r2]
					wsect += fs->fsize;
 8000ce0:	18e6      	adds	r6, r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8000ce2:	f1b8 0f01 	cmp.w	r8, #1
 8000ce6:	d9f4      	bls.n	8000cd2 <sync_window.part.1+0x36>
					wsect += fs->fsize;
 8000ce8:	6833      	ldr	r3, [r6, #0]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8000cea:	4621      	mov	r1, r4
					wsect += fs->fsize;
 8000cec:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8000cee:	462a      	mov	r2, r5
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	5de0      	ldrb	r0, [r4, r7]
 8000cf4:	f7ff ffa0 	bl	8000c38 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8000cf8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8000cfc:	e7f1      	b.n	8000ce2 <sync_window.part.1+0x46>
			res = FR_DISK_ERR;
 8000cfe:	2001      	movs	r0, #1
}
 8000d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000d04 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8000d04:	f241 0304 	movw	r3, #4100	; 0x1004
 8000d08:	5cc3      	ldrb	r3, [r0, r3]
 8000d0a:	b10b      	cbz	r3, 8000d10 <sync_window+0xc>
 8000d0c:	f7ff bfc6 	b.w	8000c9c <sync_window.part.1>
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	4770      	bx	lr

08000d14 <move_window>:
{
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8000d16:	f241 072c 	movw	r7, #4140	; 0x102c
 8000d1a:	59c3      	ldr	r3, [r0, r7]
{
 8000d1c:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8000d1e:	428b      	cmp	r3, r1
{
 8000d20:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8000d22:	d013      	beq.n	8000d4c <move_window+0x38>
		res = sync_window(fs);		/* Write-back changes */
 8000d24:	f7ff ffee 	bl	8000d04 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8000d28:	4604      	mov	r4, r0
 8000d2a:	b968      	cbnz	r0, 8000d48 <move_window+0x34>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8000d2c:	f241 0001 	movw	r0, #4097	; 0x1001
 8000d30:	462a      	mov	r2, r5
 8000d32:	2301      	movs	r3, #1
 8000d34:	4631      	mov	r1, r6
 8000d36:	5c30      	ldrb	r0, [r6, r0]
 8000d38:	f7ff ff70 	bl	8000c1c <disk_read>
 8000d3c:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8000d3e:	bf1c      	itt	ne
 8000d40:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8000d44:	2401      	movne	r4, #1
			fs->winsect = sector;
 8000d46:	51f5      	str	r5, [r6, r7]
}
 8000d48:	4620      	mov	r0, r4
 8000d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FRESULT res = FR_OK;
 8000d4c:	2400      	movs	r4, #0
 8000d4e:	e7fb      	b.n	8000d48 <move_window+0x34>

08000d50 <check_fs>:
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8000d50:	2200      	movs	r2, #0
 8000d52:	f241 0304 	movw	r3, #4100	; 0x1004
{
 8000d56:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8000d58:	54c2      	strb	r2, [r0, r3]
 8000d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d5e:	f241 032c 	movw	r3, #4140	; 0x102c
 8000d62:	50c2      	str	r2, [r0, r3]
{
 8000d64:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8000d66:	f7ff ffd5 	bl	8000d14 <move_window>
 8000d6a:	b9c0      	cbnz	r0, 8000d9e <check_fs+0x4e>
		return 3;

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8000d6c:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8000d70:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8000d74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000d78:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d110      	bne.n	8000da2 <check_fs+0x52>
		return 2;

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8000d80:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8000d84:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <check_fs+0x58>)
 8000d86:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d00a      	beq.n	8000da4 <check_fs+0x54>
		return 0;
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8000d8e:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8000d92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8000d96:	1a80      	subs	r0, r0, r2
 8000d98:	bf18      	it	ne
 8000d9a:	2001      	movne	r0, #1
 8000d9c:	bd10      	pop	{r4, pc}
 8000d9e:	2003      	movs	r0, #3
 8000da0:	bd10      	pop	{r4, pc}
		return 2;
 8000da2:	2002      	movs	r0, #2
		return 0;

	return 1;
}
 8000da4:	bd10      	pop	{r4, pc}
 8000da6:	bf00      	nop
 8000da8:	00544146 	.word	0x00544146

08000dac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8000dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8000db0:	2300      	movs	r3, #0
{
 8000db2:	4606      	mov	r6, r0
	*rfs = 0;
 8000db4:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
 8000db6:	4608      	mov	r0, r1
{
 8000db8:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8000dba:	f7ff ff57 	bl	8000c6c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8000dbe:	1e07      	subs	r7, r0, #0
 8000dc0:	f2c0 8162 	blt.w	8001088 <find_volume+0x2dc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8000dc4:	4bb4      	ldr	r3, [pc, #720]	; (8001098 <find_volume+0x2ec>)
 8000dc6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8000dca:	2c00      	cmp	r4, #0
 8000dcc:	f000 815e 	beq.w	800108c <find_volume+0x2e0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8000dd0:	6034      	str	r4, [r6, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8000dd2:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
 8000dd6:	7833      	ldrb	r3, [r6, #0]
 8000dd8:	b183      	cbz	r3, 8000dfc <find_volume+0x50>
		stat = disk_status(fs->drv);
 8000dda:	f241 0301 	movw	r3, #4097	; 0x1001
 8000dde:	5ce0      	ldrb	r0, [r4, r3]
 8000de0:	f7ff ff02 	bl	8000be8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8000de4:	07c1      	lsls	r1, r0, #31
 8000de6:	d409      	bmi.n	8000dfc <find_volume+0x50>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	f000 8151 	beq.w	8001090 <find_volume+0x2e4>
 8000dee:	f010 0004 	ands.w	r0, r0, #4
 8000df2:	d000      	beq.n	8000df6 <find_volume+0x4a>
				return FR_WRITE_PROTECTED;
 8000df4:	200a      	movs	r0, #10
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
 8000df6:	b004      	add	sp, #16
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8000e00:	f241 0301 	movw	r3, #4097	; 0x1001
 8000e04:	b2f8      	uxtb	r0, r7
 8000e06:	54e0      	strb	r0, [r4, r3]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8000e08:	f7ff fef8 	bl	8000bfc <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8000e0c:	07c2      	lsls	r2, r0, #31
 8000e0e:	f100 8141 	bmi.w	8001094 <find_volume+0x2e8>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8000e12:	b10d      	cbz	r5, 8000e18 <find_volume+0x6c>
 8000e14:	0743      	lsls	r3, r0, #29
 8000e16:	d4ed      	bmi.n	8000df4 <find_volume+0x48>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8000e18:	f241 0301 	movw	r3, #4097	; 0x1001
 8000e1c:	f241 050a 	movw	r5, #4106	; 0x100a
 8000e20:	2102      	movs	r1, #2
 8000e22:	1962      	adds	r2, r4, r5
 8000e24:	5ce0      	ldrb	r0, [r4, r3]
 8000e26:	f7ff ff15 	bl	8000c54 <disk_ioctl>
 8000e2a:	4607      	mov	r7, r0
 8000e2c:	b108      	cbz	r0, 8000e32 <find_volume+0x86>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8000e2e:	2001      	movs	r0, #1
 8000e30:	e7e1      	b.n	8000df6 <find_volume+0x4a>
 8000e32:	5b63      	ldrh	r3, [r4, r5]
 8000e34:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8000e3e:	d8f6      	bhi.n	8000e2e <find_volume+0x82>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8000e40:	4601      	mov	r1, r0
 8000e42:	4620      	mov	r0, r4
 8000e44:	f7ff ff84 	bl	8000d50 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8000e48:	2801      	cmp	r0, #1
 8000e4a:	f040 80ff 	bne.w	800104c <find_volume+0x2a0>
 8000e4e:	4638      	mov	r0, r7
 8000e50:	f504 72e3 	add.w	r2, r4, #454	; 0x1c6
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8000e54:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 8000e58:	b103      	cbz	r3, 8000e5c <find_volume+0xb0>
 8000e5a:	6813      	ldr	r3, [r2, #0]
 8000e5c:	f84d 3020 	str.w	r3, [sp, r0, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8000e60:	3001      	adds	r0, #1
 8000e62:	2804      	cmp	r0, #4
 8000e64:	f102 0210 	add.w	r2, r2, #16
 8000e68:	d1f4      	bne.n	8000e54 <find_volume+0xa8>
 8000e6a:	2700      	movs	r7, #0
			bsect = br[i];
 8000e6c:	f85d 5027 	ldr.w	r5, [sp, r7, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8000e70:	2d00      	cmp	r5, #0
 8000e72:	f000 80e3 	beq.w	800103c <find_volume+0x290>
 8000e76:	4629      	mov	r1, r5
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f7ff ff69 	bl	8000d50 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	f040 80dd 	bne.w	800103e <find_volume+0x292>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8000e84:	7b23      	ldrb	r3, [r4, #12]
 8000e86:	7ae0      	ldrb	r0, [r4, #11]
 8000e88:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8000e8c:	f241 030a 	movw	r3, #4106	; 0x100a
 8000e90:	5ae3      	ldrh	r3, [r4, r3]
 8000e92:	4283      	cmp	r3, r0
 8000e94:	f040 80de 	bne.w	8001054 <find_volume+0x2a8>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8000e98:	7de3      	ldrb	r3, [r4, #23]
 8000e9a:	7da1      	ldrb	r1, [r4, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8000e9c:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	fs->fsize = fasize;
 8000ea0:	f241 0318 	movw	r3, #4120	; 0x1018
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8000ea4:	bf08      	it	eq
 8000ea6:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 8000ea8:	50e1      	str	r1, [r4, r3]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8000eaa:	f241 0303 	movw	r3, #4099	; 0x1003
 8000eae:	f894 e010 	ldrb.w	lr, [r4, #16]
 8000eb2:	f804 e003 	strb.w	lr, [r4, r3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8000eb6:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	f200 80ca 	bhi.w	8001054 <find_volume+0x2a8>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8000ec0:	f241 0302 	movw	r3, #4098	; 0x1002
 8000ec4:	7b67      	ldrb	r7, [r4, #13]
 8000ec6:	54e7      	strb	r7, [r4, r3]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8000ec8:	2f00      	cmp	r7, #0
 8000eca:	f000 80c3 	beq.w	8001054 <find_volume+0x2a8>
 8000ece:	1e7b      	subs	r3, r7, #1
 8000ed0:	423b      	tst	r3, r7
 8000ed2:	f040 80bf 	bne.w	8001054 <find_volume+0x2a8>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8000ed6:	7ca3      	ldrb	r3, [r4, #18]
 8000ed8:	f894 8011 	ldrb.w	r8, [r4, #17]
 8000edc:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
 8000ee0:	f241 0308 	movw	r3, #4104	; 0x1008
 8000ee4:	f824 8003 	strh.w	r8, [r4, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8000ee8:	0943      	lsrs	r3, r0, #5
 8000eea:	fbb8 f2f3 	udiv	r2, r8, r3
 8000eee:	fb03 8312 	mls	r3, r3, r2, r8
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f040 80ad 	bne.w	8001054 <find_volume+0x2a8>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8000efa:	f894 c014 	ldrb.w	ip, [r4, #20]
 8000efe:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8000f00:	f894 900f 	ldrb.w	r9, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8000f04:	ea53 230c 	orrs.w	r3, r3, ip, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8000f08:	f894 c00e 	ldrb.w	ip, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8000f0c:	bf08      	it	eq
 8000f0e:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8000f10:	ea5c 2c09 	orrs.w	ip, ip, r9, lsl #8
 8000f14:	f000 809e 	beq.w	8001054 <find_volume+0x2a8>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8000f18:	fb01 fe0e 	mul.w	lr, r1, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8000f1c:	b292      	uxth	r2, r2
 8000f1e:	4462      	add	r2, ip
 8000f20:	4472      	add	r2, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8000f22:	4293      	cmp	r3, r2
 8000f24:	f0c0 8096 	bcc.w	8001054 <find_volume+0x2a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8000f28:	1a9b      	subs	r3, r3, r2
 8000f2a:	fbb3 f3f7 	udiv	r3, r3, r7
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 8090 	beq.w	8001054 <find_volume+0x2a8>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8000f34:	f640 77f5 	movw	r7, #4085	; 0xff5
 8000f38:	42bb      	cmp	r3, r7
 8000f3a:	f240 808f 	bls.w	800105c <find_volume+0x2b0>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8000f3e:	f64f 77f5 	movw	r7, #65525	; 0xfff5
 8000f42:	42bb      	cmp	r3, r7
 8000f44:	bf94      	ite	ls
 8000f46:	2702      	movls	r7, #2
 8000f48:	2703      	movhi	r7, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8000f4a:	f241 0914 	movw	r9, #4116	; 0x1014
 8000f4e:	3302      	adds	r3, #2
 8000f50:	f844 3009 	str.w	r3, [r4, r9]
	fs->volbase = bsect;								/* Volume start sector */
 8000f54:	f241 091c 	movw	r9, #4124	; 0x101c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8000f58:	44ac      	add	ip, r5
	fs->volbase = bsect;								/* Volume start sector */
 8000f5a:	f844 5009 	str.w	r5, [r4, r9]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8000f5e:	f504 5981 	add.w	r9, r4, #4128	; 0x1020
 8000f62:	f8c9 c000 	str.w	ip, [r9]
	fs->database = bsect + sysect;						/* Data start sector */
 8000f66:	f241 0928 	movw	r9, #4136	; 0x1028
 8000f6a:	442a      	add	r2, r5
	if (fmt == FS_FAT32) {
 8000f6c:	2f03      	cmp	r7, #3
	fs->database = bsect + sysect;						/* Data start sector */
 8000f6e:	f844 2009 	str.w	r2, [r4, r9]
	if (fmt == FS_FAT32) {
 8000f72:	d175      	bne.n	8001060 <find_volume+0x2b4>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8000f74:	f1b8 0f00 	cmp.w	r8, #0
 8000f78:	d16c      	bne.n	8001054 <find_volume+0x2a8>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8000f7a:	f241 0e24 	movw	lr, #4132	; 0x1024
 8000f7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8000f80:	009b      	lsls	r3, r3, #2
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8000f82:	f844 200e 	str.w	r2, [r4, lr]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8000f86:	1e42      	subs	r2, r0, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	fbb3 f0f0 	udiv	r0, r3, r0
 8000f8e:	4281      	cmp	r1, r0
 8000f90:	d360      	bcc.n	8001054 <find_volume+0x2a8>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f96:	f241 0910 	movw	r9, #4112	; 0x1010
 8000f9a:	f241 080c 	movw	r8, #4108	; 0x100c
 8000f9e:	f844 3009 	str.w	r3, [r4, r9]
	fs->fsi_flag = 0x80;
 8000fa2:	f241 0a05 	movw	sl, #4101	; 0x1005
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8000fa6:	f844 3008 	str.w	r3, [r4, r8]
	fs->fsi_flag = 0x80;
 8000faa:	2380      	movs	r3, #128	; 0x80
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8000fac:	2f03      	cmp	r7, #3
	fs->fsi_flag = 0x80;
 8000fae:	f804 300a 	strb.w	r3, [r4, sl]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8000fb2:	d12d      	bne.n	8001010 <find_volume+0x264>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8000fb4:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8000fb8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8000fbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d125      	bne.n	8001010 <find_volume+0x264>
		&& move_window(fs, bsect + 1) == FR_OK)
 8000fc4:	1c69      	adds	r1, r5, #1
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f7ff fea4 	bl	8000d14 <move_window>
 8000fcc:	bb00      	cbnz	r0, 8001010 <find_volume+0x264>
		fs->fsi_flag = 0;
 8000fce:	f804 000a 	strb.w	r0, [r4, sl]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8000fd2:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8000fd6:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8000fda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000fde:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d114      	bne.n	8001010 <find_volume+0x264>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8000fe6:	6822      	ldr	r2, [r4, #0]
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <find_volume+0x2f0>)
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d110      	bne.n	8001010 <find_volume+0x264>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8000fee:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8000ff2:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8000ff6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000ffa:	3320      	adds	r3, #32
 8000ffc:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8000ffe:	bf01      	itttt	eq
 8001000:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 8001004:	f844 3009 	streq.w	r3, [r4, r9]
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8001008:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 800100c:	f844 3008 	streq.w	r3, [r4, r8]
	fs->id = ++Fsid;	/* File system mount ID */
 8001010:	4a23      	ldr	r2, [pc, #140]	; (80010a0 <find_volume+0x2f4>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8001012:	7037      	strb	r7, [r6, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8001014:	8813      	ldrh	r3, [r2, #0]
 8001016:	2000      	movs	r0, #0
 8001018:	3301      	adds	r3, #1
 800101a:	b29b      	uxth	r3, r3
 800101c:	8013      	strh	r3, [r2, #0]
 800101e:	f241 0206 	movw	r2, #4102	; 0x1006
 8001022:	52a3      	strh	r3, [r4, r2]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <find_volume+0x2f8>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4294      	cmp	r4, r2
 800102a:	bf04      	itt	eq
 800102c:	2200      	moveq	r2, #0
 800102e:	601a      	streq	r2, [r3, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	4294      	cmp	r4, r2
 8001034:	f47f aedf 	bne.w	8000df6 <find_volume+0x4a>
 8001038:	60d8      	str	r0, [r3, #12]
 800103a:	e6dc      	b.n	8000df6 <find_volume+0x4a>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800103c:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800103e:	3701      	adds	r7, #1
 8001040:	2f04      	cmp	r7, #4
 8001042:	f47f af13 	bne.w	8000e6c <find_volume+0xc0>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8001046:	2803      	cmp	r0, #3
 8001048:	d104      	bne.n	8001054 <find_volume+0x2a8>
 800104a:	e6f0      	b.n	8000e2e <find_volume+0x82>
 800104c:	2803      	cmp	r0, #3
 800104e:	f43f aeee 	beq.w	8000e2e <find_volume+0x82>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8001052:	b108      	cbz	r0, 8001058 <find_volume+0x2ac>
 8001054:	200d      	movs	r0, #13
 8001056:	e6ce      	b.n	8000df6 <find_volume+0x4a>
	bsect = 0;
 8001058:	4605      	mov	r5, r0
 800105a:	e713      	b.n	8000e84 <find_volume+0xd8>
	fmt = FS_FAT12;
 800105c:	2701      	movs	r7, #1
 800105e:	e774      	b.n	8000f4a <find_volume+0x19e>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8001060:	f1b8 0f00 	cmp.w	r8, #0
 8001064:	d0f6      	beq.n	8001054 <find_volume+0x2a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8001066:	eb0e 020c 	add.w	r2, lr, ip
 800106a:	f241 0e24 	movw	lr, #4132	; 0x1024
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800106e:	2f02      	cmp	r7, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8001070:	f844 200e 	str.w	r2, [r4, lr]
 8001074:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8001078:	bf1b      	ittet	ne
 800107a:	18d2      	addne	r2, r2, r3
 800107c:	f003 0301 	andne.w	r3, r3, #1
 8001080:	4613      	moveq	r3, r2
 8001082:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8001086:	e77e      	b.n	8000f86 <find_volume+0x1da>
	if (vol < 0) return FR_INVALID_DRIVE;
 8001088:	200b      	movs	r0, #11
 800108a:	e6b4      	b.n	8000df6 <find_volume+0x4a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800108c:	200c      	movs	r0, #12
 800108e:	e6b2      	b.n	8000df6 <find_volume+0x4a>
			return FR_OK;				/* The file system object is valid */
 8001090:	4628      	mov	r0, r5
 8001092:	e6b0      	b.n	8000df6 <find_volume+0x4a>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8001094:	2003      	movs	r0, #3
 8001096:	e6ae      	b.n	8000df6 <find_volume+0x4a>
 8001098:	20000040 	.word	0x20000040
 800109c:	41615252 	.word	0x41615252
 80010a0:	2000005c 	.word	0x2000005c
 80010a4:	20000044 	.word	0x20000044

080010a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80010a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80010aa:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80010ac:	a804      	add	r0, sp, #16
 80010ae:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 80010b2:	9100      	str	r1, [sp, #0]
 80010b4:	4615      	mov	r5, r2


	vol = get_ldnumber(&rp);
 80010b6:	f7ff fdd9 	bl	8000c6c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80010ba:	1e06      	subs	r6, r0, #0
 80010bc:	db23      	blt.n	8001106 <f_mount+0x5e>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80010be:	4a14      	ldr	r2, [pc, #80]	; (8001110 <f_mount+0x68>)
 80010c0:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]

	if (cfs) {
 80010c4:	b16b      	cbz	r3, 80010e2 <f_mount+0x3a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80010c6:	4913      	ldr	r1, [pc, #76]	; (8001114 <f_mount+0x6c>)
 80010c8:	2400      	movs	r4, #0
 80010ca:	6808      	ldr	r0, [r1, #0]
 80010cc:	4283      	cmp	r3, r0
 80010ce:	bf04      	itt	eq
 80010d0:	2000      	moveq	r0, #0
 80010d2:	6008      	streq	r0, [r1, #0]
 80010d4:	68c8      	ldr	r0, [r1, #12]
 80010d6:	4283      	cmp	r3, r0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80010d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
		if (Files[i].fs == fs) Files[i].fs = 0;
 80010dc:	bf08      	it	eq
 80010de:	60cc      	streq	r4, [r1, #12]
		cfs->fs_type = 0;				/* Clear old fs object */
 80010e0:	701c      	strb	r4, [r3, #0]
	}

	if (fs) {
 80010e2:	9801      	ldr	r0, [sp, #4]
 80010e4:	b118      	cbz	r0, 80010ee <f_mount+0x46>
		fs->fs_type = 0;				/* Clear new fs object */
 80010e6:	2100      	movs	r1, #0
 80010e8:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80010ec:	7019      	strb	r1, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80010ee:	f842 0026 	str.w	r0, [r2, r6, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80010f2:	b130      	cbz	r0, 8001102 <f_mount+0x5a>
 80010f4:	2d01      	cmp	r5, #1
 80010f6:	d108      	bne.n	800110a <f_mount+0x62>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80010f8:	2200      	movs	r2, #0
 80010fa:	4669      	mov	r1, sp
 80010fc:	a801      	add	r0, sp, #4
 80010fe:	f7ff fe55 	bl	8000dac <find_volume>
	LEAVE_FF(fs, res);
}
 8001102:	b004      	add	sp, #16
 8001104:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8001106:	200b      	movs	r0, #11
 8001108:	e7fb      	b.n	8001102 <f_mount+0x5a>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800110a:	2000      	movs	r0, #0
 800110c:	e7f9      	b.n	8001102 <f_mount+0x5a>
 800110e:	bf00      	nop
 8001110:	20000040 	.word	0x20000040
 8001114:	20000044 	.word	0x20000044

08001118 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8001118:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <FATFS_LinkDriverEx+0x40>)
 800111c:	7a5c      	ldrb	r4, [r3, #9]
 800111e:	2c01      	cmp	r4, #1
 8001120:	d818      	bhi.n	8001154 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 8001122:	2400      	movs	r4, #0
 8001124:	7a5d      	ldrb	r5, [r3, #9]
 8001126:	b2ed      	uxtb	r5, r5
 8001128:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 800112a:	7a5d      	ldrb	r5, [r3, #9]
 800112c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001130:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8001132:	7a58      	ldrb	r0, [r3, #9]
 8001134:	4418      	add	r0, r3
 8001136:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8001138:	7a5a      	ldrb	r2, [r3, #9]
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	1c50      	adds	r0, r2, #1
 800113e:	b2c0      	uxtb	r0, r0
 8001140:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8001142:	233a      	movs	r3, #58	; 0x3a
 8001144:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8001146:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8001148:	3230      	adds	r2, #48	; 0x30
 800114a:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800114c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800114e:	70cc      	strb	r4, [r1, #3]
 8001150:	4620      	mov	r0, r4
 8001152:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8001154:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 8001156:	bd30      	pop	{r4, r5, pc}
 8001158:	20000060 	.word	0x20000060

0800115c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	f7ff bfdb 	b.w	8001118 <FATFS_LinkDriverEx>
	...

08001164 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8001164:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8001166:	4903      	ldr	r1, [pc, #12]	; (8001174 <MX_FATFS_Init+0x10>)
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <MX_FATFS_Init+0x14>)
 800116a:	f7ff fff7 	bl	800115c <FATFS_LinkDriver>
 800116e:	4b03      	ldr	r3, [pc, #12]	; (800117c <MX_FATFS_Init+0x18>)
 8001170:	7018      	strb	r0, [r3, #0]
 8001172:	bd08      	pop	{r3, pc}
 8001174:	20000070 	.word	0x20000070
 8001178:	20000010 	.word	0x20000010
 800117c:	20000074 	.word	0x20000074

08001180 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001180:	4b26      	ldr	r3, [pc, #152]	; (800121c <MX_GPIO_Init+0x9c>)
{
 8001182:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001184:	699a      	ldr	r2, [r3, #24]
{
 8001186:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001188:	f042 0210 	orr.w	r2, r2, #16
 800118c:	619a      	str	r2, [r3, #24]
 800118e:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001190:	4d23      	ldr	r5, [pc, #140]	; (8001220 <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	f002 0210 	and.w	r2, r2, #16
 8001196:	9200      	str	r2, [sp, #0]
 8001198:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800119c:	4628      	mov	r0, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119e:	f042 0220 	orr.w	r2, r2, #32
 80011a2:	619a      	str	r2, [r3, #24]
 80011a4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80011a6:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a8:	f002 0220 	and.w	r2, r2, #32
 80011ac:	9201      	str	r2, [sp, #4]
 80011ae:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	f042 0204 	orr.w	r2, r2, #4
 80011b8:	619a      	str	r2, [r3, #24]
 80011ba:	699a      	ldr	r2, [r3, #24]
 80011bc:	f002 0204 	and.w	r2, r2, #4
 80011c0:	9202      	str	r2, [sp, #8]
 80011c2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c4:	699a      	ldr	r2, [r3, #24]
 80011c6:	f042 0208 	orr.w	r2, r2, #8
 80011ca:	619a      	str	r2, [r3, #24]
 80011cc:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	9303      	str	r3, [sp, #12]
 80011d6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80011d8:	f7ff f95a 	bl	8000490 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80011dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_GPIO_Init+0xa4>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e4:	a904      	add	r1, sp, #16
 80011e6:	4810      	ldr	r0, [pc, #64]	; (8001228 <MX_GPIO_Init+0xa8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f7ff f870 	bl	80002d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80011f0:	2340      	movs	r3, #64	; 0x40
 80011f2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2302      	movs	r3, #2
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80011fc:	a904      	add	r1, sp, #16
 80011fe:	4628      	mov	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001202:	f7ff f865 	bl	80002d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001206:	4622      	mov	r2, r4
 8001208:	4621      	mov	r1, r4
 800120a:	2028      	movs	r0, #40	; 0x28
 800120c:	f7fe fff8 	bl	8000200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001210:	2028      	movs	r0, #40	; 0x28
 8001212:	f7ff f829 	bl	8000268 <HAL_NVIC_EnableIRQ>

}
 8001216:	b009      	add	sp, #36	; 0x24
 8001218:	bd30      	pop	{r4, r5, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	40010c00 	.word	0x40010c00
 8001224:	10210000 	.word	0x10210000
 8001228:	40011000 	.word	0x40011000

0800122c <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122c:	2301      	movs	r3, #1
{
 800122e:	b510      	push	{r4, lr}
 8001230:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001232:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001236:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001238:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800123e:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001240:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001242:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001244:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001246:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800124c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001250:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001252:	f7ff f92f 	bl	80004b4 <HAL_RCC_OscConfig>
 8001256:	b100      	cbz	r0, 800125a <SystemClock_Config+0x2e>
 8001258:	e7fe      	b.n	8001258 <SystemClock_Config+0x2c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125a:	230f      	movs	r3, #15
 800125c:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001262:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001264:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001266:	4621      	mov	r1, r4
 8001268:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126a:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800126c:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800126e:	f7ff fae9 	bl	8000844 <HAL_RCC_ClockConfig>
 8001272:	4604      	mov	r4, r0
 8001274:	b100      	cbz	r0, 8001278 <SystemClock_Config+0x4c>
 8001276:	e7fe      	b.n	8001276 <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001278:	f7ff fb88 	bl	800098c <HAL_RCC_GetHCLKFreq>
 800127c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001280:	fbb0 f0f3 	udiv	r0, r0, r3
 8001284:	f7fe fffc 	bl	8000280 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001288:	2004      	movs	r0, #4
 800128a:	f7ff f80f 	bl	80002ac <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800128e:	4622      	mov	r2, r4
 8001290:	4621      	mov	r1, r4
 8001292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001296:	f7fe ffb3 	bl	8000200 <HAL_NVIC_SetPriority>
}
 800129a:	b010      	add	sp, #64	; 0x40
 800129c:	bd10      	pop	{r4, pc}
	...

080012a0 <main>:
{
 80012a0:	b500      	push	{lr}
 80012a2:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 80012a6:	b085      	sub	sp, #20
  HAL_Init();
 80012a8:	f7fe ff74 	bl	8000194 <HAL_Init>
  f_mount(&fs, "0:/", 1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	490a      	ldr	r1, [pc, #40]	; (80012d8 <main+0x38>)
 80012b0:	4668      	mov	r0, sp
 80012b2:	f7ff fef9 	bl	80010a8 <f_mount>
  f_mount(NULL, "0:/", 1);
 80012b6:	2201      	movs	r2, #1
 80012b8:	4907      	ldr	r1, [pc, #28]	; (80012d8 <main+0x38>)
 80012ba:	2000      	movs	r0, #0
 80012bc:	f7ff fef4 	bl	80010a8 <f_mount>
  SystemClock_Config();
 80012c0:	f7ff ffb4 	bl	800122c <SystemClock_Config>
  MX_GPIO_Init();
 80012c4:	f7ff ff5c 	bl	8001180 <MX_GPIO_Init>
  MX_SPI1_Init();
 80012c8:	f000 f80a 	bl	80012e0 <MX_SPI1_Init>
  MX_FATFS_Init();
 80012cc:	f7ff ff4a 	bl	8001164 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80012d0:	f000 f8e0 	bl	8001494 <MX_USART2_UART_Init>
 80012d4:	e7fe      	b.n	80012d4 <main+0x34>
 80012d6:	bf00      	nop
 80012d8:	080015fc 	.word	0x080015fc

080012dc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80012dc:	e7fe      	b.n	80012dc <_Error_Handler>
	...

080012e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012e0:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012e2:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi1.Instance = SPI1;
 80012e6:	480e      	ldr	r0, [pc, #56]	; (8001320 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_SPI1_Init+0x44>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ea:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ee:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012f2:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012f4:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012f6:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f8:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012fa:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012fc:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012fe:	2220      	movs	r2, #32
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001300:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001302:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001304:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001306:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001308:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 800130a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800130c:	f7ff fb64 	bl	80009d8 <HAL_SPI_Init>
 8001310:	b128      	cbz	r0, 800131e <MX_SPI1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8001312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001316:	214f      	movs	r1, #79	; 0x4f
 8001318:	4803      	ldr	r0, [pc, #12]	; (8001328 <MX_SPI1_Init+0x48>)
 800131a:	f7ff bfdf 	b.w	80012dc <_Error_Handler>
 800131e:	bd08      	pop	{r3, pc}
 8001320:	200020d4 	.word	0x200020d4
 8001324:	40013000 	.word	0x40013000
 8001328:	08001600 	.word	0x08001600

0800132c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800132c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 800132e:	6802      	ldr	r2, [r0, #0]
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_SPI_MspInit+0x4c>)
 8001332:	429a      	cmp	r2, r3
 8001334:	d11d      	bne.n	8001372 <HAL_SPI_MspInit+0x46>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001336:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800133a:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800133e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001342:	619a      	str	r2, [r3, #24]
 8001344:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <HAL_SPI_MspInit+0x50>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001350:	23a0      	movs	r3, #160	; 0xa0
 8001352:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f7fe ffb8 	bl	80002d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001360:	2340      	movs	r3, #64	; 0x40
 8001362:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001364:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	a902      	add	r1, sp, #8
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <HAL_SPI_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f7fe ffaf 	bl	80002d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001372:	b007      	add	sp, #28
 8001374:	f85d fb04 	ldr.w	pc, [sp], #4
 8001378:	40013000 	.word	0x40013000
 800137c:	40010800 	.word	0x40010800

08001380 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001380:	4b25      	ldr	r3, [pc, #148]	; (8001418 <HAL_MspInit+0x98>)
{
 8001382:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001384:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001386:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	619a      	str	r2, [r3, #24]
 800138e:	699a      	ldr	r2, [r3, #24]
 8001390:	f002 0201 	and.w	r2, r2, #1
 8001394:	9200      	str	r2, [sp, #0]
 8001396:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001398:	69da      	ldr	r2, [r3, #28]
 800139a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800139e:	61da      	str	r2, [r3, #28]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013aa:	f7fe ff17 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f06f 000b 	mvn.w	r0, #11
 80013b4:	4611      	mov	r1, r2
 80013b6:	f7fe ff23 	bl	8000200 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f06f 000a 	mvn.w	r0, #10
 80013c0:	4611      	mov	r1, r2
 80013c2:	f7fe ff1d 	bl	8000200 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	f06f 0009 	mvn.w	r0, #9
 80013cc:	4611      	mov	r1, r2
 80013ce:	f7fe ff17 	bl	8000200 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	f06f 0004 	mvn.w	r0, #4
 80013d8:	4611      	mov	r1, r2
 80013da:	f7fe ff11 	bl	8000200 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	f06f 0003 	mvn.w	r0, #3
 80013e4:	4611      	mov	r1, r2
 80013e6:	f7fe ff0b 	bl	8000200 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f06f 0001 	mvn.w	r0, #1
 80013f0:	4611      	mov	r1, r2
 80013f2:	f7fe ff05 	bl	8000200 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013fc:	4611      	mov	r1, r2
 80013fe:	f7fe feff 	bl	8000200 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001402:	4a06      	ldr	r2, [pc, #24]	; (800141c <HAL_MspInit+0x9c>)
 8001404:	6853      	ldr	r3, [r2, #4]
 8001406:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800140a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800140e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001410:	b003      	add	sp, #12
 8001412:	f85d fb04 	ldr.w	pc, [sp], #4
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	40010000 	.word	0x40010000

08001420 <NMI_Handler>:
 8001420:	4770      	bx	lr

08001422 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler>

08001424 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001424:	e7fe      	b.n	8001424 <MemManage_Handler>

08001426 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler>

08001428 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001428:	e7fe      	b.n	8001428 <UsageFault_Handler>

0800142a <SVC_Handler>:
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:
 800142c:	4770      	bx	lr

0800142e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800142e:	4770      	bx	lr

08001430 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001430:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001432:	f7fe fec1 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800143a:	f7fe bf44 	b.w	80002c6 <HAL_SYSTICK_IRQHandler>

0800143e <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800143e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001442:	f7ff b82b 	b.w	800049c <HAL_GPIO_EXTI_IRQHandler>
	...

08001448 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <SystemInit+0x40>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	f042 0201 	orr.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001452:	6859      	ldr	r1, [r3, #4]
 8001454:	4a0d      	ldr	r2, [pc, #52]	; (800148c <SystemInit+0x44>)
 8001456:	400a      	ands	r2, r1
 8001458:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001460:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001464:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800146c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001474:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001476:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800147a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800147c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <SystemInit+0x48>)
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	f8ff0000 	.word	0xf8ff0000
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001494:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8001496:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart2.Instance = USART2;
 800149a:	480b      	ldr	r0, [pc, #44]	; (80014c8 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_USART2_UART_Init+0x38>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800149e:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 80014a0:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014a4:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a6:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014a8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014aa:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ac:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014b2:	f7ff fb6b 	bl	8000b8c <HAL_UART_Init>
 80014b6:	b128      	cbz	r0, 80014c4 <MX_USART2_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80014b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80014bc:	214c      	movs	r1, #76	; 0x4c
 80014be:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_USART2_UART_Init+0x3c>)
 80014c0:	f7ff bf0c 	b.w	80012dc <_Error_Handler>
 80014c4:	bd08      	pop	{r3, pc}
 80014c6:	bf00      	nop
 80014c8:	2000212c 	.word	0x2000212c
 80014cc:	40004400 	.word	0x40004400
 80014d0:	08001625 	.word	0x08001625

080014d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 80014d6:	6802      	ldr	r2, [r0, #0]
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <HAL_UART_MspInit+0x38>)
 80014da:	429a      	cmp	r2, r3
 80014dc:	d113      	bne.n	8001506 <HAL_UART_MspInit+0x32>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014de:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80014e2:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014ea:	61da      	str	r2, [r3, #28]
 80014ec:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	4808      	ldr	r0, [pc, #32]	; (8001510 <HAL_UART_MspInit+0x3c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f4:	9301      	str	r3, [sp, #4]
 80014f6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014f8:	230c      	movs	r3, #12
 80014fa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f7fe fee5 	bl	80002d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001506:	b007      	add	sp, #28
 8001508:	f85d fb04 	ldr.w	pc, [sp], #4
 800150c:	40004400 	.word	0x40004400
 8001510:	40010800 	.word	0x40010800

08001514 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8001514:	2201      	movs	r2, #1
 8001516:	4b02      	ldr	r3, [pc, #8]	; (8001520 <USER_status+0xc>)
 8001518:	701a      	strb	r2, [r3, #0]
    return Stat;
 800151a:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END STATUS */
}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	2000000c 	.word	0x2000000c

08001524 <USER_write>:
{ 
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
  /* USER CODE END WRITE */
}
 8001524:	2000      	movs	r0, #0
 8001526:	4770      	bx	lr

08001528 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8001528:	2001      	movs	r0, #1
 800152a:	4770      	bx	lr

0800152c <USER_read>:
 800152c:	2000      	movs	r0, #0
 800152e:	4770      	bx	lr

08001530 <USER_initialize>:
 8001530:	2201      	movs	r2, #1
 8001532:	4b02      	ldr	r3, [pc, #8]	; (800153c <USER_initialize+0xc>)
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	7818      	ldrb	r0, [r3, #0]
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	2000000c 	.word	0x2000000c

08001540 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001540:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001542:	e003      	b.n	800154c <LoopCopyDataInit>

08001544 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001546:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001548:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800154a:	3104      	adds	r1, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800154c:	480a      	ldr	r0, [pc, #40]	; (8001578 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001550:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001552:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001554:	d3f6      	bcc.n	8001544 <CopyDataInit>
  ldr r2, =_sbss
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001558:	e002      	b.n	8001560 <LoopFillZerobss>

0800155a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800155c:	f842 3b04 	str.w	r3, [r2], #4

08001560 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001562:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001564:	d3f9      	bcc.n	800155a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001566:	f7ff ff6f 	bl	8001448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156a:	f000 f80f 	bl	800158c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800156e:	f7ff fe97 	bl	80012a0 <main>
  bx lr
 8001572:	4770      	bx	lr
  ldr r3, =_sidata
 8001574:	0800163c 	.word	0x0800163c
  ldr r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800157c:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8001580:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8001584:	2000216c 	.word	0x2000216c

08001588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC1_2_IRQHandler>
	...

0800158c <__libc_init_array>:
 800158c:	b570      	push	{r4, r5, r6, lr}
 800158e:	2500      	movs	r5, #0
 8001590:	4e0c      	ldr	r6, [pc, #48]	; (80015c4 <__libc_init_array+0x38>)
 8001592:	4c0d      	ldr	r4, [pc, #52]	; (80015c8 <__libc_init_array+0x3c>)
 8001594:	1ba4      	subs	r4, r4, r6
 8001596:	10a4      	asrs	r4, r4, #2
 8001598:	42a5      	cmp	r5, r4
 800159a:	d109      	bne.n	80015b0 <__libc_init_array+0x24>
 800159c:	f000 f81a 	bl	80015d4 <_init>
 80015a0:	2500      	movs	r5, #0
 80015a2:	4e0a      	ldr	r6, [pc, #40]	; (80015cc <__libc_init_array+0x40>)
 80015a4:	4c0a      	ldr	r4, [pc, #40]	; (80015d0 <__libc_init_array+0x44>)
 80015a6:	1ba4      	subs	r4, r4, r6
 80015a8:	10a4      	asrs	r4, r4, #2
 80015aa:	42a5      	cmp	r5, r4
 80015ac:	d105      	bne.n	80015ba <__libc_init_array+0x2e>
 80015ae:	bd70      	pop	{r4, r5, r6, pc}
 80015b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015b4:	4798      	blx	r3
 80015b6:	3501      	adds	r5, #1
 80015b8:	e7ee      	b.n	8001598 <__libc_init_array+0xc>
 80015ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015be:	4798      	blx	r3
 80015c0:	3501      	adds	r5, #1
 80015c2:	e7f2      	b.n	80015aa <__libc_init_array+0x1e>
 80015c4:	08001634 	.word	0x08001634
 80015c8:	08001634 	.word	0x08001634
 80015cc:	08001634 	.word	0x08001634
 80015d0:	08001638 	.word	0x08001638

080015d4 <_init>:
 80015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d6:	bf00      	nop
 80015d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015da:	bc08      	pop	{r3}
 80015dc:	469e      	mov	lr, r3
 80015de:	4770      	bx	lr

080015e0 <_fini>:
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e2:	bf00      	nop
 80015e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015e6:	bc08      	pop	{r3}
 80015e8:	469e      	mov	lr, r3
 80015ea:	4770      	bx	lr
